{"version":3,"file":"src_avformat_formats_IMpegtsFormat_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/bsf/AVBSFilter.ts","webpack://AVPlayer/./src/avformat/bsf/aac/ADTS2RawFilter.ts","webpack://AVPlayer/./src/avformat/bsf/aac/LATM2RawFilter.ts","webpack://AVPlayer/./src/avformat/bsf/opus/Mpegts2RawFilter.ts","webpack://AVPlayer/./src/avformat/codecs/aac.ts","webpack://AVPlayer/./src/avformat/codecs/h264.ts","webpack://AVPlayer/./src/avformat/codecs/hevc.ts","webpack://AVPlayer/./src/avformat/codecs/mp3.ts","webpack://AVPlayer/./src/avformat/codecs/opus.ts","webpack://AVPlayer/./src/avformat/codecs/vvc.ts","webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/IMpegtsFormat.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/analyzeTSLength.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/clearTSSliceQueue.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/createMpegtsContext.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/createMpegtsStreamContext.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/handleSectionSlice.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/initStream.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/midPred.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/parseAdaptationField.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/parsePAT.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/parsePES.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/parsePESSlice.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/parsePMT.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/parseSCTE35.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/function/parseSection.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/impegts.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/mpegts.ts","webpack://AVPlayer/./src/avformat/formats/mpegts/struct.ts","webpack://AVPlayer/./src/avformat/function/getBytesByDuration.ts","webpack://AVPlayer/./src/avformat/function/seekInBytes.ts","webpack://AVPlayer/./src/avutil/util/expgolomb.ts","webpack://AVPlayer/./src/avutil/util/intread.ts","webpack://AVPlayer/./src/avutil/util/nalu.ts","webpack://AVPlayer/./src/common/io/BitReader.ts","webpack://AVPlayer/./src/common/io/BitWriter.ts","webpack://AVPlayer/./src/common/io/BufferWriter.ts"],"sourcesContent":["/*\r\n * libmedia AVBSFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avMallocz } from 'avutil/util/mem'\r\nimport { copyCodecParameters, freeCodecParameters } from 'avutil/util/codecparameters'\r\n\r\nexport default abstract class AVBSFilter {\r\n\r\n  inCodecpar: pointer<AVCodecParameters>\r\n  inTimeBase: Rational\r\n\r\n  outCodecpar: pointer<AVCodecParameters>\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    this.inCodecpar = avMallocz(sizeof(AVCodecParameters))\r\n    copyCodecParameters(this.inCodecpar, codecpar)\r\n\r\n    this.inTimeBase = {\r\n      den: timeBase.den,\r\n      num: timeBase.num\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy() {\r\n    if (this.inCodecpar) {\r\n      freeCodecParameters(this.inCodecpar)\r\n      this.inCodecpar = nullptr\r\n    }\r\n  }\r\n\r\n  public abstract sendAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract receiveAVPacket(avpacket: pointer<AVPacket>): number\r\n}\r\n","/*\r\n * libmedia ADTS2RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE } from 'avutil/constant'\r\nimport { MPEG4Channels, MPEG4SamplingFrequencies, avCodecParameters2Extradata } from '../../codecs/aac'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, addAVPacketSideData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\n\r\nexport default class ADTS2RawFilter extends AVBSFilter {\r\n\r\n  private streamMuxConfig: {\r\n    profile: number\r\n    sampleRate: number\r\n    channels: number\r\n  }\r\n\r\n  private caches: {\r\n    duration: number\r\n    dts: bigint\r\n    buffer: Uint8Array\r\n    extradata: Uint8Array\r\n  }[]\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n    this.streamMuxConfig = {\r\n      profile: NOPTS_VALUE,\r\n      sampleRate: NOPTS_VALUE,\r\n      channels: NOPTS_VALUE\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  /**\r\n   * \r\n   * adts 封装转 raw\r\n   * \r\n   * bits    \r\n   * - 12  syncword\r\n   * - 1   ID (MPEG 标识位，固定为 1)\r\n   * - 2   Layer ( 固定为 0)\r\n   * - 1   Protection Absent ( 指示是否有 CRC 校验，1 表示没有校验）\r\n   * - 2   Profile\r\n   * - 4   Sampling Frequency Index ( 采样率的索引）\r\n   * - 1   Private Bit ( 保留位，一般设置为 0)\r\n   * - 3   Channel Configuration ( 音频通道数）\r\n   * - 1   Original Copy ( 原始拷贝标志位，一般设置为 0)\r\n   * - 1   Home ( 保留位，一般设置为 0)\r\n   * - 1   Copyright Identification Bit（置 0）\r\n   * - 1   Copyright Identification Start（置 0）\r\n   * - 13  Frame Length ( 帧长度，包括 ADTS 头和音频帧数据的长度）\r\n   * - 11  Buffer Fullness ( 缓冲区满度，可用于音频流的同步）\r\n   * - 2   Number of Raw Data Blocks in Frame ( 帧中原始数据块的数量）\r\n   * - 16  CRC (Protection Absent 控制）\r\n   * - N  raw aac data\r\n   * \r\n   */\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    let i = 0\r\n\r\n    let lastDts = avpacket.dts || avpacket.pts\r\n    const buffer = mapUint8Array(avpacket.data, avpacket.size).slice()\r\n\r\n    while (i < buffer.length) {\r\n\r\n      const syncWord = (buffer[i] << 4) | (buffer[i + 1] >> 4)\r\n\r\n      if (syncWord !== 0xFFF) {\r\n        logger.error(`found syncWord not 0xFFF, got: 0x${syncWord.toString(16)}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      /*\r\n       * const id = (buffer[1] & 0x08) >>> 3\r\n       * const layer = (buffer[1] & 0x06) >>> 1\r\n       */\r\n      const protectionAbsent = buffer[i + 1] & 0x01\r\n      const profile = (buffer[i + 2] & 0xC0) >>> 6\r\n      const samplingFrequencyIndex = (buffer[i + 2] & 0x3C) >>> 2\r\n      const channelConfiguration = ((buffer[i + 2] & 0x01) << 2) | ((buffer[i + 3] & 0xC0) >>> 6)\r\n\r\n      // adts_variable_header()\r\n      const aacFrameLength = ((buffer[i + 3] & 0x03) << 11)\r\n        | (buffer[i + 4] << 3)\r\n        | ((buffer[i + 5] & 0xE0) >>> 5)\r\n\r\n      const numberOfRawDataBlocksInFrame = buffer[i + 6] & 0x03\r\n\r\n      let adtsHeaderLength = protectionAbsent === 1 ? 7 : 9\r\n      let adtsFramePayloadLength = aacFrameLength - adtsHeaderLength\r\n\r\n      const item = {\r\n        dts: lastDts,\r\n        buffer: null,\r\n        extradata: null,\r\n        duration: NOPTS_VALUE,\r\n      }\r\n\r\n      item.buffer = buffer.subarray(i + adtsHeaderLength, i + adtsHeaderLength + adtsFramePayloadLength)\r\n\r\n      this.streamMuxConfig.profile = profile + 1\r\n      this.streamMuxConfig.sampleRate = MPEG4SamplingFrequencies[samplingFrequencyIndex]\r\n      this.streamMuxConfig.channels = MPEG4Channels[channelConfiguration]\r\n\r\n      const hasNewExtraData = this.inCodecpar.profile !== this.streamMuxConfig.profile\r\n        || this.inCodecpar.sampleRate !== this.streamMuxConfig.sampleRate\r\n        || this.inCodecpar.chLayout.nbChannels !== this.streamMuxConfig.channels\r\n\r\n\r\n      const duration = avRescaleQ(\r\n        static_cast<int64>((numberOfRawDataBlocksInFrame + 1) * 1024 / this.streamMuxConfig.sampleRate * AV_TIME_BASE),\r\n        AV_TIME_BASE_Q,\r\n        this.inTimeBase\r\n      )\r\n\r\n      item.duration = Number(duration)\r\n\r\n      if (hasNewExtraData) {\r\n        this.inCodecpar.profile = this.streamMuxConfig.profile\r\n        this.inCodecpar.sampleRate = this.streamMuxConfig.sampleRate\r\n        this.inCodecpar.chLayout.nbChannels = this.streamMuxConfig.channels\r\n\r\n        const extradata = avCodecParameters2Extradata(accessof(this.inCodecpar))\r\n\r\n        if (this.inCodecpar.extradata) {\r\n          avFree(this.inCodecpar.extradata)\r\n        }\r\n        this.inCodecpar.extradata = avMalloc(extradata.length)\r\n        memcpyFromUint8Array(this.inCodecpar.extradata, extradata.length, extradata)\r\n        this.inCodecpar.extradataSize = extradata.length\r\n        item.extradata = extradata\r\n      }\r\n\r\n      this.caches.push(item)\r\n\r\n      i += aacFrameLength\r\n      lastDts += duration\r\n    }\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.duration = static_cast<int64>(item.duration)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      if (item.extradata) {\r\n        const extradata = avMalloc(item.extradata.length)\r\n        memcpyFromUint8Array(extradata, item.extradata.length, item.extradata)\r\n        addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradata, item.extradata.length)\r\n      }\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia LATM2RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE } from 'avutil/constant'\r\nimport { MPEG4Channels, MPEG4SamplingFrequencies, avCodecParameters2Extradata } from '../../codecs/aac'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, addAVPacketSideData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\n\r\n\r\nexport default class LATM2RawFilter extends AVBSFilter {\r\n\r\n  private bitReader: BitReader\r\n\r\n  private streamMuxConfig: {\r\n    profile: number\r\n    sampleRate: number\r\n    channels: number\r\n  }\r\n\r\n  private caches: {\r\n    dts: bigint\r\n    buffer: Uint8Array\r\n    extradata: Uint8Array\r\n  }[]\r\n\r\n  private refSampleDuration: bigint\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n    this.refSampleDuration = 0n\r\n\r\n    this.bitReader = new BitReader()\r\n    this.streamMuxConfig = {\r\n      profile: NOPTS_VALUE,\r\n      sampleRate: NOPTS_VALUE,\r\n      channels: NOPTS_VALUE\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private getLATMValue() {\r\n    const bytesForValue = this.bitReader.readU(2)\r\n    let value = 0\r\n\r\n    for (let i = 0; i <= bytesForValue; i++) {\r\n      value = value << 8\r\n      value = value | this.bitReader.readU(8)\r\n    }\r\n\r\n    return value\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n\r\n    const buffer = mapUint8Array(avpacket.data, avpacket.size)\r\n\r\n    this.bitReader.clear()\r\n    this.bitReader.appendBuffer(buffer)\r\n\r\n    let lastDts = avpacket.dts || avpacket.pts\r\n\r\n    while (this.bitReader.remainingLength() > 3) {\r\n\r\n      const syncWord = this.bitReader.readU(11)\r\n\r\n      if (syncWord !== 0x2B7) {\r\n        logger.error(`AACLATMParser found syncWord not 0x2B7, got: 0x${syncWord.toString(16)}`)\r\n        this.bitReader.clear()\r\n        return errorType.DATA_INVALID\r\n      }\r\n      const audioMuxLengthBytes = this.bitReader.readU(13)\r\n\r\n      if (audioMuxLengthBytes > this.bitReader.remainingLength()) {\r\n        break\r\n      }\r\n\r\n      const useSameStreamMux = this.bitReader.readU1() === 0x01\r\n\r\n      if (!useSameStreamMux) {\r\n        const audioMuxVersion = this.bitReader.readU1() === 0x01\r\n        const audioMuxVersionA = audioMuxVersion && this.bitReader.readU1() === 0x01\r\n        if (audioMuxVersionA) {\r\n          logger.error('audioMuxVersionA is Not Supported')\r\n          this.bitReader.clear()\r\n          return errorType.DATA_INVALID\r\n        }\r\n        if (audioMuxVersion) {\r\n          this.getLATMValue()\r\n        }\r\n        const allStreamsSameTimeFraming = this.bitReader.readU1() === 0x01\r\n        if (!allStreamsSameTimeFraming) {\r\n          logger.error('allStreamsSameTimeFraming zero is Not Supported')\r\n          this.bitReader.clear()\r\n          return errorType.DATA_INVALID\r\n        }\r\n        const numSubFrames = this.bitReader.readU(6)\r\n        if (numSubFrames !== 0) {\r\n          logger.error('more than 2 numSubFrames Not Supported')\r\n          this.bitReader.clear()\r\n          return errorType.DATA_INVALID\r\n        }\r\n\r\n        const numProgram = this.bitReader.readU(4)\r\n        if (numProgram !== 0) {\r\n          logger.error('more than 2 numProgram Not Supported')\r\n          this.bitReader.clear()\r\n          return errorType.DATA_INVALID\r\n        }\r\n\r\n        const numLayer = this.bitReader.readU(3)\r\n        if (numLayer !== 0) {\r\n          logger.error('more than 2 numLayer Not Supported\\'')\r\n          this.bitReader.clear()\r\n          return errorType.DATA_INVALID\r\n        }\r\n\r\n        let fillBits = audioMuxVersion ? this.getLATMValue() : 0\r\n\r\n        const audioObjectType = this.bitReader.readU(5)\r\n        fillBits -= 5\r\n\r\n        const samplingFreqIndex = this.bitReader.readU(4)\r\n        fillBits -= 4\r\n\r\n        const channelConfig = this.bitReader.readU(4)\r\n        fillBits -= 4\r\n\r\n        this.bitReader.readU(3)\r\n        fillBits -= 3\r\n\r\n        if (fillBits > 0) {\r\n          this.bitReader.readU(fillBits)\r\n        }\r\n\r\n        const frameLengthType = this.bitReader.readU(3)\r\n        if (frameLengthType === 0) {\r\n          this.bitReader.readU(8)\r\n        }\r\n        else {\r\n          logger.error(`frameLengthType = ${frameLengthType}, only frameLengthType = 0 supported`)\r\n          this.bitReader.clear()\r\n          return errorType.DATA_INVALID\r\n        }\r\n\r\n        const otherDataPresent = this.bitReader.readU1() === 0x01\r\n        if (otherDataPresent) {\r\n          if (audioMuxVersion) {\r\n            this.getLATMValue()\r\n          }\r\n          else {\r\n            let otherDataLenBits = 0\r\n            while (true) {\r\n              otherDataLenBits = otherDataLenBits << 8\r\n              const otherDataLenEsc = this.bitReader.readU1() === 0x01\r\n              const otherDataLenTmp = this.bitReader.readU(8)\r\n              otherDataLenBits += otherDataLenTmp\r\n              if (!otherDataLenEsc) {\r\n                break\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        const crcCheckPresent = this.bitReader.readU1() === 0x01\r\n        if (crcCheckPresent) {\r\n          this.bitReader.readU(8)\r\n        }\r\n\r\n        this.streamMuxConfig.profile = audioObjectType + 1\r\n        this.streamMuxConfig.sampleRate = MPEG4SamplingFrequencies[samplingFreqIndex]\r\n        this.streamMuxConfig.channels = MPEG4Channels[channelConfig]\r\n      }\r\n\r\n      let length = 0\r\n      while (true) {\r\n        const tmp = this.bitReader.readU(8)\r\n        length += tmp\r\n        if (tmp !== 0xff) {\r\n          break\r\n        }\r\n      }\r\n      const rawData = new Uint8Array(length)\r\n      for (let i = 0; i < length; i++) {\r\n        rawData[i] = this.bitReader.readU(8)\r\n      }\r\n\r\n      const item = {\r\n        dts: lastDts,\r\n        buffer: rawData,\r\n        extradata: null\r\n      }\r\n\r\n      const hasNewExtraData = this.inCodecpar.profile !== this.streamMuxConfig.profile\r\n        || this.inCodecpar.sampleRate !== this.streamMuxConfig.sampleRate\r\n        || this.inCodecpar.chLayout.nbChannels !== this.streamMuxConfig.channels\r\n\r\n      if (hasNewExtraData) {\r\n\r\n        this.refSampleDuration = avRescaleQ(\r\n          static_cast<int64>(1024 / this.streamMuxConfig.sampleRate * AV_TIME_BASE),\r\n          AV_TIME_BASE_Q,\r\n          this.inTimeBase\r\n        )\r\n\r\n        this.inCodecpar.profile = this.streamMuxConfig.profile\r\n        this.inCodecpar.sampleRate = this.streamMuxConfig.sampleRate\r\n        this.inCodecpar.chLayout.nbChannels = this.streamMuxConfig.channels\r\n\r\n        const extradata = avCodecParameters2Extradata(accessof(this.inCodecpar))\r\n\r\n        if (this.inCodecpar.extradata) {\r\n          avFree(this.inCodecpar.extradata)\r\n        }\r\n        this.inCodecpar.extradata = avMalloc(extradata.length)\r\n        memcpyFromUint8Array(this.inCodecpar.extradata, extradata.length, extradata)\r\n        this.inCodecpar.extradataSize = extradata.length\r\n        item.extradata = extradata\r\n      }\r\n\r\n      this.caches.push(item)\r\n      lastDts += this.refSampleDuration\r\n\r\n      this.bitReader.skipPadding()\r\n    }\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      if (item.extradata) {\r\n        const extradata = avMalloc(item.extradata.length)\r\n        memcpyFromUint8Array(extradata, item.extradata.length, item.extradata)\r\n        addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradata, item.extradata.length)\r\n      }\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia Mpegts2RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport * as opus from '../../codecs/opus'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { addAVPacketData, getAVPacketData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\n\r\nexport default class Mpegts2RawFilter extends AVBSFilter {\r\n\r\n  private caches: {\r\n    duration: number\r\n    dts: bigint\r\n    buffer: Uint8Array\r\n  }[]\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n\r\n    return 0\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    let i = 0\r\n\r\n    let lastDts = avpacket.dts || avpacket.pts\r\n\r\n    const buffer = getAVPacketData(avpacket)\r\n\r\n    while (i < buffer.length) {\r\n\r\n      const syncWord = (buffer[i] << 3) | (buffer[i + 1] >> 5)\r\n\r\n      if (syncWord !== 0x3ff) {\r\n        logger.error(`MpegtsOpusParser found syncWord not 0x3ff, got: 0x${syncWord.toString(16)}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const opusPendingTrimStart = (buffer[i + 1] & 0x10) !== 0\r\n      const trimEnd = (buffer[i + 1] & 0x08) !== 0\r\n      let index = i + 2\r\n      let size = 0\r\n\r\n      while (buffer[index] === 0xFF) {\r\n        size += 255\r\n        index++\r\n      }\r\n      size += buffer[index]\r\n      index++\r\n\r\n      index += opusPendingTrimStart ? 2 : 0\r\n      index += trimEnd ? 2 : 0\r\n\r\n      let samples = buffer.subarray(index, index + size)\r\n\r\n      const sampleRate = this.inCodecpar.sampleRate > 0 ? this.inCodecpar.sampleRate : 48000\r\n\r\n      const duration = avRescaleQ(\r\n        static_cast<int64>(opus.getBufferSamples(samples) / sampleRate * AV_TIME_BASE),\r\n        AV_TIME_BASE_Q,\r\n        this.inTimeBase\r\n      )\r\n\r\n      this.caches.push({\r\n        dts: lastDts,\r\n        buffer: samples.slice(),\r\n        duration: Number(duration),\r\n      })\r\n      lastDts += duration\r\n      i = index + size\r\n    }\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      avpacket.duration = static_cast<int64>(item.duration)\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.DATA_INVALID\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'HE'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)] ?? 48000\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f] ?? 2\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((codecpar.profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia h264 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport * as logger from 'common/util/logger'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nexport const NALULengthSizeMinusOne = 3\r\n\r\nexport const enum BitFormat {\r\n  AVCC = 1,\r\n  ANNEXB\r\n}\r\n\r\nexport const enum PictureType {\r\n  I = 1,\r\n  P,\r\n  B,\r\n  SPS,\r\n  PPS,\r\n  SEI\r\n}\r\n\r\nexport const enum H264NaluType {\r\n  kUnspecified = 0,\r\n  kSliceNonIDR,\r\n  kSliceDPA,\r\n  kSliceDPB,\r\n  kSliceDPC,\r\n  kSliceIDR,\r\n  kSliceSEI,\r\n  kSliceSPS,\r\n  kSlicePPS,\r\n  kSliceAUD,\r\n  kEndOfSequence,\r\n  kEndOfStream,\r\n  kFiller,\r\n  kSPSExt,\r\n  kReserved0\r\n}\r\n\r\nexport const enum H264SliceType {\r\n  kSliceNone = -1,\r\n  kSliceP,\r\n  kSliceB,\r\n  kSliceI,\r\n  kSliceSP = 5,\r\n  kSliceSB,\r\n  kSliceSI\r\n}\r\n\r\nexport const enum H264Profile {\r\n  kBaseline = 66,\r\n  kMain = 77,\r\n  kHigh = 100,\r\n  kConstrained = kBaseline,\r\n  kHigh10 = 110,\r\n  kHigh422 = 122,\r\n  kHigh444 = 244\r\n}\r\n\r\nexport const H264Profile2Name: Record<H264Profile, string> = {\r\n  [H264Profile.kBaseline]: 'Constrained Baseline',\r\n  [H264Profile.kMain]: 'Main',\r\n  [H264Profile.kHigh]: 'High',\r\n  [H264Profile.kHigh10]: 'High10',\r\n  [H264Profile.kHigh422]: 'High422',\r\n  [H264Profile.kHigh444]: 'High444'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 25344, maxFrameRate: 15 },\r\n  { level: 11, maxResolution: 25344, maxFrameRate: 30 },\r\n  { level: 12, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 13, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 20, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 202752, maxFrameRate: 30 },\r\n  { level: 22, maxResolution: 414720, maxFrameRate: 30 },\r\n  { level: 30, maxResolution: 414720, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 921600, maxFrameRate: 30 },\r\n  { level: 32, maxResolution: 1310720, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2097152, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2097152, maxFrameRate: 60 },\r\n  { level: 42, maxResolution: 2228224, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 8912896, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 8912896, maxFrameRate: 60 },\r\n  { level: 52, maxResolution: 8912896, maxFrameRate: 120 },\r\n  { level: 60, maxResolution: 35651584, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 35651584, maxFrameRate: 60 },\r\n  { level: 62, maxResolution: 35651584, maxFrameRate: 120 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height;\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * avcc 格式的 extradata 转 annexb sps pps\r\n * \r\n * bits    \r\n * - 8   version ( always 0x01 )\r\n * - 8   avc profile ( sps[0][1] )\r\n * - 8   avc compatibility ( sps[0][2] )\r\n * - 8   avc level ( sps[0][3] )\r\n * - 6   reserved ( all bits on )\r\n * - 2   NALULengthSizeMinusOne\r\n * - 3   reserved ( all bits on )\r\n * - 5   number of SPS NALUs (usually 1)\r\n * - repeated once per SPS:\r\n *   - 16         SPS size\r\n *   - variable   SPS NALU data\r\n * - 8 number of PPS NALUs (usually 1)\r\n * - repeated once per PPS:\r\n *   - 16       PPS size\r\n *   - variable PPS NALU data\r\n * \r\n * - ext (profile !== 66 && profile !== 77 && profile !== 88)\r\n *  - 6 reserved ( all bits on )\r\n *  - 2 chroma_format_idc\r\n *  - 5 reserved ( all bits on )\r\n *  - 3 bit_depth_luma_minus8\r\n *  - 5 reserved ( all bits on )\r\n *  - 3 bit_depth_chroma_minus8\r\n *  - 8 number of SPS_EXT NALUs\r\n *    - 16 SPS_EXT size\r\n *    - variable   SPS_EXT NALU data\r\n * \r\n */\r\nexport function extradata2SpsPps(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata)\r\n  bufferReader.skip(5)\r\n\r\n  const spss = []\r\n  const ppss = []\r\n  const spsExts = []\r\n\r\n  const spsLength = bufferReader.readUint8() & 0x1f\r\n  for (let i = 0; i < spsLength; i++) {\r\n    const length = bufferReader.readUint16()\r\n    spss.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  const ppsLength = bufferReader.readUint8()\r\n  for (let i = 0; i < ppsLength; i++) {\r\n    const length = bufferReader.readUint16()\r\n    ppss.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  if (bufferReader.remainingSize() > 4) {\r\n    bufferReader.skip(3)\r\n    const spsExtLength = bufferReader.readUint8()\r\n    if (spsExtLength > 0) {\r\n      for (let i = 0; i < spsExtLength; i++) {\r\n        const length = bufferReader.readUint16()\r\n        spsExts.push(bufferReader.readBuffer(length))\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    spss,\r\n    ppss,\r\n    spsExts\r\n  }\r\n}\r\n\r\nexport function spsPps2Extradata(spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[], spsExts: Uint8ArrayInterface[] = []) {\r\n\r\n  if (spss.length > 32) {\r\n    logger.warn(`h264 metadata\\'s sps max length is 32, but get ${spss.length}`)\r\n    spss = spss.slice(0, 32)\r\n  }\r\n  if (spss.length > 256) {\r\n    logger.warn(`h264 metadata\\'s pps max length is 256, but get ${spss.length}`)\r\n    spss = spss.slice(0, 256)\r\n  }\r\n\r\n  let length = 7\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 2 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 2 + pps.length\r\n  }, length)\r\n\r\n  const sps = spss[0]\r\n\r\n  const params = parseSPS(sps)\r\n\r\n  if (params.profile !== 66 && params.profile !== 77 && params.profile !== 88) {\r\n    length += 4\r\n\r\n    if (spsExts.length) {\r\n      length = spsExts.reduce((prev, ext) => {\r\n        return prev + 2 + ext.length\r\n      }, length)\r\n    }\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(sps[1])\r\n  bufferWriter.writeUint8(sps[2])\r\n  bufferWriter.writeUint8(sps[3])\r\n  bufferWriter.writeUint8(0xfc | NALULengthSizeMinusOne)\r\n\r\n  // sps\r\n  bufferWriter.writeUint8(0xe0 | (spss.length & 0x1f))\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint16(sps.length)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  // pps\r\n  bufferWriter.writeUint8(ppss.length)\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint16(pps.length)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  if (params.profile !== 66 && params.profile !== 77 && params.profile !== 88) {\r\n    bufferWriter.writeUint8(0xfc | params.chromaFormatIdc)\r\n    bufferWriter.writeUint8(0xf8 | params.bitDepthLumaMinus8)\r\n    bufferWriter.writeUint8(0xf8 | params.bitDepthChromaMinus8)\r\n\r\n    if (spsExts.length) {\r\n      array.each(spsExts, (ext) => {\r\n        bufferWriter.writeUint16(ext.length)\r\n        bufferWriter.writeBuffer(ext)\r\n      })\r\n    }\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n    if (spss.length && ppss.length) {\r\n      return spsPps2Extradata(spss, ppss, spsExts)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n    }\r\n\r\n    nalus = nalus.filter((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      return type !== H264NaluType.kSliceAUD\r\n        && type !== H264NaluType.kSlicePPS\r\n        && type !== H264NaluType.kSliceSPS\r\n        && type !== H264NaluType.kSPSExt\r\n    })\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = nalu[0] & 0x1f\r\n    if (type === H264NaluType.kSliceIDR) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    key,\r\n    extradata\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? (extradata[4] & 0x03) : NALULengthSizeMinusOne\r\n  let spss = []\r\n  let ppss = []\r\n  let spsExts = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2SpsPps(extradata)\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    spsExts = result.spsExts\r\n\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n  const seis = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = nalu[0] & 0x1f\r\n\r\n    if (naluType === H264NaluType.kSliceSEI) {\r\n      seis.push(nalu)\r\n    }\r\n    else if (naluType !== H264NaluType.kSliceAUD) {\r\n      nalus.push(nalu)\r\n    }\r\n  }\r\n\r\n  let length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, 0)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = spsExts.reduce((prev, ext) => {\r\n    return prev + 4 + ext.length\r\n  }, length)\r\n  length = seis.reduce((prev, sei) => {\r\n    return prev + 4 + sei.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 6)\r\n  const bufferWriter = new BufferWriter(mapUint8Array(bufferPointer, length + 6))\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(0x09)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(seis, (sei) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sei)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n  array.each(spsExts, (ext) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(ext)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = nalu[0] & 0x1f\r\n    if (type === H264NaluType.kSliceIDR) {\r\n      key = true\r\n    }\r\n  })\r\n  return {\r\n    bufferPointer,\r\n    length: length + 6,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let spss = []\r\n  let ppss = []\r\n  let spsExts = []\r\n  let others = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = nalu[0] & 0x1f\r\n\r\n    if (naluType === H264NaluType.kSliceSPS) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === H264NaluType.kSlicePPS) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === H264NaluType.kSPSExt) {\r\n      spsExts.push(nalu)\r\n    }\r\n    else {\r\n      others.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length) {\r\n    const extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      const extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[4] & 0x03)\r\n\r\n    const { spss } = extradata2SpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      const { profile, level, width, height } = parseSPS(spss[0])\r\n\r\n      stream.codecpar.profile = profile\r\n      stream.codecpar.level = level\r\n      stream.codecpar.width = width\r\n      stream.codecpar.height = height\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      return type === H264NaluType.kSliceIDR\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = intread.r8(avpacket.data + (i + naluLengthSize)) & 0x1f\r\n      if (type === H264NaluType.kSliceIDR) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface H264SPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chromaFormatIdc: number\r\n  bitDepthLumaMinus8: number\r\n  bitDepthChromaMinus8: number\r\n  frameMbsOnlyFlag: number\r\n  picOrderCntType: number\r\n  log2MaxPicOrderCntLsbMinus4: number\r\n  deltaPicOrderAlwaysZeroFlag: number\r\n  log2MaxFrameNumMinus4: number\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): H264SPS {\r\n\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nal_ref_idc\r\n  bitReader.readU(2)\r\n  // nal_unit_type\r\n  bitReader.readU(5)\r\n\r\n  const profile = bitReader.readU(8)\r\n\r\n  // constraint_set0_flag\r\n  bitReader.readU1()\r\n  // constraint_set1_flag\r\n  bitReader.readU1()\r\n  // constraint_set2_flag\r\n  bitReader.readU1()\r\n  // constraint_set3_flag\r\n  bitReader.readU1()\r\n  // constraint_set4_flag\r\n  bitReader.readU1()\r\n  // constraint_set4_flag\r\n  bitReader.readU1()\r\n  // reserved_zero_2bits\r\n  bitReader.readU(2)\r\n\r\n  const level = bitReader.readU(8)\r\n\r\n  // seq_parameter_set_id\r\n  expgolomb.readUE(bitReader)\r\n\r\n  // 摄像机出图大部分格式是 4:2:0\r\n  let chromaFormatIdc = 1\r\n  let bitDepthLumaMinus8 = 0\r\n  let bitDepthChromaMinus8 = 0\r\n\r\n  if (profile == 100 || profile == 110 || profile == 122\r\n    || profile == 244 || profile == 44 || profile == 83\r\n    || profile == 86 || profile == 118 || profile == 128\r\n    || profile == 138 || profile == 139 || profile == 134 || profile == 135\r\n  ) {\r\n    chromaFormatIdc = expgolomb.readUE(bitReader)\r\n    if (chromaFormatIdc === 3) {\r\n      // separate_colour_plane_flag\r\n      bitReader.readU1()\r\n    }\r\n    // bit_depth_luma_minus8\r\n    bitDepthLumaMinus8 = expgolomb.readUE(bitReader)\r\n    // bit_depth_chroma_minus8\r\n    bitDepthChromaMinus8 = expgolomb.readUE(bitReader)\r\n    // qpprime_y_zero_transform_bypass_flag\r\n    bitReader.readU1()\r\n\r\n    let seqScalingMatrixPresentFlag = bitReader.readU1()\r\n    if (seqScalingMatrixPresentFlag) {\r\n      const seqScalingListPresentFlag = new Array(8)\r\n      for (let i = 0; i < ((chromaFormatIdc != 3) ? 8 : 12); i++) {\r\n        seqScalingListPresentFlag[i] = bitReader.readU1()\r\n      }\r\n    }\r\n  }\r\n\r\n  // log2_max_frame_num_minus4\r\n  const log2MaxFrameNumMinus4 = expgolomb.readUE(bitReader)\r\n\r\n  const picOrderCntType = expgolomb.readUE(bitReader)\r\n  let log2MaxPicOrderCntLsbMinus4 = 0\r\n  let deltaPicOrderAlwaysZeroFlag = 0\r\n\r\n  if (picOrderCntType === 0) {\r\n    // log2_max_pic_order_cnt_lsb_minus4\r\n    log2MaxPicOrderCntLsbMinus4 = expgolomb.readUE(bitReader)\r\n  }\r\n  else if (picOrderCntType === 1) {\r\n    // delta_pic_order_always_zero_flag\r\n    deltaPicOrderAlwaysZeroFlag = bitReader.readU1()\r\n\r\n    // offset_for_non_ref_pic\r\n    expgolomb.readSE(bitReader)\r\n    // offset_for_top_to_bottom_field\r\n    expgolomb.readSE(bitReader)\r\n\r\n    const numRefFramesInPicOrderCntCycle = expgolomb.readUE(bitReader)\r\n    for (let i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\r\n      expgolomb.readSE(bitReader)\r\n    }\r\n  }\r\n\r\n  // max_num_ref_frames\r\n  expgolomb.readUE(bitReader)\r\n  // gaps_in_frame_num_value_allowed_flag\r\n  bitReader.readU1()\r\n\r\n  const picWidthInMbsMinus1 = expgolomb.readUE(bitReader)\r\n  const picHeightInMapUnitsMinus1 = expgolomb.readUE(bitReader)\r\n  const frameMbsOnlyFlag = bitReader.readU1()\r\n\r\n  let width = (picWidthInMbsMinus1 + 1) * 16\r\n  let height = (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16\r\n\r\n  if (!frameMbsOnlyFlag) {\r\n    // mb_adaptive_frame_field_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  // direct_8x8_inference_flag\r\n  bitReader.readU1()\r\n\r\n  const frameCroppingFlag = bitReader.readU1()\r\n  if (frameCroppingFlag) {\r\n    const frameCropLeftOffset = expgolomb.readUE(bitReader)\r\n    const frameCropRightOffset = expgolomb.readUE(bitReader)\r\n    const frameCropTopOffset = expgolomb.readUE(bitReader)\r\n    const frameCropBottomOffset = expgolomb.readUE(bitReader)\r\n\r\n    let cropUnitX = 1\r\n    let cropUnitY = 2 - frameCroppingFlag\r\n\r\n    if (chromaFormatIdc === 1) {\r\n      cropUnitX = 2\r\n      cropUnitY = 2 * (2 - frameCroppingFlag)\r\n    }\r\n    else if (frameCroppingFlag === 2) {\r\n      cropUnitX = 2\r\n      cropUnitY = 2 - frameCroppingFlag\r\n    }\r\n\r\n    width -= cropUnitX * (frameCropLeftOffset + frameCropRightOffset)\r\n    height -= cropUnitY * (frameCropTopOffset + frameCropBottomOffset)\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chromaFormatIdc,\r\n    bitDepthLumaMinus8,\r\n    bitDepthChromaMinus8,\r\n    frameMbsOnlyFlag,\r\n    picOrderCntType,\r\n    log2MaxPicOrderCntLsbMinus4,\r\n    deltaPicOrderAlwaysZeroFlag,\r\n    log2MaxFrameNumMinus4\r\n  }\r\n}\r\n","/*\r\n * libmedia hevc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport { BitFormat } from './h264'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nexport const enum HEVCProfile {\r\n  Main = 1,\r\n  Main10,\r\n  MainStillPicture,\r\n  Main444\r\n}\r\n\r\nexport const HEVCProfile2Name: Record<HEVCProfile, string> = {\r\n  [HEVCProfile.Main]: 'Main',\r\n  [HEVCProfile.Main10]: 'Main10',\r\n  [HEVCProfile.MainStillPicture]: 'MainStillPicture',\r\n  [HEVCProfile.Main444]: 'Main444'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxLumaSamplesPerSecond: 552960, maxLumaPictureSize: 36864, maxBitRate: { main: 128, main10: 150 } },\r\n  { level: 20, maxLumaSamplesPerSecond: 3686400, maxLumaPictureSize: 122880, maxBitRate: { main: 1500, main10: 1875 } },\r\n  { level: 21, maxLumaSamplesPerSecond: 7372800, maxLumaPictureSize: 245760, maxBitRate: { main: 3000, main10: 3750 } },\r\n  { level: 30, maxLumaSamplesPerSecond: 16588800, maxLumaPictureSize: 552960, maxBitRate: { main: 6000, main10: 7500 } },\r\n  { level: 31, maxLumaSamplesPerSecond: 33177600, maxLumaPictureSize: 983040, maxBitRate: { main: 10000, main10: 12500 } },\r\n  { level: 40, maxLumaSamplesPerSecond: 66846720, maxLumaPictureSize: 2228224, maxBitRate: { main: 12000, main10: 15000 } },\r\n  { level: 41, maxLumaSamplesPerSecond: 133693440, maxLumaPictureSize: 2228224, maxBitRate: { main: 20000, main10: 25000 } },\r\n  { level: 50, maxLumaSamplesPerSecond: 267386880, maxLumaPictureSize: 8912896, maxBitRate: { main: 25000, main10: 40000 } },\r\n  { level: 51, maxLumaSamplesPerSecond: 534773760, maxLumaPictureSize: 8912896, maxBitRate: { main: 40000, main10: 60000 } },\r\n  { level: 52, maxLumaSamplesPerSecond: 1069547520, maxLumaPictureSize: 35651584, maxBitRate: { main: 60000, main10: 100000 } },\r\n  { level: 60, maxLumaSamplesPerSecond: 1069547520, maxLumaPictureSize: 35651584, maxBitRate: { main: 60000, main10: 100000 } },\r\n  { level: 61, maxLumaSamplesPerSecond: 2139095040, maxLumaPictureSize: 89128960, maxBitRate: { main: 120000, main10: 240000 } },\r\n  { level: 62, maxLumaSamplesPerSecond: 4278190080, maxLumaPictureSize: 356515840, maxBitRate: { main: 240000, main10: 480000 } }\r\n]\r\n\r\nexport function getLevelByResolution(profile: number, width: number, height: number, fps: number, bitrate: number) {\r\n\r\n  bitrate /= 1000\r\n\r\n  const selectedProfile = profile === HEVCProfile.Main ? 'main' : 'main10'\r\n  const lumaSamplesPerSecond = width * height * fps\r\n  for (const level of LevelCapabilities) {\r\n    if (lumaSamplesPerSecond <= level.maxLumaSamplesPerSecond && width * height <= level.maxLumaPictureSize && bitrate <= level.maxBitRate[selectedProfile]) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum HEVCNaluType {\r\n  kSliceTRAIL_N = 0,\r\n  kSliceTRAIL_R = 1,\r\n  kSliceTSA_N = 2,\r\n  kSliceTSA_R = 3,\r\n  kSliceSTSA_N = 4,\r\n  kSliceSTSA_R = 5,\r\n  kSliceRADL_N = 6,\r\n  kSliceRADL_R = 7,\r\n  kSliceRASL_N = 8,\r\n  kSliceRASL_R = 9,\r\n  kSliceBLA_W_LP = 16,\r\n  kSliceBLA_W_RADL = 17,\r\n  kSliceBLA_N_LP = 18,\r\n  kSliceIDR_W_RADL = 19,\r\n  kSliceIDR_N_LP = 20,\r\n  kSliceCRA_NUT = 21,\r\n  kSliceVPS = 32,\r\n  kSliceSPS = 33,\r\n  kSlicePPS = 34,\r\n  kSliceAUD = 35,\r\n  kSliceEOS_NUT = 36,\r\n  kSliceEOB_NUT = 37,\r\n  kSliceFD_NUT = 38,\r\n  kSliceSEI_PREFIX = 39,\r\n  kSliceSEI_SUFFIX = 40\r\n}\r\n\r\n\r\nexport const enum HEVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\n/**\r\n * \r\n * avcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 8   configurationVersion( 固定   1)\r\n * - 2   general_profile_space\r\n * - 1   general_tier_flag\r\n * - 5   general_profile_idc\r\n * - 32  general_profile_compatibility_flags\r\n * - 48  general_constraint_indicator_flags (6 个 字节）\r\n * - 8   general_level_idc\r\n * - 4   reserved1 (1111)\r\n * - 4   min_spatial_segmentation_idc_L\r\n * - 8   min_spatial_segmentation_idc_H\r\n * - 6   reserved2 (111111)\r\n * - 2   parallelismType\r\n * - 6   reserved3 (111111)\r\n * - 2   chromaFormat\r\n * - 5   reserved4 (11111)\r\n * - 3   bitDepthLumaMinus8\r\n * - 5   reserved5(11111)\r\n * - 3   bitDepthChromaMinus8\r\n * - 16  avgFrameRate\r\n * - 2   constantFrameRate\r\n * - 3   numTemporalLayers\r\n * - 1   temporalIdNested\r\n * - 2   lengthSizeMinusOne\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 1   reserved (0)\r\n * - 6   NAL_unit_type\r\n * - 16  numNalus\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata, true)\r\n  bufferReader.skip(22)\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x3f\r\n    const count = bufferReader.readUint16()\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === HEVCNaluType.kSliceVPS) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === HEVCNaluType.kSliceSPS) {\r\n      spss = list\r\n    }\r\n    else if (naluType === HEVCNaluType.kSlicePPS) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n\r\n  const sps = spss[0]\r\n\r\n  let length = 23\r\n\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n  const spsData = parseSPS(sps)\r\n\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(sps[1])\r\n  bufferWriter.writeUint8(sps[2])\r\n  bufferWriter.writeUint8(sps[3])\r\n  bufferWriter.writeUint8(sps[4])\r\n  bufferWriter.writeUint8(sps[5])\r\n\r\n  // general_constraint_indicator_flags\r\n  bufferWriter.writeUint8(sps[6])\r\n  bufferWriter.writeUint8(sps[7])\r\n  bufferWriter.writeUint8(sps[8])\r\n  bufferWriter.writeUint8(sps[9])\r\n  bufferWriter.writeUint8(sps[10])\r\n  bufferWriter.writeUint8(sps[11])\r\n\r\n  bufferWriter.writeUint8(spsData.level)\r\n\r\n  // min_spatial_segmentation_idc\r\n  bufferWriter.writeUint8((0xff << 2) | 0)\r\n  bufferWriter.writeUint8(0)\r\n\r\n  // parallelismType\r\n  bufferWriter.writeUint8((0xff << 6) | 0)\r\n\r\n  // chromaFormat\r\n  bufferWriter.writeUint8((0xff << 6) | spsData.chroma_format_idc)\r\n\r\n  // bitDepthLumaMinus8\r\n  bufferWriter.writeUint8((0xff << 5) | spsData.bit_depth_luma_minus8)\r\n\r\n  // bitDepthChromaMinus8\r\n  bufferWriter.writeUint8((0xff << 5) | spsData.bit_depth_chroma_minus8)\r\n\r\n  // avgFrameRate\r\n  bufferWriter.writeUint16(0)\r\n\r\n  // constantFrameRate numTemporalLayers temporalIdNested lengthSizeMinusOne\r\n  bufferWriter.writeUint8((0 << 6) | (1 << 3) | ((sps[0] & 0x01) << 2) | NALULengthSizeMinusOne)\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSliceVPS)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSliceSPS)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSlicePPS)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[0] >>> 1) & 0x3f\r\n        return type !== HEVCNaluType.kSliceVPS\r\n          && type !== HEVCNaluType.kSliceSPS\r\n          && type !== HEVCNaluType.kSlicePPS\r\n          && type !== HEVCNaluType.kSliceAUD\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = (nalu[0] >>> 1) & 0x3f\r\n    if (type === HEVCNaluType.kSliceIDR_W_RADL\r\n      || type === HEVCNaluType.kSliceIDR_N_LP\r\n      || type === HEVCNaluType.kSliceCRA_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? (extradata[21] & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    nalus.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  let length = vpss.reduce((prev, vps) => {\r\n    return prev + 4 + vps.length\r\n  }, 0)\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 7)\r\n  const buffer = mapUint8Array(bufferPointer, length + 7)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(HEVCNaluType.kSliceAUD << 1)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(vpss, (vps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(vps)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = (nalu[0] >>> 1) & 0x3f\r\n    if (type === HEVCNaluType.kSliceIDR_W_RADL\r\n      || type === HEVCNaluType.kSliceIDR_N_LP\r\n      || type === HEVCNaluType.kSliceCRA_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = (nalu[0] >>> 1) & 0x3f\r\n\r\n    if (naluType === HEVCNaluType.kSliceSPS) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === HEVCNaluType.kSlicePPS) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === HEVCNaluType.kSliceVPS) {\r\n      vpss.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length || vpss.length) {\r\n    const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (vpss.length && spss.length && ppss.length) {\r\n      const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[21] & 0x03)\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      const { profile, level, width, height } = parseSPS(spss[0])\r\n\r\n      stream.codecpar.profile = profile\r\n      stream.codecpar.level = level\r\n      stream.codecpar.width = width\r\n      stream.codecpar.height = height\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      return type === HEVCNaluType.kSliceIDR_N_LP || type === HEVCNaluType.kSliceIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize)) >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceIDR_N_LP || type === HEVCNaluType.kSliceIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface HevcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chroma_format_idc: number\r\n  bit_depth_luma_minus8: number\r\n  bit_depth_chroma_minus8: number\r\n  general_profile_space: number\r\n  general_tier_flag: number\r\n  general_profile_compatibility_flags: number\r\n  constraint_flags: number\r\n  separate_colour_plane_flag: number\r\n  log2_min_cb_size: number\r\n  log2_diff_max_min_coding_block_size: number\r\n  log2_min_tb_size: number\r\n  log2_diff_max_min_transform_block_size: number\r\n  log2_max_trafo_size: number\r\n  log2_ctb_size: number\r\n  log2_min_pu_size: number\r\n  ctb_width: number\r\n  ctb_height: number\r\n  ctb_size: number\r\n  min_cb_width: number\r\n  min_cb_height: number\r\n  min_tb_width: number\r\n  min_tb_height: number\r\n  min_pu_width: number\r\n  min_pu_height: number\r\n  log2_max_poc_lsb: number\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): HevcSPS {\r\n\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bit_depth_luma_minus8 = 0\r\n  let bit_depth_chroma_minus8 = 0\r\n  let chroma_format_idc = 1\r\n  let general_profile_space = 0\r\n  let general_tier_flag = 0\r\n  let general_profile_compatibility_flags = 0\r\n  let constraint_flags = 0\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n\r\n  // nalu type\r\n  bitReader.readU(6)\r\n\r\n  // layerId\r\n  bitReader.readU(6)\r\n\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_video_parameter_set_id\r\n  bitReader.readU(4)\r\n\r\n  // The value of sps_max_sub_layers_minus1 shall be in the range of 0 to 6, inclusive.\r\n  const spsMaxSubLayersMinus1 = bitReader.readU(3)\r\n\r\n  // sps_temporal_id_nesting_flag\r\n  bitReader.readU1()\r\n\r\n  let separate_colour_plane_flag = 0\r\n\r\n  if (spsMaxSubLayersMinus1 <= 6) {\r\n    // profile_tier_level(sps_max_sub_layers_minus1)\r\n\r\n    // general_profile_space\r\n    general_profile_space = bitReader.readU(2)\r\n    // general_tier_flag\r\n    general_tier_flag = bitReader.readU1()\r\n    // general_profile_idc\r\n    profile = bitReader.readU(5)\r\n    // general_profile_compatibility_flag[32]\r\n    general_profile_compatibility_flags = bitReader.readU(32)\r\n\r\n    /**\r\n     * 1 general_progressive_source_flag\r\n     * 1 general_interlaced_source_flag\r\n     * 1 general_non_packed_constraint_flag\r\n     * 1 general_frame_only_constraint_flag\r\n     * 44 general_reserved_zero_44bits\r\n     */\r\n    constraint_flags = bitReader.readU(48)\r\n\r\n    // general_level_idc\r\n    level = bitReader.readU(8)\r\n\r\n    const subLayerProfilePresentFlag = new Array(6)\r\n    const subLayerLevelPresentFlag = new Array(6)\r\n    for (let i = 0; i < spsMaxSubLayersMinus1; i++) {\r\n      subLayerProfilePresentFlag[i] = bitReader.readU1()\r\n      subLayerLevelPresentFlag[i] = bitReader.readU1()\r\n    }\r\n\r\n    if (spsMaxSubLayersMinus1 > 0) {\r\n      for (let i = spsMaxSubLayersMinus1; i < 8; i++) {\r\n        // reserved_zero_2bits\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < spsMaxSubLayersMinus1; i++) {\r\n      if (subLayerProfilePresentFlag[i]) {\r\n        // sub_layer_profile_space[i]\r\n        bitReader.readU(2)\r\n        // sub_layer_tier_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_profile_idc[i]\r\n        bitReader.readU(5)\r\n        // sub_layer_profile_compatibility_flag[i][32]\r\n        bitReader.readU(32)\r\n        // sub_layer_progressive_source_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_interlaced_source_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_non_packed_constraint_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_frame_only_constraint_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_reserved_zero_44bits[i]\r\n        bitReader.readU(44)\r\n      }\r\n\r\n      if (subLayerLevelPresentFlag[i]) {\r\n        // sub_layer_level_idc[i]\r\n        bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    // \"The  value  of sps_seq_parameter_set_id shall be in the range of 0 to 15, inclusive.\"\r\n    expgolomb.readUE(bitReader)\r\n    chroma_format_idc = expgolomb.readUE(bitReader)\r\n\r\n    if (chroma_format_idc === 3) {\r\n      // separate_colour_plane_flag\r\n      separate_colour_plane_flag = bitReader.readU(1)\r\n    }\r\n\r\n    width = expgolomb.readUE(bitReader)\r\n    height = expgolomb.readUE(bitReader)\r\n\r\n    const conformanceWindowFlag = bitReader.readU1()\r\n\r\n    let confWinLeftOffset = 0\r\n    let confWinRightOffset = 0\r\n    let confWinTopOffset = 0\r\n    let confWinBottomOffset = 0\r\n\r\n    if (conformanceWindowFlag) {\r\n      confWinLeftOffset = expgolomb.readUE(bitReader)\r\n      confWinRightOffset = expgolomb.readUE(bitReader)\r\n      confWinTopOffset = expgolomb.readUE(bitReader)\r\n      confWinBottomOffset = expgolomb.readUE(bitReader)\r\n    }\r\n\r\n    bit_depth_luma_minus8 = expgolomb.readUE(bitReader)\r\n    bit_depth_chroma_minus8 = expgolomb.readUE(bitReader)\r\n\r\n\r\n    let SubWidthC = 2\r\n    let SubHeightC = 2\r\n\r\n    if (chroma_format_idc === 0) {\r\n      SubWidthC = SubHeightC = 0\r\n    }\r\n    else if (chroma_format_idc === 2) {\r\n      SubWidthC = 2\r\n      SubHeightC = 1\r\n    }\r\n    else if (chroma_format_idc === 3) {\r\n      SubWidthC = SubHeightC = 1\r\n    }\r\n\r\n    const cropUnitX = SubWidthC * (1 << (bit_depth_luma_minus8 + 1))\r\n    const cropUnitY = SubHeightC * (1 << (bit_depth_luma_minus8 + 1))\r\n\r\n    width -= cropUnitX * (confWinLeftOffset + confWinRightOffset)\r\n    height -= cropUnitY * (confWinTopOffset + confWinBottomOffset)\r\n  }\r\n\r\n  const log2_max_poc_lsb = expgolomb.readUE(bitReader) + 4\r\n\r\n  const sublayer_ordering_info_flag = bitReader.readU1()\r\n  const start = sublayer_ordering_info_flag ? 0 : spsMaxSubLayersMinus1\r\n  for (let i = start; i < (spsMaxSubLayersMinus1 + 1); i++) {\r\n    // max_dec_pic_buffering\r\n    expgolomb.readUE(bitReader)\r\n    // num_reorder_pics\r\n    expgolomb.readUE(bitReader)\r\n    // max_latency_increase\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  const log2_min_cb_size = expgolomb.readUE(bitReader) + 3\r\n  const log2_diff_max_min_coding_block_size = expgolomb.readUE(bitReader)\r\n  const log2_min_tb_size = expgolomb.readUE(bitReader) + 2\r\n  const log2_diff_max_min_transform_block_size = expgolomb.readUE(bitReader)\r\n  const log2_max_trafo_size = log2_diff_max_min_transform_block_size + log2_min_tb_size\r\n\r\n  const log2_ctb_size = log2_min_cb_size + log2_diff_max_min_coding_block_size\r\n  const log2_min_pu_size = log2_min_cb_size - 1\r\n\r\n  const ctb_width  = (width  + (1 << log2_ctb_size) - 1) >> log2_ctb_size\r\n  const ctb_height = (height + (1 << log2_ctb_size) - 1) >> log2_ctb_size\r\n  const ctb_size   = ctb_width * ctb_height\r\n\r\n  const min_cb_width  = width  >> log2_min_cb_size\r\n  const min_cb_height = height >> log2_min_cb_size\r\n  const min_tb_width  = width  >> log2_min_tb_size\r\n  const min_tb_height = height >> log2_min_tb_size\r\n  const min_pu_width  = width  >> log2_min_pu_size\r\n  const min_pu_height = height >> log2_min_pu_size\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chroma_format_idc,\r\n    bit_depth_luma_minus8,\r\n    bit_depth_chroma_minus8,\r\n    general_profile_space,\r\n    general_tier_flag,\r\n    general_profile_compatibility_flags,\r\n    constraint_flags,\r\n    separate_colour_plane_flag,\r\n    log2_min_cb_size,\r\n    log2_diff_max_min_coding_block_size,\r\n    log2_min_tb_size,\r\n    log2_diff_max_min_transform_block_size,\r\n    log2_max_trafo_size,\r\n    log2_ctb_size,\r\n    log2_min_pu_size,\r\n    ctb_width,\r\n    ctb_height,\r\n    ctb_size,\r\n    min_cb_width,\r\n    min_cb_height,\r\n    min_tb_width,\r\n    min_tb_height,\r\n    min_pu_width,\r\n    min_pu_height,\r\n    log2_max_poc_lsb\r\n  }\r\n}\r\n\r\nexport interface HevcPPS {\r\n  pps_pic_parameter_set_id: number\r\n  pps_seq_parameter_set_id: number\r\n  dependent_slice_segment_flag: number\r\n  output_flag_present_flag: number\r\n  num_extra_slice_header_bits: number\r\n}\r\n\r\nexport function parsePPS(pps: Uint8ArrayInterface): HevcPPS {\r\n  if (!pps || pps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (pps[0] === 0x00\r\n    && pps[1] === 0x00\r\n    && pps[2] === 0x00\r\n    && pps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  const buffer = naluUnescape(pps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const pps_pic_parameter_set_id = expgolomb.readUE(bitReader)\r\n  const pps_seq_parameter_set_id = expgolomb.readUE(bitReader)\r\n  const dependent_slice_segment_flag = bitReader.readU1()\r\n  const output_flag_present_flag = bitReader.readU1()\r\n  const num_extra_slice_header_bits = bitReader.readU(3)\r\n\r\n  return {\r\n    pps_pic_parameter_set_id,\r\n    pps_seq_parameter_set_id,\r\n    dependent_slice_segment_flag,\r\n    output_flag_present_flag,\r\n    num_extra_slice_header_bits\r\n  }\r\n}\r\n","/*\r\n * libmedia mp3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVStream from '../AVStream'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\n\r\nconst MpegAudioV10SampleRateTable = [44100, 48000, 32000, 0]\r\n\r\nconst MpegAudioV20SampleRateTable = [22050, 24000, 16000, 0]\r\n\r\nconst MpegAudioV25SampleRateTable = [11025, 12000, 8000, 0]\r\n\r\nconst MpegAudioV10FrameSizeTable = [0, 1152, 1152, 384]\r\n\r\nconst MpegAudioV20FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV25FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV1L1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1]\r\n\r\nconst MpegAudioV1L2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1]\r\n\r\nconst MpegAudioV1L3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1]\r\n\r\nconst MpegAudioV2L1BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, -1]\r\n\r\nconst MpegAudioV2L2L3BitRateTable = [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1]\r\n\r\nexport function getSampleRateByVersionIndex(version: number, samplingFreqIndex: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25SampleRateTable[samplingFreqIndex]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20SampleRateTable[samplingFreqIndex]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10SampleRateTable[samplingFreqIndex]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getFrameSizeByVersionLayer(version: number, layer: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25FrameSizeTable[layer]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20FrameSizeTable[layer]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10FrameSizeTable[layer]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getBitRateByVersionLayerIndex(version: number, layer: number, index: number) {\r\n\r\n  switch (layer) {\r\n    // layer3\r\n    case 1:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L3BitRateTable[index]\r\n      }\r\n      break\r\n    // layer2\r\n    case 2:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L2BitRateTable[index]\r\n      }\r\n    // layer1\r\n    case 3:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L1BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L1BitRateTable[index]\r\n      }\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getProfileByLayer(layer: number) {\r\n  switch (layer) {\r\n    case 1:\r\n      // Layer 3\r\n      return 34\r\n    case 2:\r\n      // Layer 2\r\n      return 33\r\n    case 3:\r\n      // Layer 1\r\n      return 32\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport const enum MP3Profile {\r\n  Layer1 = 32,\r\n  Layer2 = 33,\r\n  Layer3 = 34\r\n}\r\n\r\nexport const MP3Profile2Name: Record<MP3Profile, string> = {\r\n  [MP3Profile.Layer1]: 'Layer1',\r\n  [MP3Profile.Layer2]: 'Layer2',\r\n  [MP3Profile.Layer3]: 'Layer3'\r\n}\r\n\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, buffer: Uint8ArrayInterface) {\r\n  if (buffer && buffer.length >= 4) {\r\n    const ver = (buffer[1] >>> 3) & 0x03\r\n    const layer = (buffer[1] & 0x06) >> 1\r\n    // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n    const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n    const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n    const channelCount = channelMode !== 3 ? 2 : 1\r\n    const profile = getProfileByLayer(layer)\r\n    const sampleRate = getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channelCount\r\n  }\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia vvc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { Data } from 'common/types/type'\r\nimport { BitFormat } from './h264'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum VVCNaluType {\r\n  kTRAIL_NUT      = 0,\r\n  kSTSA_NUT       = 1,\r\n  kRADL_NUT       = 2,\r\n  kRASL_NUT       = 3,\r\n  kRSV_VCL_4      = 4,\r\n  kRSV_VCL_5      = 5,\r\n  kRSV_VCL_6      = 6,\r\n  kIDR_W_RADL     = 7,\r\n  kIDR_N_LP       = 8,\r\n  kCRA_NUT        = 9,\r\n  kGDR_NUT        = 10,\r\n  kRSV_IRAP_11    = 11,\r\n  kOPI_NUT        = 12,\r\n  kDCI_NUT        = 13,\r\n  kVPS_NUT        = 14,\r\n  kSPS_NUT        = 15,\r\n  kPPS_NUT        = 16,\r\n  kPREFIX_APS_NUT = 17,\r\n  kSUFFIX_APS_NUT = 18,\r\n  kPH_NUT         = 19,\r\n  kAUD_NUT        = 20,\r\n  kEOS_NUT        = 21,\r\n  kEOB_NUT        = 22,\r\n  kPREFIX_SEI_NUT = 23,\r\n  kSUFFIX_SEI_NUT = 24,\r\n  kFD_NUT         = 25,\r\n  kRSV_NVCL_26    = 26,\r\n  kRSV_NVCL_27    = 27,\r\n  kUNSPEC_28      = 28,\r\n  kUNSPEC_29      = 29,\r\n  kUNSPEC_30      = 30,\r\n  kUNSPEC_31      = 31,\r\n}\r\n\r\nexport const enum VVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\nexport const enum VVCAPSType {\r\n  kALF     = 0,\r\n  kLMCS    = 1,\r\n  kSCALING = 2\r\n}\r\n\r\nfunction parsePTL(bitReader: BitReader) {\r\n  const olsIdx = bitReader.readU(9)\r\n  const numSublayers = bitReader.readU(3)\r\n  const constantFrameRate = bitReader.readU(2)\r\n  const chromaFormatIdc = bitReader.readU(2)\r\n  const bitDepthMinus8 = bitReader.readU(3)\r\n  bitReader.readU(5)\r\n\r\n  // VvcPTLRecord\r\n  bitReader.readU(2)\r\n  const num_bytes_constraint_info = bitReader.readU(6)\r\n  const generalProfileIdc = bitReader.readU(7)\r\n  const generalTierFlag = bitReader.readU(1)\r\n  const generalLevelIdc = bitReader.readU(8)\r\n  const ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n  const ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n  const generalConstraintInfo = []\r\n  const sublayerLevelIdc = []\r\n\r\n  if (num_bytes_constraint_info) {\r\n    for (let i = 0; i < num_bytes_constraint_info - 1; i++) {\r\n      generalConstraintInfo[i] = bitReader.readU(8)\r\n    }\r\n    generalConstraintInfo[num_bytes_constraint_info - 1] = bitReader.readU(6)\r\n  }\r\n  else {\r\n    bitReader.readU(6)\r\n  }\r\n  if (numSublayers > 1) {\r\n    let ptl_sublayer_present_mask = 0\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      const val = bitReader.readU(1)\r\n      ptl_sublayer_present_mask |= val << j\r\n    }\r\n    for (let j = numSublayers; j <= 8 && numSublayers > 1; ++j) {\r\n      bitReader.readU(1)\r\n    }\r\n    \r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      if (ptl_sublayer_present_mask & (1 << j)) {\r\n        sublayerLevelIdc[j] = bitReader.readU(8)\r\n      }\r\n    }\r\n  }\r\n  const ptl_num_sub_profiles = bitReader.readU(8)\r\n  const generalSubProfileIdc = []\r\n  if (ptl_num_sub_profiles) {\r\n    for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n      generalSubProfileIdc.push(bitReader.readU(8))\r\n    }\r\n  }\r\n\r\n  const maxPictureWidth = bitReader.readU(16)\r\n  const maxPictureHeight = bitReader.readU(16)\r\n  const avgFramerate = bitReader.readU(16)\r\n\r\n  return {\r\n    olsIdx,\r\n    numSublayers,\r\n    bitDepthMinus8,\r\n    chromaFormatIdc,\r\n    constantFrameRate,\r\n    generalProfileIdc,\r\n    generalTierFlag,\r\n    generalLevelIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    generalConstraintInfo,\r\n    sublayerLevelIdc,\r\n    generalSubProfileIdc,\r\n    maxPictureWidth,\r\n    maxPictureHeight,\r\n    avgFramerate\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * vvcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 5   reserved (11111)\r\n * - 2   lengthSizeMinusOne\r\n * - 1   ptl_present_flag\r\n * if ptl_present_flag\r\n *   - 9   ols_idx\r\n *   - 3  num_sublayers\r\n *   - 2  constant_frame_rate\r\n *   - 2  chroma_format_idc\r\n *   - 3  bit_depth_minus8\r\n *   - 5  reserved (11111)\r\n *   VvcPTLRecord\r\n *   - 2 reserved (11)\r\n *   - 6 num_bytes_constraint_info\r\n *   - 7 general_profile_idc\r\n *   - 1 general_tier_flag\r\n *   - 8 general_level_idc\r\n *   - 1 general_level_idc\r\n *   - 1 ptl_multilayer_enabled_flag\r\n *   if num_bytes_constraint_info > 0\r\n *      for (i = 0; i < num_bytes_constraint_info - 1; i++)\r\n *        - 8 general_constraint_info[i]\r\n *      - 6 general_constraint_info[num_bytes_constraint_info - 1]\r\n *   else\r\n *      - 6 reserved\r\n *   if num_sublayers > 1\r\n *      - num_sublayers - 2 ptl_sublayer_level_present_flag\r\n *      - 8 - num_sublayers + 1 ptl_reserved_zero_bit\r\n *      for (i = num_sublayers -2; i >= 0; i--)\r\n *        if ptl_sublayer_present_mask & (1 << i)\r\n *          - 8 sublayer_level_idc[i]\r\n *    - 8 ptl_num_sub_profiles\r\n *    if ptl_num_sub_profiles\r\n *      for (i = 0; i < ptl_num_sub_profiles; i++)\r\n *        - 32 general_sub_profile_idc[i]\r\n *    - 16 max_picture_width\r\n *    - 16 max_picture_height\r\n *    - 16 avg_frame_rate\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 2   reserved (0)\r\n * - 5   NAL_unit_type\r\n * if nalu_type != VVC_NALU_DEC_PARAM && nalu_type != VVC_NALU_OPI\r\n *    - 16  numNalus\r\n * else\r\n *   numNalus = 1\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n\r\n  const bufferReader = new BufferReader(extradata, true)\r\n\r\n  const ptlPresentFlag = bufferReader.readUint8() & 0x01\r\n\r\n  if (ptlPresentFlag) {\r\n    const bitReader = new BitReader()\r\n    bitReader.appendBuffer(extradata.subarray(1))\r\n    parsePTL(bitReader)\r\n    bufferReader.skip(bitReader.getPos())\r\n  }\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x1f\r\n    let count = 1\r\n\r\n    if (naluType !== VVCNaluType.kDCI_NUT && naluType !== VVCNaluType.kOPI_NUT) {\r\n      count = bufferReader.readUint16()\r\n    }\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n  \r\n  const sps = spss[0]\r\n  let ptl: Uint8Array\r\n  if (sps) {\r\n    const spsParams = parseSPS(sps)\r\n    let generalConstraintInfo = spsParams.generalConstraintInfo\r\n    if (!generalConstraintInfo.length) {\r\n      generalConstraintInfo = new Array(12).fill(0)\r\n    }\r\n    const biWriter = new BitWriter()\r\n    biWriter.writeU(9, 0)\r\n    biWriter.writeU(3, spsParams.spsMaxSublayersMinus1 + 1)\r\n    biWriter.writeU(2, 1)\r\n    biWriter.writeU(2, spsParams.chromaFormatIdc)\r\n    biWriter.writeU(3, spsParams.bitDepthMinus8)\r\n    biWriter.writeU(5, 0b11111)\r\n    biWriter.writeU(2, 0)\r\n    biWriter.writeU(6, generalConstraintInfo.length)\r\n    biWriter.writeU(7, spsParams.profile)\r\n    biWriter.writeU1(spsParams.tierFlag)\r\n    biWriter.writeU(8, spsParams.level)\r\n    biWriter.writeU1(spsParams.ptlFrameOnlyConstraintFlag)\r\n    biWriter.writeU1(spsParams.ptlMultilayerEnabledFlag)\r\n\r\n    if (generalConstraintInfo.length) {\r\n      for (let i = 0; i < generalConstraintInfo.length - 1; i++) {\r\n        biWriter.writeU(8, generalConstraintInfo[i])\r\n      }\r\n      biWriter.writeU(6, generalConstraintInfo[generalConstraintInfo.length - 1])\r\n    }\r\n    else {\r\n      biWriter.writeU(6, 0b111111)\r\n    }\r\n\r\n    if (spsParams.spsMaxSublayersMinus1 + 1 > 1) {\r\n      let ptl_sublayer_level_present_flags = 0\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        ptl_sublayer_level_present_flags = (ptl_sublayer_level_present_flags << 1 | spsParams.ptlSublayerLevelPresentFlag[i])\r\n      }\r\n      biWriter.writeU(spsParams.spsMaxSublayersMinus1, ptl_sublayer_level_present_flags)\r\n\r\n      for (let j = spsParams.spsMaxSublayersMinus1 + 1; j <= 8 && spsParams.spsMaxSublayersMinus1 > 0; ++j) {\r\n        biWriter.writeU1(0)\r\n      }\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        if (spsParams.ptlSublayerLevelPresentFlag[i]) {\r\n          biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n        }\r\n      }\r\n    }\r\n    biWriter.writeU(8, spsParams.generalSubProfileIdc.length)\r\n    for (let i = 0; i < spsParams.generalSubProfileIdc.length; i++) {\r\n      biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n    }\r\n    biWriter.writeU(16, spsParams.width)\r\n    biWriter.writeU(16, spsParams.height)\r\n    biWriter.writeU(16, 0)\r\n    biWriter.padding()\r\n    ptl = biWriter.getBuffer().subarray(0, biWriter.getPointer())\r\n  }\r\n\r\n  let length = 2 + (ptl ? ptl.length : 0)\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n\r\n  bufferWriter.writeUint8(NALULengthSizeMinusOne << 1 | (ptl ? 1 : 0) | 0xf8)\r\n\r\n  if (ptl) {\r\n    bufferWriter.writeBuffer(ptl)\r\n  }\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kVPS_NUT)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kSPS_NUT)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kPPS_NUT)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return type !== VVCNaluType.kVPS_NUT\r\n          && type !== VVCNaluType.kSPS_NUT\r\n          && type !== VVCNaluType.kPPS_NUT\r\n          && type !== VVCNaluType.kAUD_NUT\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    if (type === VVCNaluType.kIDR_N_LP\r\n      || type === VVCNaluType.kIDR_W_RADL\r\n      || type === VVCNaluType.kCRA_NUT\r\n      || type === VVCNaluType.kGDR_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? ((extradata[0] >>> 1) & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    nalus.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  let length = vpss.reduce((prev, vps) => {\r\n    return prev + 4 + vps.length\r\n  }, 0)\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 7)\r\n  const buffer = mapUint8Array(bufferPointer, length + 7)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(VVCNaluType.kAUD_NUT << 3)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(vpss, (vps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(vps)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    if (type === VVCNaluType.kIDR_N_LP\r\n      || type === VVCNaluType.kIDR_W_RADL\r\n      || type === VVCNaluType.kCRA_NUT\r\n      || type === VVCNaluType.kGDR_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = (nalu[1] >>> 3) & 0x1f\r\n\r\n    if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length || vpss.length) {\r\n    const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (vpss.length && spss.length && ppss.length) {\r\n      const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParametersBySps(stream: AVStream, sps: Uint8Array) {\r\n  const { profile, level, width, height } = parseSPS(sps)\r\n  stream.codecpar.profile = profile\r\n  stream.codecpar.level = level\r\n  stream.codecpar.width = width\r\n  stream.codecpar.height = height\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[0] >>> 1) & 0x03\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      parseAVCodecParametersBySps(stream, spss[0])\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      return type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize + 1)) >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface VvcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chromaFormatIdc: number\r\n  bitDepthMinus8: number\r\n  generalProfileSpace: number\r\n  tierFlag: number\r\n  generalConstraintInfo: number[]\r\n  generalSubProfileIdc: number[]\r\n  ptlFrameOnlyConstraintFlag: number\r\n  ptlMultilayerEnabledFlag: number\r\n  spsMaxSublayersMinus1: number\r\n  ptlSublayerLevelPresentFlag: number[]\r\n  sublayerLevelIdc: number[]\r\n  sps_log2_max_pic_order_cnt_lsb_minus4: number\r\n  sps_poc_msb_cycle_flag: number\r\n  sps_poc_msb_cycle_len_minus1: number\r\n  sps_num_extra_ph_bytes: number\r\n    sps_extra_ph_bit_present_flag: number[]\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): VvcSPS {\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bitDepthMinus8 = 0\r\n  let chromaFormatIdc = 1\r\n  let generalProfileSpace = 0\r\n  let tierFlag = 0\r\n  let ptlFrameOnlyConstraintFlag = 0\r\n  let ptlMultilayerEnabledFlag = 0\r\n\r\n  const generalConstraintInfo = []\r\n  const ptlSublayerLevelPresentFlag = []\r\n  const sublayerLevelIdc = []\r\n  const generalSubProfileIdc = []\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nuh_reserved_zero_bit\r\n  bitReader.readU1()\r\n  // layerId\r\n  bitReader.readU(6)\r\n  // nalu type\r\n  bitReader.readU(5)\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_seq_parameter_set_id && sps_video_parameter_set_id\r\n  bitReader.readU(8)\r\n\r\n  const spsMaxSublayersMinus1 = bitReader.readU(3)\r\n  chromaFormatIdc = bitReader.readU(2)\r\n  const sps_log2_ctu_size_minus5 = bitReader.readU(2)\r\n  const sps_ptl_dpb_hrd_params_present_flag = bitReader.readU(1)\r\n  if (sps_ptl_dpb_hrd_params_present_flag) {\r\n    profile = bitReader.readU(7)\r\n    tierFlag = bitReader.readU(1)\r\n    level = bitReader.readU(8)\r\n    ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n    ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n    const gci_present_flag = bitReader.readU(1)\r\n    if (gci_present_flag) {\r\n      for (let j = 0; j < 8; j++) {\r\n        generalConstraintInfo[j] = bitReader.readU(8)\r\n      }\r\n      generalConstraintInfo[8] = bitReader.readU(7)\r\n      const gci_num_reserved_bits = bitReader.readU(8)\r\n      bitReader.readU(gci_num_reserved_bits)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      ptlSublayerLevelPresentFlag[i] = bitReader.readU(1)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      if (ptlSublayerLevelPresentFlag[i]) {\r\n        sublayerLevelIdc[i] = bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    const ptl_num_sub_profiles = bitReader.readU(8)\r\n    if (ptl_num_sub_profiles) {\r\n      for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n        generalSubProfileIdc[i] = bitReader.readU(32)\r\n      }\r\n    } \r\n  }\r\n\r\n  // sps_gdr_enabled_flag\r\n  bitReader.readU1()\r\n  const sps_ref_pic_resampling_enabled_flag = bitReader.readU1()\r\n  if (sps_ref_pic_resampling_enabled_flag) {\r\n    // sps_res_change_in_clvs_allowed_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  const sps_pic_width_max_in_luma_samples = width = expgolomb.readUE(bitReader)\r\n  const sps_pic_height_max_in_luma_samples = height = expgolomb.readUE(bitReader)\r\n\r\n  if (bitReader.readU1()) {\r\n    // sps_conf_win_left_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_right_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_top_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_bottom_offset\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  if (bitReader.readU1()) {\r\n    const sps_num_subpics_minus1 = expgolomb.readUE(bitReader)\r\n    const ctb_log2_size_y = sps_log2_ctu_size_minus5 + 5\r\n    const ctb_size_y      = 1 << ctb_log2_size_y\r\n    const tmp_width_val   = sps_pic_width_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const tmp_height_val  = sps_pic_height_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const wlen            = Math.ceil(Math.log2(tmp_width_val))\r\n    const hlen            = Math.ceil(Math.log2(tmp_height_val))\r\n\r\n    let sps_subpic_id_len = 0\r\n    let sps_subpic_same_size_flag = 0\r\n    let sps_independent_subpics_flag = 0\r\n     // sps_num_subpics_minus1\r\n    if (sps_num_subpics_minus1 > 0) {\r\n      sps_independent_subpics_flag = bitReader.readU1()\r\n      sps_subpic_same_size_flag = bitReader.readU1()\r\n    }\r\n    for (let i = 0; sps_num_subpics_minus1 > 0 && i <= sps_num_subpics_minus1; i++) {\r\n      if (!sps_subpic_same_size_flag || i == 0) {\r\n        if (i > 0 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i > 0 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n      }\r\n      if (!sps_independent_subpics_flag) {\r\n        // sps_subpic_treated_as_pic_flag && sps_loop_filter_across_subpic_enabled_flag\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n    sps_subpic_id_len = expgolomb.readUE(bitReader) + 1\r\n    // sps_subpic_id_mapping_explicitly_signalled_flag\r\n    if (bitReader.readU(1)) {\r\n       // sps_subpic_id_mapping_present_flag\r\n      if (bitReader.readU(1)) {\r\n        for (let i = 0; i <= sps_num_subpics_minus1; i++) {\r\n          // sps_subpic_id[i]\r\n          bitReader.readU(sps_subpic_id_len)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  bitDepthMinus8 = expgolomb.readUE(bitReader)\r\n\r\n  // sps_entropy_coding_sync_enabled_flag\r\n  bitReader.readU(1)\r\n  // sps_entry_point_offsets_present_flag\r\n  bitReader.readU(1)\r\n\r\n  const sps_log2_max_pic_order_cnt_lsb_minus4 = bitReader.readU(4)\r\n  const sps_poc_msb_cycle_flag = bitReader.readU(1)\r\n  let sps_poc_msb_cycle_len_minus1 = 0\r\n  if (sps_poc_msb_cycle_flag) {\r\n    sps_poc_msb_cycle_len_minus1 = expgolomb.readUE(bitReader)\r\n  }\r\n  const sps_extra_ph_bit_present_flag: number[] = []\r\n  const sps_num_extra_ph_bytes = bitReader.readU(2)\r\n  for (let i = 0; i < (sps_num_extra_ph_bytes * 8); i++) {\r\n    sps_extra_ph_bit_present_flag[i] = bitReader.readU(1)\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chromaFormatIdc,\r\n    bitDepthMinus8,\r\n    generalProfileSpace,\r\n    tierFlag,\r\n    generalConstraintInfo,\r\n    generalSubProfileIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    spsMaxSublayersMinus1,\r\n    ptlSublayerLevelPresentFlag,\r\n    sublayerLevelIdc,\r\n    sps_log2_max_pic_order_cnt_lsb_minus4,\r\n    sps_poc_msb_cycle_flag,\r\n    sps_poc_msb_cycle_len_minus1,\r\n    sps_num_extra_ph_bytes,\r\n    sps_extra_ph_bit_present_flag\r\n  }\r\n}\r\n\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n\r\n  if (extradata[0] === 0 && extradata[1] === 0 && extradata[2] === 0 && extradata[3] === 1) {\r\n    extradata = annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n\r\n  const bitReader = new BitReader()\r\n  bitReader.appendBuffer(extradata)\r\n  const ptlPresentFlag = bitReader.readU(8) & 0x01\r\n  if (ptlPresentFlag) {\r\n    return parsePTL(bitReader)\r\n  }\r\n  return {} as Data\r\n}","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from '../avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n  \r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public destroy(formatContext: AVIFormatContext): void {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia mpegts decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport * as logger from 'common/util/logger'\r\n\r\nimport { IOError } from 'common/io/error'\r\nimport { MpegtsContext, MpegtsStreamContext } from './mpegts/type'\r\nimport createMpegtsContext from './mpegts/function/createMpegtsContext'\r\nimport * as impegts from './mpegts/impegts'\r\nimport * as mpegts from './mpegts/mpegts'\r\nimport handleSectionSlice from './mpegts/function/handleSectionSlice'\r\nimport * as errorType from 'avutil/error'\r\nimport parsePES from './mpegts/function/parsePES'\r\nimport parsePESSlice from './mpegts/function/parsePESSlice'\r\nimport clearTSSliceQueue from './mpegts/function/clearTSSliceQueue'\r\nimport { TSSliceQueue } from './mpegts/struct'\r\nimport IFormat from './IFormat'\r\nimport initStream from './mpegts/function/initStream'\r\nimport { AVFormat, AVSeekFlags } from '../avformat'\r\nimport { createAVPacket, deleteAVPacketSideData,\r\n  destroyAVPacket, getAVPacketData, getAVPacketSideData\r\n} from 'avutil/util/avpacket'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport AVStream from '../AVStream'\r\nimport seekInBytes from '../function/seekInBytes'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport * as array from 'common/util/array'\r\nimport * as mp3 from '../codecs/mp3'\r\nimport * as h264 from '../codecs/h264'\r\nimport * as hevc from '../codecs/hevc'\r\nimport * as vvc from '../codecs/vvc'\r\nimport * as aac from '../codecs/aac'\r\nimport * as opus from '../codecs/opus'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { memcpy, mapSafeUint8Array } from 'cheap/std/memory'\r\n\r\nexport default class IMpegtsFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.MPEGTS\r\n\r\n  private context: MpegtsContext\r\n\r\n  private firstTSPacketPos: int64\r\n\r\n  private cacheAVPacket: pointer<AVPacket>\r\n\r\n  constructor() {\r\n    super()\r\n    this.context = createMpegtsContext()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n    this.cacheAVPacket = nullptr\r\n  }\r\n\r\n  public destroy(formatContext: AVIFormatContext): void {\r\n    super.destroy(formatContext)\r\n    if (this.cacheAVPacket) {\r\n      destroyAVPacket(this.cacheAVPacket)\r\n      this.cacheAVPacket = nullptr\r\n    }\r\n    array.each(formatContext.streams, (stream) => {\r\n      const streamContext = stream.privData as MpegtsStreamContext\r\n      if (streamContext.filter) {\r\n        streamContext.filter.destroy()\r\n        streamContext.filter = null\r\n      }\r\n    })\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    try {\r\n\r\n      let ret = 0\r\n\r\n      let packetSize = await impegts.getPacketSize(formatContext.ioReader)\r\n\r\n      if (!packetSize) {\r\n        packetSize = mpegts.TS_PACKET_SIZE\r\n      }\r\n\r\n      this.context.tsPacketSize = packetSize\r\n\r\n      while ((!this.context.hasPAT || !this.context.hasPMT)) {\r\n        const tsPacket = await impegts.parserTSPacket(formatContext.ioReader, this.context)\r\n\r\n        if (!tsPacket.payload) {\r\n          continue\r\n        }\r\n\r\n        if (tsPacket.pid === 0\r\n          || tsPacket.pid === this.context.currentPmtPid\r\n          || this.context.pmt.pid2StreamType.get(tsPacket.pid) === mpegts.TSStreamType.kSCTE35\r\n        ) {\r\n          handleSectionSlice(tsPacket, this.context)\r\n        }\r\n      }\r\n\r\n      if (!this.context.hasPAT || !this.context.hasPMT) {\r\n        return errorType.DATA_INVALID\r\n      }\r\n      else {\r\n        this.firstTSPacketPos = formatContext.ioReader.getPos()\r\n      }\r\n\r\n      return ret\r\n    }\r\n    catch (error) {\r\n      logger.error(error.message)\r\n      return formatContext.ioReader.error\r\n    }\r\n\r\n  }\r\n\r\n  private checkExtradata(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n    if (!stream.codecpar.extradata) {\r\n      let element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n      if (!element) {\r\n        return\r\n      }\r\n      stream.codecpar.extradata = avMalloc(element.size)\r\n      memcpy(stream.codecpar.extradata, element.data, element.size)\r\n      stream.codecpar.extradataSize = element.size\r\n      deleteAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        h264.parseAVCodecParameters(stream, mapSafeUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n        hevc.parseAVCodecParameters(stream, mapSafeUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n        vvc.parseAVCodecParameters(stream, mapSafeUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n        aac.parseAVCodecParameters(stream, mapSafeUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n        opus.parseAVCodecParameters(stream, mapSafeUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n      }\r\n    }\r\n  }\r\n\r\n  private parsePESSlice(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>, queue: TSSliceQueue, stream: AVStream) {\r\n    const pes = parsePESSlice(queue)\r\n    parsePES(pes, avpacket, stream)\r\n    clearTSSliceQueue(queue)\r\n\r\n    const streamContext = stream.privData as MpegtsStreamContext\r\n    if (streamContext.filter) {\r\n      let ret = 0\r\n      ret = streamContext.filter.sendAVPacket(avpacket)\r\n\r\n      if (ret < 0) {\r\n        logger.error('send avpacket to bsf failed')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      ret = streamContext.filter.receiveAVPacket(avpacket)\r\n\r\n      if (ret < 0) {\r\n        logger.error('receive avpacket from bsf failed')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      avpacket.timeBase.den = 90000\r\n      avpacket.timeBase.num = 1\r\n      avpacket.streamIndex = stream.index\r\n\r\n      this.checkExtradata(avpacket, stream)\r\n\r\n      while (true) {\r\n        const avpacket = this.cacheAVPacket || createAVPacket()\r\n        ret = streamContext.filter.receiveAVPacket(avpacket)\r\n        if (ret === 0) {\r\n          avpacket.timeBase.den = 90000\r\n          avpacket.timeBase.num = 1\r\n          avpacket.streamIndex = stream.index\r\n          this.checkExtradata(avpacket, stream)\r\n          formatContext.interval.packetBuffer.push(avpacket)\r\n          this.cacheAVPacket = nullptr\r\n        }\r\n        else {\r\n          this.cacheAVPacket = avpacket\r\n          break\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      const streamType = this.context.pmt.pid2StreamType.get(streamContext.pid)\r\n      if (streamType === mpegts.TSStreamType.AUDIO_MPEG1\r\n        || streamType === mpegts.TSStreamType.AUDIO_MPEG2\r\n      ) {\r\n        avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n\r\n        const buffer = getAVPacketData(avpacket)\r\n\r\n        const ver = (buffer[1] >>> 3) & 0x03\r\n        const layer = (buffer[1] & 0x06) >> 1\r\n        // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n        const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n        const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n        const channelCount = channelMode !== 3 ? 2 : 1\r\n        const profile = mp3.getProfileByLayer(layer)\r\n        const sampleRate = mp3.getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n        const hasNewExtraData = stream.codecpar.profile !== profile\r\n          || stream.codecpar.sampleRate !== sampleRate\r\n          || stream.codecpar.chLayout.nbChannels !== channelCount\r\n\r\n        if (hasNewExtraData) {\r\n          stream.codecpar.profile = profile\r\n          stream.codecpar.sampleRate = sampleRate\r\n          stream.codecpar.chLayout.nbChannels = channelCount\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        if (!stream.codecpar.extradata) {\r\n          h264.parseAnnexbExtraData(avpacket, true)\r\n          this.checkExtradata(avpacket, stream)\r\n          stream.codecpar.bitFormat = h264.BitFormat.ANNEXB\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n        if (!stream.codecpar.extradata) {\r\n          hevc.parseAnnexbExtraData(avpacket, true)\r\n          this.checkExtradata(avpacket, stream)\r\n          stream.codecpar.bitFormat = h264.BitFormat.ANNEXB\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n        if (!stream.codecpar.extradata) {\r\n          vvc.parseAnnexbExtraData(avpacket, true)\r\n          this.checkExtradata(avpacket, stream)\r\n          stream.codecpar.bitFormat = h264.BitFormat.ANNEXB\r\n        }\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  @deasync\r\n  private async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    if (this.context.ioEnd) {\r\n      if (!this.context.tsSliceQueueMap.size) {\r\n        return IOError.END\r\n      }\r\n\r\n      const it = this.context.tsSliceQueueMap.values()\r\n\r\n      let queue: TSSliceQueue\r\n\r\n      while (true) {\r\n        const next = it.next()\r\n\r\n        if (next.value && next.value.slices.length) {\r\n          queue = next.value\r\n          break\r\n        }\r\n\r\n        if (next.done) {\r\n          break\r\n        }\r\n      }\r\n\r\n      if (!queue) {\r\n        return IOError.END\r\n      }\r\n\r\n      const stream = formatContext.streams.find((stream) => {\r\n        return (stream.privData as MpegtsStreamContext).pid === queue.pid\r\n      })\r\n\r\n      if (stream) {\r\n        return this.parsePESSlice(formatContext, avpacket, queue, stream)\r\n      }\r\n      else {\r\n        clearTSSliceQueue(queue)\r\n        return this.readAVPacket_(formatContext, avpacket)\r\n      }\r\n    }\r\n    else {\r\n      try {\r\n        while (true) {\r\n          const tsPacket = await impegts.parserTSPacket(formatContext.ioReader, this.context)\r\n          if (!tsPacket.payload) {\r\n            continue\r\n          }\r\n\r\n          if (tsPacket.pid === 0\r\n            || tsPacket.pid === this.context.currentPmtPid\r\n            || this.context.pmt.pid2StreamType.get(tsPacket.pid) === mpegts.TSStreamType.kSCTE35\r\n          ) {\r\n            handleSectionSlice(tsPacket, this.context)\r\n            continue\r\n          }\r\n\r\n          const streamType = this.context.pmt.pid2StreamType.get(tsPacket.pid)\r\n\r\n          if (!streamType) {\r\n            continue\r\n          }\r\n\r\n          let stream = formatContext.streams.find((stream) => {\r\n            return (stream.privData as MpegtsStreamContext).pid === tsPacket.pid\r\n          })\r\n\r\n          if (!stream) {\r\n            stream = formatContext.createStream()\r\n            initStream(tsPacket.pid, stream, this.context)\r\n          }\r\n\r\n          let pesPacketLength = (tsPacket.payload[4] << 8) | tsPacket.payload[5]\r\n\r\n          let pesSliceQueue = this.context.tsSliceQueueMap.get(tsPacket.pid)\r\n\r\n          let packetGot = false\r\n\r\n          if (pesSliceQueue) {\r\n            if (pesSliceQueue.totalLength > 0 && tsPacket.payloadUnitStartIndicator) {\r\n              const ret = this.parsePESSlice(formatContext, avpacket, pesSliceQueue, stream)\r\n              if (ret < 0) {\r\n                return ret\r\n              }\r\n              packetGot = true\r\n            }\r\n          }\r\n          else {\r\n            if (!tsPacket.payloadUnitStartIndicator) {\r\n              if (defined(ENABLE_LOG_TRACE)) {\r\n                logger.trace('got ts packet before payload unit start indicator, ignore it')\r\n              }\r\n              continue\r\n            }\r\n            pesSliceQueue = new TSSliceQueue()\r\n            this.context.tsSliceQueueMap.set(tsPacket.pid, pesSliceQueue)\r\n          }\r\n\r\n          if (tsPacket.payloadUnitStartIndicator) {\r\n            pesSliceQueue.randomAccessIndicator = tsPacket.adaptationFieldInfo?.randomAccessIndicator ?? 0\r\n            pesSliceQueue.pos = tsPacket.pos\r\n            pesSliceQueue.pid = tsPacket.pid\r\n            pesSliceQueue.streamType = streamType\r\n            pesSliceQueue.expectedLength = pesPacketLength === 0 ? 0 : pesPacketLength + 6\r\n          }\r\n\r\n          pesSliceQueue.slices.push(tsPacket.payload)\r\n          pesSliceQueue.totalLength += tsPacket.payload.length\r\n\r\n          if (pesSliceQueue.expectedLength > 0 && pesSliceQueue.expectedLength === pesSliceQueue.totalLength) {\r\n            const ret = this.parsePESSlice(formatContext, avpacket, pesSliceQueue, stream)\r\n            if (ret < 0) {\r\n              return ret\r\n            }\r\n            packetGot = true\r\n          }\r\n\r\n          if (packetGot) {\r\n            return 0\r\n          }\r\n        }\r\n      }\r\n      catch (error) {\r\n        if (formatContext.ioReader.error === IOError.END && !this.context.ioEnd) {\r\n          this.context.ioEnd = true\r\n          return this.readAVPacket_(formatContext, avpacket)\r\n        }\r\n        else if (formatContext.ioReader.error === IOError.END) {\r\n          return IOError.END\r\n        }\r\n        else {\r\n          throw error\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END) {\r\n        logger.error(error.message)\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async syncTSPacket(formatContext: AVIFormatContext) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    const analyzeCount = 10\r\n\r\n    while (true) {\r\n      try {\r\n        const byte = await formatContext.ioReader.readUint8()\r\n        if (byte === 0x47) {\r\n          if (this.context.tsPacketSize === mpegts.TS_DVHS_PACKET_SIZE) {\r\n            pos = formatContext.ioReader.getPos() - 5n\r\n          }\r\n          else {\r\n            pos = formatContext.ioReader.getPos() - 1n\r\n          }\r\n          let count = 0\r\n          let now = formatContext.ioReader.getPos()\r\n          while (count <= analyzeCount) {\r\n            await formatContext.ioReader.skip(this.context.tsPacketSize - 1)\r\n\r\n            const byte = await formatContext.ioReader.readUint8()\r\n\r\n            if (byte === 0x47) {\r\n              count++\r\n            }\r\n            else {\r\n              break\r\n            }\r\n          }\r\n          if (count < analyzeCount) {\r\n            pos = NOPTS_VALUE_BIGINT\r\n            await formatContext.ioReader.seek(now)\r\n            continue\r\n          }\r\n          else {\r\n            break\r\n          }\r\n        }\r\n      }\r\n      catch (error) {\r\n        pos = NOPTS_VALUE_BIGINT\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      // 移动到 ts packet 的开始\r\n      await formatContext.ioReader.seek(pos)\r\n      while (true) {\r\n        const tsPacket = await impegts.parserTSPacket(formatContext.ioReader, this.context)\r\n        // 移动到下一个 pes 的开始\r\n        if (tsPacket.payloadUnitStartIndicator) {\r\n          // 返回到上一个 ts packet 的开始\r\n          await formatContext.ioReader.seek(pos)\r\n          formatContext.streams.forEach((stream) => {\r\n            let pesSliceQueue = this.context.tsSliceQueueMap.get((stream.privData as MpegtsStreamContext).pid)\r\n            if (pesSliceQueue) {\r\n              clearTSSliceQueue(pesSliceQueue)\r\n            }\r\n          })\r\n          break\r\n        }\r\n        pos = formatContext.ioReader.getPos()\r\n      }\r\n    }\r\n  }\r\n\r\n  public async seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: AVStream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64> {\r\n\r\n    let now = formatContext.ioReader.getPos()\r\n\r\n    this.context.tsSliceQueueMap.forEach((queue) => {\r\n      if (queue.slices.length && queue.pos < now) {\r\n        now = queue.pos\r\n      }\r\n      clearTSSliceQueue(queue)\r\n    })\r\n\r\n    this.context.pmt.pid2StreamType.forEach((streamType, pid) => {\r\n      this.context.tsSliceQueueMap.delete(pid)\r\n    })\r\n\r\n    // m3u8 使用时间戳去 seek\r\n    if (flags & AVSeekFlags.TIMESTAMP) {\r\n      const seekTime = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n      await formatContext.ioReader.seek(seekTime, true)\r\n      this.context.ioEnd = false\r\n      return 0n\r\n    }\r\n\r\n    if (stream && stream.sampleIndexes.length) {\r\n      let index = array.binarySearch(stream.sampleIndexes, (item) => {\r\n        if (item.pts > timestamp) {\r\n          return -1\r\n        }\r\n        return 1\r\n      })\r\n      if (index > 0 && avRescaleQ(timestamp - stream.sampleIndexes[index - 1].pts, stream.timeBase, AV_MILLI_TIME_BASE_Q) < 10000n) {\r\n        logger.debug(`seek in sampleIndexes, found index: ${index}, pts: ${stream.sampleIndexes[index - 1].pts}, pos: ${stream.sampleIndexes[index - 1].pos}`)\r\n        await formatContext.ioReader.seek(stream.sampleIndexes[index - 1].pos)\r\n        this.context.ioEnd = false\r\n        return now\r\n      }\r\n    }\r\n\r\n    if (flags & AVSeekFlags.BYTE) {\r\n\r\n      const size = await formatContext.ioReader.fileSize()\r\n\r\n      if (size <= 0n) {\r\n        return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n      }\r\n\r\n      if (timestamp < 0n) {\r\n        timestamp = 0n\r\n      }\r\n      else if (timestamp > size) {\r\n        timestamp = size\r\n      }\r\n      await formatContext.ioReader.seek(timestamp)\r\n\r\n      if (!(flags & AVSeekFlags.ANY)) {\r\n        await this.syncTSPacket(formatContext)\r\n      }\r\n\r\n      this.context.ioEnd = false\r\n\r\n      return now\r\n    }\r\n    else {\r\n      logger.debug('not found any keyframe index, try to seek in bytes')\r\n      let ret = await seekInBytes(\r\n        formatContext,\r\n        stream,\r\n        timestamp,\r\n        this.firstTSPacketPos,\r\n        this.readAVPacket.bind(this),\r\n        this.syncTSPacket.bind(this)\r\n      )\r\n      if (ret >= 0) {\r\n        this.context.ioEnd = false\r\n      }\r\n      return ret\r\n    }\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return this.context.pmt?.pid2StreamType.size ?? 0\r\n  }\r\n}\r\n","/*\r\n * libmedia analyze ts packet length\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mpegts from '../mpegts'\r\n\r\nexport default function analyzeTSLength(buffer: Uint8Array, packetSize: number, probe: boolean) {\r\n  const stat = new Uint8Array(mpegts.TS_MAX_PACKET_SIZE)\r\n  let statAll = 0\r\n  let bestScore = 0\r\n\r\n  for (let i = 0; i < buffer.length - 3; i++) {\r\n    if (buffer[i] === 0x47) {\r\n      const pid = ((buffer[i + 1] << 8) | buffer[i + 2]) & 0x1FFF\r\n      let asc = buffer[i + 3] & 0x30\r\n      if (!probe || pid === 0x1FFF || asc) {\r\n        const x = i % packetSize\r\n        stat[x]++\r\n        statAll++\r\n        if (stat[x] > bestScore) {\r\n          bestScore = stat[x]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return bestScore - Math.max(statAll - 10 * bestScore, 0) / 10\r\n}\r\n","/*\r\n * libmedia clear ts packet slice queue\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { TSSliceQueue } from '../struct'\r\n\r\nexport default function clearTSSliceQueue(queue: TSSliceQueue) {\r\n  queue.slices = []\r\n  queue.totalLength = 0\r\n  queue.expectedLength = -1\r\n}\r\n","/*\r\n * libmedia create mpegts context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { PAT, PMT } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\n\r\nexport default function createMpegtsContext(): MpegtsContext {\r\n\r\n  return {\r\n    currentProgram: NOPTS_VALUE,\r\n    currentPmtPid: NOPTS_VALUE,\r\n    tsPacketSize: NOPTS_VALUE,\r\n    hasPAT: false,\r\n    hasPMT: false,\r\n    tsSliceQueueMap: new Map(),\r\n    pat: new PAT(),\r\n    pmt: new PMT(),\r\n    program2Pmt: new Map(),\r\n    ioEnd: false,\r\n\r\n    startPid: 0x100,\r\n    delay: 0n\r\n  }\r\n}\r\n","/*\r\n * libmedia create mpegts stream context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { MpegtsStreamContext } from '../type'\r\n\r\nexport default function createMpegtsStreamContext(): MpegtsStreamContext {\r\n  return {\r\n    pid: NOPTS_VALUE,\r\n    filter: null,\r\n    tsPacket: null,\r\n    pes: null,\r\n    continuityCounter: 0,\r\n    pesSlices: {\r\n      total: 0,\r\n      buffers: []\r\n    },\r\n    latm: false\r\n  }\r\n}\r\n","/*\r\n * libmedia handle mpegts section slice\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MpegtsContext } from '../type'\r\nimport { TSPacket, TSSliceQueue } from '../struct'\r\nimport clearTSSliceQueue from '../function/clearTSSliceQueue'\r\nimport parseSection from '../function/parseSection'\r\n\r\nexport default function handleSectionSlice(tsPacket: TSPacket, mpegtsContext: MpegtsContext) {\r\n  const tsSliceQueue = mpegtsContext.tsSliceQueueMap.get(tsPacket.pid)\r\n\r\n  if (tsPacket.payloadUnitStartIndicator) {\r\n    const pointerField = tsPacket.payload[0]\r\n    if (tsSliceQueue && tsSliceQueue.totalLength > 0) {\r\n      const remain = tsPacket.payload.slice(1, Math.min(1 + pointerField, tsPacket.payload.length))\r\n      tsSliceQueue.slices.push(remain)\r\n      tsSliceQueue.totalLength += remain.length\r\n\r\n      if (tsSliceQueue.totalLength === tsSliceQueue.expectedLength) {\r\n        parseSection(tsPacket.pid, tsSliceQueue, mpegtsContext)\r\n        clearTSSliceQueue(tsSliceQueue)\r\n      }\r\n      else {\r\n        clearTSSliceQueue(tsSliceQueue)\r\n        mpegtsContext.tsSliceQueueMap.delete(tsPacket.pid)\r\n      }\r\n    }\r\n\r\n    for (let i = 1 + pointerField; i < tsPacket.payload.length;) {\r\n      const tableId = tsPacket.payload[i]\r\n      if (tableId === 0xff) {\r\n        break\r\n      }\r\n      const sectionLength = ((tsPacket.payload[i + 1] & 0x0f) << 8) | tsPacket.payload[i + 2]\r\n\r\n      const tsSliceQueue = new TSSliceQueue()\r\n      tsSliceQueue.pid = tsPacket.pid\r\n      tsSliceQueue.expectedLength = sectionLength + 3\r\n      tsSliceQueue.randomAccessIndicator = tsPacket.adaptationFieldInfo?.randomAccessIndicator ?? 0\r\n\r\n      const remain = tsPacket.payload.slice(\r\n        i,\r\n        Math.min(i + tsSliceQueue.expectedLength - tsSliceQueue.totalLength, tsPacket.payload.length)\r\n      )\r\n\r\n      tsSliceQueue.slices.push(remain)\r\n      tsSliceQueue.totalLength += remain.length\r\n      mpegtsContext.tsSliceQueueMap.set(tsPacket.pid, tsSliceQueue)\r\n\r\n      if (tsSliceQueue.totalLength === tsSliceQueue.expectedLength) {\r\n        parseSection(tsPacket.pid, tsSliceQueue, mpegtsContext)\r\n        clearTSSliceQueue(tsSliceQueue)\r\n      }\r\n      else {\r\n        clearTSSliceQueue(tsSliceQueue)\r\n        mpegtsContext.tsSliceQueueMap.delete(tsPacket.pid)\r\n      }\r\n\r\n      i += remain.length\r\n    }\r\n  }\r\n  else if (tsSliceQueue && tsSliceQueue.totalLength !== 0) {\r\n    const remain = tsPacket.payload.slice(\r\n      0,\r\n      Math.min(tsSliceQueue.expectedLength - tsSliceQueue.totalLength, tsPacket.payload.length)\r\n    )\r\n    tsSliceQueue.slices.push(remain)\r\n    tsSliceQueue.totalLength += remain.length\r\n\r\n    if (tsSliceQueue.totalLength === tsSliceQueue.expectedLength) {\r\n      parseSection(tsPacket.pid, tsSliceQueue, mpegtsContext)\r\n      clearTSSliceQueue(tsSliceQueue)\r\n    }\r\n    else {\r\n      clearTSSliceQueue(tsSliceQueue)\r\n      mpegtsContext.tsSliceQueueMap.delete(tsPacket.pid)\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia init stream\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MpegtsContext, MpegtsStreamContext, PID } from '../type'\r\nimport createMpegtsStreamContext from './createMpegtsStreamContext'\r\nimport * as mpegts from '../mpegts'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport AVBSFilter from '../../../bsf/AVBSFilter'\r\nimport AACADTS2RawFilter from '../../../bsf/aac/ADTS2RawFilter'\r\nimport AACLATM2RawFilter from '../../../bsf/aac/LATM2RawFilter'\r\nimport Annexb2AvccFilter from '../../../bsf/h2645/Annexb2AvccFilter'\r\nimport OpusMpegts2RawFilter from '../../../bsf/opus/Mpegts2RawFilter'\r\nimport Stream from '../../../AVStream'\r\nimport * as opus from '../../../codecs/opus'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\n\r\nexport default function initStream(pid: PID, stream: Stream, mpegtsContext: MpegtsContext) {\r\n\r\n  stream.timeBase.den = 90000\r\n  stream.timeBase.num = 1\r\n\r\n  const streamContext = createMpegtsStreamContext()\r\n\r\n  streamContext.pid = pid\r\n  stream.privData = streamContext\r\n\r\n  const streamType = mpegtsContext.pmt.pid2StreamType.get(pid)\r\n\r\n  if (streamType === mpegts.TSStreamType.PRIVATE_DATA) {\r\n    const descriptorList = mpegtsContext.pmt.pid2ESDescriptor.get(pid)\r\n    stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_DATA\r\n\r\n    if (descriptorList) {\r\n      const regDescriptor = descriptorList.find((descriptor) => {\r\n        return descriptor.tag === 0x05\r\n      })\r\n\r\n      if (regDescriptor && regDescriptor.buffer?.length >= 4) {\r\n        if (String.fromCharCode(regDescriptor.buffer[0]) === 'O'\r\n          || String.fromCharCode(regDescriptor.buffer[1]) === 'p'\r\n          || String.fromCharCode(regDescriptor.buffer[2]) === 'u'\r\n          || String.fromCharCode(regDescriptor.buffer[3]) === 's'\r\n        ) {\r\n          stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n          stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_OPUS\r\n          stream.codecpar.sampleRate = 48000\r\n\r\n          const extDescriptor = descriptorList.find((descriptor) => {\r\n            return descriptor.tag === 0x7f\r\n          })\r\n\r\n          if (extDescriptor) {\r\n            const extDescTag = extDescriptor.buffer[0]\r\n\r\n            if (extDescTag === 0x80) {\r\n              stream.codecpar.chLayout.nbChannels = ((extDescriptor.buffer[1] & 0x0F) === 0 )\r\n                ? 2\r\n                : (extDescriptor.buffer[1] & 0x0F)\r\n\r\n\r\n              const buffer = opus.avCodecParameters2Extradata(stream.codecpar)\r\n              if (buffer) {\r\n                stream.codecpar.extradata = avMalloc(buffer.length)\r\n                memcpyFromUint8Array(stream.codecpar.extradata, buffer.length, buffer)\r\n                stream.codecpar.extradataSize = buffer.length\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else if (String.fromCharCode(regDescriptor.buffer[0]) === 'A'\r\n          || String.fromCharCode(regDescriptor.buffer[1]) === 'V'\r\n          || String.fromCharCode(regDescriptor.buffer[2]) === '0'\r\n          || String.fromCharCode(regDescriptor.buffer[3]) === '1'\r\n        ) {\r\n          stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_VIDEO\r\n          stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AV1\r\n          const extDescriptor = descriptorList.find((descriptor) => {\r\n            return descriptor.tag === 0x80\r\n          })\r\n          if (extDescriptor) {\r\n            stream.codecpar.extradata = avMalloc(extDescriptor.buffer.length)\r\n            memcpyFromUint8Array(stream.codecpar.extradata, extDescriptor.buffer.length, extDescriptor.buffer)\r\n            stream.codecpar.extradataSize = extDescriptor.buffer.length\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    const info = mpegts.StreamType2AVCodecId[streamType]\r\n    if (info) {\r\n      stream.codecpar.codecType = info[0]\r\n      stream.codecpar.codecId = info[1]\r\n    }\r\n    else {\r\n      stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_DATA\r\n    }\r\n  }\r\n\r\n  let filter: AVBSFilter\r\n\r\n  switch (streamType) {\r\n    case mpegts.TSStreamType.AUDIO_AAC:\r\n      filter = new AACADTS2RawFilter()\r\n      break\r\n    case mpegts.TSStreamType.AUDIO_AAC_LATM:\r\n      filter = new AACLATM2RawFilter()\r\n      break\r\n    case mpegts.TSStreamType.VIDEO_H264:\r\n      // filter = new Annexb2AvccFilter()\r\n      break\r\n    case mpegts.TSStreamType.VIDEO_HEVC:\r\n      // filter = new Annexb2AvccFilter()\r\n      break\r\n    case mpegts.TSStreamType.PRIVATE_DATA:\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n        filter = new OpusMpegts2RawFilter()\r\n      }\r\n      break\r\n  }\r\n\r\n  if (filter) {\r\n    (stream.privData as MpegtsStreamContext).filter = filter\r\n    filter.init(addressof(stream.codecpar), addressof(stream.timeBase))\r\n  }\r\n\r\n  return stream\r\n}\r\n","/*\r\n * libmedia min pred\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport function midPred(a: number, b: number, c: number) {\r\n  if (a > b) {\r\n    if (c > b) {\r\n      if (c > a) {\r\n        b = a\r\n      }\r\n      else {\r\n        b = c\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (b > c) {\r\n      if (c > a) {\r\n        b = c\r\n      }\r\n      else {\r\n        b = a\r\n      }\r\n    }\r\n  }\r\n  return b\r\n}\r\n","/*\r\n * libmedia parse adaptation field\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { TSPacket } from '../struct'\r\n\r\nexport default function parseAdaptationField(buffer: Uint8Array, tsPacket: TSPacket) {\r\n  let i = 0\r\n  let byte = buffer[i++]\r\n  tsPacket.adaptationFieldInfo.discontinuityIndicator = (byte >> 7) & 0x01\r\n  tsPacket.adaptationFieldInfo.randomAccessIndicator = (byte >> 6) & 0x01\r\n  tsPacket.adaptationFieldInfo.elementaryStreamPriorityIndicator = (byte >> 5) & 0x01\r\n  tsPacket.adaptationFieldInfo.pcrFlag = (byte >> 4) & 0x01\r\n  tsPacket.adaptationFieldInfo.opcrFlag = (byte >> 3) & 0x01\r\n  tsPacket.adaptationFieldInfo.splicingPointFlag = (byte >> 2) & 0x01\r\n  tsPacket.adaptationFieldInfo.transportPrivateDataFlag = (byte >> 1) & 0x01\r\n  tsPacket.adaptationFieldInfo.adaptationFieldExtensionFlag = byte & 0x01\r\n\r\n  if (tsPacket.adaptationFieldInfo.pcrFlag) {\r\n    const pcrHigh = static_cast<int64>(buffer[i++] << 25\r\n      | buffer[i++] << 17\r\n      | buffer[i++] << 9\r\n      | buffer[i++] << 1\r\n      | buffer[i] >> 7)\r\n    const prcLow = static_cast<int64>((buffer[i++] & 0x01) << 8 | buffer[i++])\r\n    tsPacket.adaptationFieldInfo.pcr = pcrHigh * 300n + prcLow\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.opcrFlag) {\r\n    const pcrHigh = static_cast<int64>(buffer[i++] << 25\r\n      | buffer[i++] << 17\r\n      | buffer[i++] << 9\r\n      | buffer[i++] << 1\r\n      | buffer[i] >> 7)\r\n    const prcLow = static_cast<int64>((buffer[i++] & 0x01) << 8 | buffer[i++])\r\n    tsPacket.adaptationFieldInfo.pcr = pcrHigh * 300n + prcLow\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.splicingPointFlag) {\r\n    tsPacket.adaptationFieldInfo.spliceCountDown = buffer[i++]\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.transportPrivateDataFlag) {\r\n    const len = buffer[i++]\r\n    tsPacket.adaptationFieldInfo.transportPrivateData = buffer.subarray(i, i + len)\r\n    i += len\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.adaptationFieldExtensionFlag) {\r\n    const len = buffer[i++]\r\n    tsPacket.adaptationFieldInfo.extension = buffer.subarray(i, i + len)\r\n    i += len\r\n  }\r\n}\r\n","/*\r\n * libmedia parse PAT\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { PAT, TSSliceQueue } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function parsePAT(queue: TSSliceQueue, mpegtsContext: MpegtsContext) {\r\n\r\n  let byte = 0\r\n\r\n  const bufferReader = new BufferReader(concatTypeArray(Uint8Array, queue.slices), true)\r\n\r\n  const tableId = bufferReader.readUint8()\r\n  if (tableId !== 0x00) {\r\n    logger.error(`parsePAT: table_id ${tableId} is not corresponded to PAT!`)\r\n  }\r\n\r\n  const sectionLength = bufferReader.readUint16() & 0x0fff\r\n\r\n  const transportStreamId = bufferReader.readUint16()\r\n\r\n  byte = bufferReader.readUint8()\r\n\r\n  const versionNumber = (byte >> 1) & 0x1f\r\n  const currentNextIndicator = byte & 0x01\r\n  const sectionNumber = bufferReader.readUint8()\r\n  const lastSectionNumber = bufferReader.readUint8()\r\n\r\n  let pat: PAT\r\n\r\n  if (currentNextIndicator === 1 && sectionNumber === 0) {\r\n    pat = new PAT()\r\n    pat.versionNumber = versionNumber\r\n  }\r\n  else {\r\n    pat = mpegtsContext.pat\r\n\r\n    if (!pat) {\r\n      logger.error('can not found PAT in mpegts context')\r\n      return\r\n    }\r\n  }\r\n\r\n  const programBytes = sectionLength - 5 - 4\r\n\r\n  const endPos = static_cast<int32>(bufferReader.getPos()) + programBytes\r\n\r\n  let firstProgramNumber = -1\r\n  let firstPmtPid = -1\r\n\r\n  // program_number + program_map_PID + crc\r\n  while (bufferReader.getPos() < endPos) {\r\n    const programNumber = bufferReader.readUint16()\r\n    const pid = bufferReader.readUint16() & 0x1fff\r\n\r\n    // network_PID\r\n    if (programNumber === 0) {\r\n      pat.networkPid = pid\r\n    }\r\n    // program_map_PID\r\n    else {\r\n      pat.program2PmtPid.set(programNumber, pid)\r\n\r\n      if (firstProgramNumber === -1) {\r\n        firstProgramNumber = programNumber\r\n      }\r\n      if (firstPmtPid === -1) {\r\n        firstPmtPid = pid\r\n      }\r\n    }\r\n  }\r\n\r\n  if (currentNextIndicator === 1 && sectionNumber === 0) {\r\n    if (!mpegtsContext.pat) {\r\n      logger.info('parsed first PAT')\r\n    }\r\n    mpegtsContext.pat = pat\r\n    mpegtsContext.currentProgram = firstProgramNumber\r\n    mpegtsContext.currentPmtPid = firstPmtPid\r\n\r\n    if (defined(ENABLE_LOG_TRACE)) {\r\n      logger.debug(`found PAT, current program: ${firstProgramNumber}, current PMT pid: ${firstPmtPid}`)\r\n    }\r\n\r\n    mpegtsContext.hasPAT = true\r\n  }\r\n}\r\n","/*\r\n * libmedia parse PES\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../../../AVStream'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { PES } from '../struct'\r\nimport { addAVPacketData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { BitFormat } from '../../../codecs/h264'\r\n\r\nexport default function parsePES(pes: PES, avpacket: pointer<AVPacket>, stream: Stream) {\r\n\r\n  if (pes.randomAccessIndicator) {\r\n    avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n  }\r\n\r\n  const codecId = stream.codecpar.codecId\r\n  if (codecId === AVCodecID.AV_CODEC_ID_H264 || codecId === AVCodecID.AV_CODEC_ID_H265) {\r\n    avpacket.bitFormat = BitFormat.ANNEXB\r\n  }\r\n\r\n  avpacket.streamIndex = stream.index\r\n\r\n  avpacket.dts = pes.dts\r\n  avpacket.pts = pes.pts\r\n  avpacket.pos = pes.pos\r\n  avpacket.timeBase.den = 90000\r\n  avpacket.timeBase.num = 1\r\n\r\n  if (stream.startTime === NOPTS_VALUE_BIGINT) {\r\n    stream.startTime = avpacket.pts || avpacket.dts\r\n  }\r\n\r\n  const data = avMalloc(pes.payload.length)\r\n  memcpyFromUint8Array(data, pes.payload.length, pes.payload)\r\n  addAVPacketData(avpacket, data, pes.payload.length)\r\n}\r\n","/*\r\n * libmedia parse PES slice\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { PES, TSSliceQueue } from '../struct'\r\nimport * as logger from 'common/util/logger'\r\nimport { TSStreamId, TSStreamType } from '../mpegts'\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\n\r\nexport default function parsePESSlice(queue: TSSliceQueue): PES {\r\n  let data = new Uint8Array(queue.totalLength)\r\n  for (let i = 0, offset = 0; i < queue.slices.length; i++) {\r\n    let slice = queue.slices[i]\r\n    data.set(slice, offset)\r\n    offset += slice.byteLength\r\n  }\r\n\r\n  const streamId = data[3]\r\n  const pesPacketLength = (data[4] << 8) | data[5]\r\n\r\n  const pes = new PES()\r\n  pes.data = data\r\n  pes.pid = queue.pid\r\n  pes.streamId = streamId\r\n  pes.streamType = queue.streamType\r\n  pes.pos = queue.pos\r\n  pes.randomAccessIndicator = queue.randomAccessIndicator\r\n\r\n  if (streamId !== TSStreamId.PROGRAM_STREAM_MAP\r\n    && streamId !== TSStreamId.PADDING_STREAM\r\n    && streamId !== TSStreamId.PRIVATE_STREAM_2\r\n    && streamId !== TSStreamId.ECM_STREAM\r\n    && streamId !== TSStreamId.EMM_STREAM\r\n    && streamId !== TSStreamId.PROGRAM_STREAM_DIRECTORY\r\n    && streamId !== TSStreamId.DSMCC_STREAM\r\n    && streamId !== TSStreamId.TYPE_E_STREAM\r\n  ) {\r\n    // const pesScramblingControl = (data[6] & 0x30) >>> 4\r\n    const ptsDtsFlags = (data[7] & 0xC0) >>> 6\r\n    const pesHeaderDataLength = data[8]\r\n\r\n    let pts: int64 = NOPTS_VALUE_BIGINT\r\n    let dts: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    if (ptsDtsFlags === 0x02 || ptsDtsFlags === 0x03) {\r\n      pts = static_cast<int64>((data[9] & 0x0E) * 536870912\r\n        + (data[10] & 0xFF) * 4194304\r\n        + (data[11] & 0xFE) * 16384\r\n        + (data[12] & 0xFF) * 128\r\n        + (data[13] & 0xFE) / 2)\r\n\r\n      if (ptsDtsFlags === 0x03) {\r\n        dts = static_cast<int64>((data[14] & 0x0E) * 536870912\r\n          + (data[15] & 0xFF) * 4194304\r\n          + (data[16] & 0xFE) * 16384\r\n          + (data[17] & 0xFF) * 128\r\n          + (data[18] & 0xFE) / 2)\r\n      }\r\n      else {\r\n        dts = pts\r\n      }\r\n    }\r\n\r\n    pes.dts = dts\r\n    pes.pts = pts\r\n\r\n    const payloadStartIndex = 6 + 3 + pesHeaderDataLength\r\n    let payloadLength: number = 0\r\n\r\n    if (pesPacketLength !== 0) {\r\n      if (pesPacketLength < 3 + pesHeaderDataLength) {\r\n        logger.error('Malformed PES: PES_packet_length < 3 + PES_header_data_length')\r\n        return\r\n      }\r\n      payloadLength = pesPacketLength - 3 - pesHeaderDataLength\r\n    }\r\n    else {\r\n      // PES_packet_length === 0\r\n      payloadLength = data.byteLength - payloadStartIndex\r\n    }\r\n\r\n    pes.payload = data.subarray(payloadStartIndex, payloadStartIndex + payloadLength)\r\n  }\r\n  else if (streamId === TSStreamId.PROGRAM_STREAM_MAP\r\n    || streamId === TSStreamId.PRIVATE_STREAM_2\r\n    || streamId === TSStreamId.ECM_STREAM\r\n    || streamId === TSStreamId.EMM_STREAM\r\n    || streamId === TSStreamId.PROGRAM_STREAM_DIRECTORY\r\n    || streamId === TSStreamId.DSMCC_STREAM\r\n    || streamId === TSStreamId.TYPE_E_STREAM\r\n  ) {\r\n    if (pes.streamId === TSStreamType.PRIVATE_DATA) {\r\n      const payloadStartIndex = 6\r\n      let payloadLength: number = 0\r\n\r\n      if (pesPacketLength !== 0) {\r\n        payloadLength = pesPacketLength\r\n      }\r\n      else {\r\n        // PES_packet_length === 0\r\n        payloadLength = data.byteLength - payloadStartIndex\r\n      }\r\n      pes.payload = data.subarray(payloadStartIndex, payloadStartIndex + payloadLength)\r\n    }\r\n  }\r\n  return pes\r\n}\r\n","/*\r\n * libmedia parse PMT\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { ESDescriptor, PMT, TSSliceQueue } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function parsePMT(queue: TSSliceQueue, mpegtsContext: MpegtsContext) {\r\n\r\n  let byte = 0\r\n\r\n  const bufferReader = new BufferReader(concatTypeArray(Uint8Array, queue.slices), true)\r\n\r\n  const tableId = bufferReader.readUint8()\r\n  if (tableId !== 0x02) {\r\n    logger.error(`parse PMT: table_id ${tableId} is not corresponded to PAT!`)\r\n  }\r\n\r\n  const sectionLength = bufferReader.readUint16() & 0x0fff\r\n  const programNumber = bufferReader.readUint16()\r\n\r\n  byte = bufferReader.readUint8()\r\n\r\n  const versionNumber = (byte >> 1) & 0x1f\r\n  const currentNextIndicator = byte & 0x01\r\n\r\n  const sectionNumber = bufferReader.readUint8()\r\n  const lastSectionNumber = bufferReader.readUint8()\r\n\r\n  let pmt: PMT\r\n\r\n  if (currentNextIndicator === 1 && sectionNumber === 0) {\r\n    pmt = new PMT()\r\n    pmt.programNumber = programNumber\r\n    pmt.versionNumber = versionNumber\r\n\r\n    mpegtsContext.program2Pmt.set(programNumber, pmt)\r\n    mpegtsContext.hasPMT = true\r\n  }\r\n  else {\r\n    pmt = mpegtsContext.program2Pmt.get(programNumber)\r\n\r\n    if (!pmt) {\r\n      logger.error('can not found PMT in mpegts context')\r\n      return\r\n    }\r\n  }\r\n\r\n  pmt.pcrPid = bufferReader.readUint16() & 0x1fff\r\n  const programInfoLength = bufferReader.readUint16() & 0x0fff\r\n\r\n  bufferReader.skip(programInfoLength)\r\n\r\n  let endPos = static_cast<int32>(bufferReader.getPos()) + (sectionLength - 9 - programInfoLength - 4)\r\n\r\n  while (bufferReader.getPos() < endPos) {\r\n    const streamType = bufferReader.readUint8()\r\n    const elementaryPid = bufferReader.readUint16() & 0x1fff\r\n    const esInfoLength = bufferReader.readUint16() & 0x0fff\r\n\r\n    pmt.pid2StreamType.set(elementaryPid, streamType)\r\n\r\n    if (defined(ENABLE_LOG_TRACE)) {\r\n      logger.trace(`found stream, type: ${streamType}, pid: ${elementaryPid}`)\r\n    }\r\n\r\n    if (esInfoLength > 0) {\r\n\r\n      const esDescriptorList = []\r\n\r\n      const subEndPos = static_cast<int32>(bufferReader.getPos()) + esInfoLength\r\n      while (bufferReader.getPos() < subEndPos) {\r\n        const esDescriptor = new ESDescriptor()\r\n        esDescriptor.tag = bufferReader.readUint8()\r\n        const length = bufferReader.readUint8()\r\n        if (length > 0) {\r\n          esDescriptor.buffer = bufferReader.readBuffer(length)\r\n        }\r\n        esDescriptorList.push(esDescriptor)\r\n      }\r\n      pmt.pid2ESDescriptor.set(elementaryPid, esDescriptorList)\r\n    }\r\n  }\r\n\r\n  if (programNumber === mpegtsContext.currentProgram) {\r\n    if (!mpegtsContext.pmt) {\r\n      logger.info('parsed first PMT')\r\n    }\r\n    mpegtsContext.pmt = pmt\r\n  }\r\n}\r\n","/*\r\n * libmedia parse SCTE35\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { TSSliceQueue } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\n\r\nexport default function parseSCTE35(queue: TSSliceQueue, mpegtsContext: MpegtsContext) {\r\n\r\n}\r\n","/*\r\n * libmedia parse section\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { TSSliceQueue } from '../struct'\r\nimport { MpegtsContext, PID } from '../type'\r\nimport parsePAT from './parsePAT'\r\nimport parsePMT from './parsePMT'\r\nimport * as mpegts from '../mpegts'\r\nimport parseSCTE35 from './parseSCTE35'\r\n\r\nexport default function parseSection(pid: PID, queue: TSSliceQueue, mpegtsContext: MpegtsContext) {\r\n  if (pid === 0x00) {\r\n    parsePAT(queue, mpegtsContext)\r\n  }\r\n  else if (pid === mpegtsContext.currentPmtPid) {\r\n    parsePMT(queue, mpegtsContext)\r\n  }\r\n  else if (mpegtsContext.pmt && mpegtsContext.pmt.pid2StreamType.get(pid) === mpegts.TSStreamType.kSCTE35) {\r\n    parseSCTE35(queue, mpegtsContext)\r\n  }\r\n}\r\n","/*\r\n * libmedia mpegts decode util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mpegts from './mpegts'\r\nimport { IOError } from 'common/io/error'\r\nimport analyzeTSLength from './function/analyzeTSLength'\r\nimport { midPred } from './function/midPred'\r\nimport { MpegtsContext } from './type'\r\nimport * as logger from 'common/util/logger'\r\nimport { TSPacket } from './struct'\r\nimport parseAdaptationField from './function/parseAdaptationField'\r\nimport IOReader from 'common/io/IOReader'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function getPacketSize(ioReader: IOReader): Promise<number> {\r\n  let buffer: Uint8Array\r\n  try {\r\n    buffer = await ioReader.peekBuffer(mpegts.PROBE_PACKET_MAX_BUF)\r\n  }\r\n  catch (error) {\r\n    if (ioReader.error !== IOError.END) {\r\n      buffer = await ioReader.peekBuffer(ioReader.remainingLength())\r\n    }\r\n  }\r\n\r\n  if (buffer && buffer.length >= mpegts.TS_PACKET_SIZE) {\r\n    const score = analyzeTSLength(buffer, mpegts.TS_PACKET_SIZE, false)\r\n    const dvhsScore = analyzeTSLength(buffer, mpegts.TS_DVHS_PACKET_SIZE, false)\r\n    const fecScore = analyzeTSLength(buffer, mpegts.TS_FEC_PACKET_SIZE, false)\r\n\r\n    let margin = midPred(score, fecScore, dvhsScore)\r\n\r\n    if (buffer.length < mpegts.PROBE_PACKET_MAX_BUF) {\r\n      margin += mpegts.PROBE_PACKET_MARGIN\r\n    }\r\n\r\n    let size = mpegts.TS_PACKET_SIZE\r\n\r\n    if (score > margin) {\r\n      size = mpegts.TS_PACKET_SIZE\r\n    }\r\n    else if (dvhsScore > margin) {\r\n      size = mpegts.TS_DVHS_PACKET_SIZE\r\n    }\r\n    else if (fecScore > margin) {\r\n      size = mpegts.TS_FEC_PACKET_SIZE\r\n    }\r\n\r\n    logger.debug(`got ts packet size: ${size}`)\r\n\r\n    return size\r\n  }\r\n  return 0\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function parserTSPacket(ioReader: IOReader, mpegtsContext: MpegtsContext): Promise<TSPacket> {\r\n\r\n  const pos = ioReader.getPos()\r\n  let byte = 0\r\n\r\n  if (mpegtsContext.tsPacketSize === mpegts.TS_DVHS_PACKET_SIZE) {\r\n    // skip ATS field (2-bits copy-control + 30-bits timestamp) for m2ts\r\n    await ioReader.skip(4)\r\n  }\r\n\r\n  const syncByte = await ioReader.readUint8()\r\n\r\n  if (syncByte !== 0x47) {\r\n    logger.fatal(`found syncByte not 0x47, value: ${syncByte.toString(16)}`)\r\n  }\r\n\r\n  const tsPacket = new TSPacket()\r\n  tsPacket.pos = pos\r\n\r\n  byte = await ioReader.readUint16()\r\n  tsPacket.payloadUnitStartIndicator = (byte >> 14) & 0x01\r\n  tsPacket.transportPriority = (byte >> 13) & 0x01\r\n  tsPacket.pid = byte & 0x1fff\r\n\r\n  byte = await ioReader.readUint8()\r\n  tsPacket.adaptationFieldControl = (byte >> 4) & 0x03\r\n  tsPacket.continuityCounter = byte & 0x0f\r\n\r\n  let payloadStartIndex = 4\r\n\r\n  if (tsPacket.adaptationFieldControl === 0x02 || tsPacket.adaptationFieldControl === 0x03) {\r\n    const adaptationFieldLength = await ioReader.readUint8()\r\n    if (5 + adaptationFieldLength === mpegts.TS_PACKET_SIZE) {\r\n      parseAdaptationField(await ioReader.readBuffer(adaptationFieldLength), tsPacket)\r\n      if (mpegtsContext.tsPacketSize === mpegts.TS_FEC_PACKET_SIZE) {\r\n        await ioReader.skip(16)\r\n      }\r\n      return tsPacket\r\n    }\r\n    else {\r\n      if (adaptationFieldLength > 0) {\r\n        parseAdaptationField(await ioReader.readBuffer(adaptationFieldLength), tsPacket)\r\n      }\r\n      payloadStartIndex = 4 + 1 + adaptationFieldLength\r\n    }\r\n  }\r\n  if (tsPacket.adaptationFieldControl === 0x01 || tsPacket.adaptationFieldControl === 0x03) {\r\n    tsPacket.payload = await ioReader.readBuffer(mpegts.TS_PACKET_SIZE - payloadStartIndex)\r\n  }\r\n\r\n  if (mpegtsContext.tsPacketSize === mpegts.TS_FEC_PACKET_SIZE) {\r\n    await ioReader.skip(16)\r\n  }\r\n\r\n  return tsPacket\r\n}\r\n","/*\r\n * libmedia mpegts identify defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\n\r\nexport const TS_FEC_PACKET_SIZE = 204\r\n\r\nexport const TS_DVHS_PACKET_SIZE = 192\r\n\r\nexport const TS_PACKET_SIZE = 188\r\n\r\nexport const TS_MAX_PACKET_SIZE = 204\r\n\r\nexport const NB_PID_MAX = 8192\r\n\r\nexport const USUAL_SECTION_SIZE = 1024\r\n\r\nexport const MAX_SECTION_SIZE = 4096\r\n\r\nexport const PROBE_PACKET_MAX_BUF = 8192\r\n\r\nexport const PROBE_PACKET_MARGIN = 5\r\n\r\n/**\r\n * maximum size in which we look for synchronization if\r\n * synchronization is lost \r\n */\r\nexport const MAX_RESYNC_SIZE = 65536\r\n\r\nexport const MAX_PES_PAYLOAD = 200 * 1024\r\n\r\nexport const MAX_MP4_DESCR_COUNT = 16\r\n\r\nexport const REGISTRATION_DESCRIPTOR = 0x05\r\n\r\nexport const ISO_639_LANGUAGE_DESCRIPTOR = 0x0a\r\n\r\nexport const enum TSPid {\r\n  /**\r\n   * Program Association Table\r\n   */\r\n  PAT = 0x0000,\r\n  /**\r\n   * Conditional Access Table\r\n   */\r\n  CAT = 0x0001,\r\n  /**\r\n   * Transport Stream Description Table\r\n   */\r\n  TSDT = 0x0002,\r\n  IPMP = 0x0003,\r\n\r\n  /**\r\n   * PID from 0x0004 to 0x000F are reserved\r\n   */\r\n\r\n  /**\r\n   * Network Information Table\r\n   */\r\n  NIT = 0x0010,\r\n  /**\r\n   * Service Description Table\r\n   */\r\n  SDT = 0x0011,\r\n  /**\r\n   * Bouquet Association Table\r\n   */\r\n  BAT = 0x0011,\r\n  /**\r\n   * Event Information Table\r\n   */\r\n  EIT = 0x0012,\r\n  /**\r\n   * Running Status Table\r\n   */\r\n  RST = 0x0013,\r\n  /**\r\n   * Time and Date Table \r\n   */\r\n  TDT = 0x0014,\r\n  TOT = 0x0014,\r\n  NET_SYNC = 0x0015,\r\n  /**\r\n   * RAR Notification Table\r\n   */\r\n  RNT = 0x0016,\r\n\r\n  /**\r\n   * PID from 0x0017 to 0x001B are reserved for future use\r\n   * \r\n   */\r\n\r\n  /**\r\n   * PID value 0x001C allocated to link-local inband signalling shall not be\r\n   * used on any broadcast signals. It shall only be used between devices in a\r\n   * controlled environment. \r\n   */\r\n  LINK_LOCAL = 0x001C,\r\n  MEASUREMENT = 0x001D,\r\n  /**\r\n   * Discontinuity Information Table\r\n   */\r\n  DIT = 0x001E,\r\n  /**\r\n   * Selection Information Table\r\n   */\r\n  SIT = 0x001F,\r\n  /**\r\n   * PID from 0x0020 to 0x1FFA may be assigned as needed to PMT, elementary\r\n   * streams and other data tables\r\n   */\r\n  FIRST_OTHER = 0x0020,\r\n  LAST_OTHER = 0x1FFA,\r\n  /**\r\n   * PID 0x1FFB is used by DigiCipher 2/ATSC MGT metadata\r\n   * PID from 0x1FFC to 0x1FFE may be assigned as needed to PMT, elementary\r\n   * streams and other data tables\r\n   */\r\n\r\n  /**\r\n   * Null packet (used for fixed bandwidth padding)\r\n   */\r\n  NULL = 0x1FFF,\r\n  /**\r\n   * m2ts pids\r\n   */\r\n  M2TS_PMT = 0x0100,\r\n  M2TS_PCR = 0x1001,\r\n  M2TS_VIDEO = 0x1011,\r\n  M2TS_AUDIO_START = 0x1100,\r\n  M2TS_PGSSUB_START = 0x1200,\r\n  M2TS_TEXTSUB = 0x1800,\r\n  M2TS_SECONDARY_AUDIO_START = 0x1A00,\r\n  M2TS_SECONDARY_VIDEO_START = 0x1B00\r\n}\r\n\r\nexport const enum TSTid {\r\n  /**\r\n   * Program Association section\r\n   */\r\n  PAT = 0x00,\r\n  /**\r\n   * Conditional Access section \r\n   */\r\n  CAT = 0x01,\r\n  /**\r\n   * Program Map section\r\n   */\r\n  PMT = 0x02,\r\n  /**\r\n   * Transport Stream Description section \r\n   */\r\n  TSDT = 0x03,\r\n\r\n  /**\r\n   * TID from 0x04 to 0x3F are reserved\r\n   */\r\n\r\n  M4OD = 0x05,\r\n  /**\r\n   * Network Information section - actual network\r\n   */\r\n  NIT = 0x40,\r\n  /**\r\n   * Network Information section - actual network\r\n   */\r\n  ONIT = 0x41,\r\n  /**\r\n   * Service Description section - actual TS\r\n   */\r\n  SDT = 0x42,\r\n\r\n  /**\r\n   * TID from 0x43 to 0x45 are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Service Descrition section - other TS \r\n   */\r\n  OSDT = 0x46,\r\n\r\n  /**\r\n   * TID from 0x47 to 0x49 are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Bouquet Association section\r\n   */\r\n  BAT = 0x4A,\r\n  /**\r\n   * Update Notification Table section\r\n   */\r\n  UNT = 0x4B,\r\n  /**\r\n   * Downloadable Font Info section\r\n   */\r\n  DFI = 0x4C,\r\n\r\n  /**\r\n   * TID 0x4D is reserved for future use \r\n   */\r\n\r\n  /**\r\n   * Event Information section - actual TS\r\n   */\r\n  EIT = 0x4E,\r\n  /**\r\n   * Event Information section - other TS\r\n   */\r\n  OEIT = 0x4F,\r\n  /**\r\n   * Event Information section schedule - actual TS \r\n   */\r\n  EITS_START = 0x50,\r\n  /**\r\n   * Event Information section schedule - actual TS \r\n   */\r\n  EITS_END = 0x5F,\r\n  /**\r\n   *  Event Information section schedule - other TS\r\n   */\r\n  OEITS_START = 0x60,\r\n  /**\r\n   * Event Information section schedule - other TS\r\n   */\r\n  OEITS_END = 0x6F,\r\n  /**\r\n   * Time Date section\r\n   */\r\n  TDT = 0x70,\r\n  /**\r\n   * Running Status section\r\n   */\r\n  RST = 0x71,\r\n  /**\r\n   * Stuffing section\r\n   */\r\n  ST = 0x72,\r\n  /**\r\n   * Time Offset section\r\n   */\r\n  TOT = 0x73,\r\n  /**\r\n   * Application Inforamtion section\r\n   */\r\n  AIT = 0x74,\r\n  /**\r\n   * Container section\r\n   */\r\n  CT = 0x75,\r\n  /**\r\n   * Related Content section\r\n   */\r\n  RCT = 0x76,\r\n  /**\r\n   * Related Content section\r\n   */\r\n  CIT = 0x77,\r\n  /**\r\n   * MPE-FEC section\r\n   */\r\n  MPE_FEC = 0x78,\r\n  /**\r\n   * Resolution Provider Notification section\r\n   */\r\n  RPNT = 0x79,\r\n  /**\r\n   * MPE-IFEC section\r\n   */\r\n  MPE_IFEC = 0x7A,\r\n  /**\r\n   * Protection Message section\r\n   */\r\n  PROTMT = 0x7B,\r\n\r\n  /**\r\n   * TID from 0x7C to 0x7D are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Discontinuity Information section\r\n   */\r\n  DIT = 0x7E,\r\n  /**\r\n   * Selection Information section\r\n   */\r\n  SIT = 0x7F\r\n\r\n  /**\r\n   * TID from 0x80 to 0xFE are user defined\r\n   * TID 0xFF is reserved\r\n   */\r\n}\r\n\r\nexport const enum TSStreamType {\r\n  NONE = 0x00,\r\n  VIDEO_MPEG1 = 0x01,\r\n  VIDEO_MPEG2 = 0x02,\r\n  AUDIO_MPEG1 = 0x03,\r\n  AUDIO_MPEG2 = 0x04,\r\n  PRIVATE_SECTION = 0x05,\r\n  PRIVATE_DATA = 0x06,\r\n  AUDIO_AAC = 0x0f,\r\n  AUDIO_AAC_LATM = 0x11,\r\n  VIDEO_MPEG4 = 0x10,\r\n  METADATA = 0x15,\r\n  VIDEO_H264 = 0x1b,\r\n  VIDEO_HEVC = 0x24,\r\n  VIDEO_VVC = 0x33,\r\n  VIDEO_CAVS = 0x42,\r\n  VIDEO_VC1 = 0xea,\r\n  VIDEO_DIRAC = 0xd1,\r\n\r\n  AUDIO_AC3 = 0x81,\r\n  AUDIO_DTS = 0x82,\r\n  AUDIO_TRUEHD = 0x83,\r\n  kSCTE35 = 0x86,\r\n  AUDIO_EAC3 = 0x87\r\n}\r\n\r\n/**\r\n * ISO/IEC 13818-1 Table 2-22\r\n */\r\nexport const enum TSStreamId {\r\n  PROGRAM_STREAM_MAP = 0xbc,\r\n  PRIVATE_STREAM_1 = 0xbd,\r\n  PADDING_STREAM = 0xbe,\r\n  PRIVATE_STREAM_2 = 0xbf,\r\n  AUDIO_STREAM_0 = 0xc0,\r\n  VIDEO_STREAM_0 = 0xe0,\r\n  ECM_STREAM = 0xf0,\r\n  EMM_STREAM = 0xf1,\r\n  DSMCC_STREAM = 0xf2,\r\n  TYPE_E_STREAM = 0xf8,\r\n  METADATA_STREAM = 0xfc,\r\n  EXTENDED_STREAM_ID = 0xfd,\r\n  PROGRAM_STREAM_DIRECTORY = 0xff\r\n}\r\n\r\n/**\r\n * ISO/IEC 13818-1 Table 2-45\r\n */\r\nexport const enum TSDescriptor {\r\n  VIDEO_STREAM = 0x02,\r\n  REGISTRATION = 0x05,\r\n  ISO_639_LANGUAGE = 0x0a,\r\n  IOD = 0x1d,\r\n  SL = 0x1e,\r\n  FMC = 0x1f,\r\n  METADATA = 0x26,\r\n  METADATA_STD = 0x27\r\n}\r\n\r\nexport const StreamType2AVCodecId: Partial<Record<TSStreamType, [AVMediaType, AVCodecID]>> = {\r\n  [TSStreamType.AUDIO_AAC]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AAC],\r\n  [TSStreamType.AUDIO_AAC_LATM]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AAC],\r\n  [TSStreamType.AUDIO_MPEG1]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_MP3],\r\n  [TSStreamType.AUDIO_MPEG2]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_MP3],\r\n  [TSStreamType.VIDEO_H264]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_H264],\r\n  [TSStreamType.VIDEO_MPEG4]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_MPEG4],\r\n  [TSStreamType.VIDEO_HEVC]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_HEVC],\r\n  [TSStreamType.VIDEO_VVC]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_VVC],\r\n  [TSStreamType.AUDIO_AC3]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AC3],\r\n  [TSStreamType.AUDIO_EAC3]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_EAC3]\r\n}\r\n","/*\r\n * libmedia mpegts struct defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { TSStreamType } from './mpegts'\r\nimport { PID } from './type'\r\n\r\nexport class TSPacketAdaptationFieldInfo {\r\n  discontinuityIndicator: number = 0\r\n  randomAccessIndicator: number = 0\r\n  elementaryStreamPriorityIndicator: number = 0\r\n  pcrFlag: number = 0\r\n  opcrFlag: number = 0\r\n  splicingPointFlag: number = 0\r\n  transportPrivateDataFlag: number = 0\r\n  adaptationFieldExtensionFlag: number = 0\r\n  pcr: bigint = 0n\r\n  opcr: bigint = 0n\r\n  spliceCountDown: number = 0\r\n  transportPrivateData: Uint8Array = null\r\n  extension: Uint8Array = null\r\n}\r\n\r\nexport class TSPacket {\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n  payloadUnitStartIndicator: number = 0\r\n  transportPriority: number = 0\r\n  pid: PID = NOPTS_VALUE\r\n  adaptationFieldControl: number = 0\r\n  continuityCounter: number = 0\r\n  transportScramblingControl: number = 0\r\n  adaptationFieldInfo: TSPacketAdaptationFieldInfo = new TSPacketAdaptationFieldInfo()\r\n  payload: Uint8Array = null\r\n}\r\n\r\nexport class TSSliceQueue {\r\n  slices: Uint8Array[] = []\r\n  totalLength: number = 0\r\n  expectedLength: number = NOPTS_VALUE\r\n  randomAccessIndicator: number = 0\r\n  pid: PID = NOPTS_VALUE\r\n  streamType: TSStreamType = TSStreamType.NONE\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n}\r\n\r\nexport class PAT {\r\n  versionNumber: number = 0\r\n  networkPid: PID = NOPTS_VALUE\r\n  program2PmtPid: Map<number, PID> = new Map()\r\n}\r\n\r\nexport class SectionPacket extends TSPacket {\r\n}\r\n\r\nexport class ESDescriptor {\r\n  tag: number\r\n  buffer: Uint8Array\r\n}\r\n\r\nexport class PMT {\r\n  versionNumber: number = 0\r\n  programNumber: number = 0\r\n  pcrPid: PID = 0\r\n  pid2StreamType: Map<number, TSStreamType> = new Map()\r\n  pid2ESDescriptor: Map<number, ESDescriptor[]> = new Map()\r\n}\r\n\r\nexport class PES {\r\n  pid: PID = NOPTS_VALUE\r\n  streamType: TSStreamType = TSStreamType.NONE\r\n  streamId: number = NOPTS_VALUE\r\n  dts: bigint = NOPTS_VALUE_BIGINT\r\n  pts: bigint = NOPTS_VALUE_BIGINT\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n  payload: Uint8Array = null\r\n  data: Uint8Array = null\r\n  randomAccessIndicator: number = 0\r\n}\r\n","/*\r\n * libmedia get bytes by duration\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport AVStream from '../AVStream'\r\nimport * as array from 'common/util/array'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q } from 'avutil/constant'\r\n\r\nexport function getBytesByDuration(streams: AVStream[], duration: int64, timeBase: Rational) {\r\n  let bytes = 0n\r\n  array.each(streams, (st) => {\r\n    bytes += st.codecpar.bitRate * avRescaleQ(duration, timeBase, AV_MILLI_TIME_BASE_Q) / 8000n\r\n  })\r\n  return bytes\r\n}\r\n","/*\r\n * libmedia seek in bytes with timestamp\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVStream from '../AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { getBytesByDuration } from './getBytesByDuration'\r\nimport { createAVPacket, destroyAVPacket } from 'avutil/util/avpacket'\r\nimport * as errorType from 'avutil/error'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function seekInBytes(\r\n  context: AVIFormatContext,\r\n  stream: AVStream,\r\n  timestamp: int64,\r\n  firstPacketPos: int64,\r\n  readAVPacket: (context: AVIFormatContext, avpacket: pointer<AVPacket>) => Promise<int32>,\r\n  syncAVPacket: (context: AVIFormatContext) => Promise<void>\r\n) {\r\n\r\n  const now = context.ioReader.getPos()\r\n\r\n  const fileSize = await context.ioReader.fileSize()\r\n  let pos: int64 = NOPTS_VALUE_BIGINT\r\n  let duration = timestamp\r\n  if (stream.startTime !== NOPTS_VALUE_BIGINT) {\r\n    duration -= stream.startTime\r\n  }\r\n  else {\r\n    duration -= stream.firstDTS\r\n  }\r\n\r\n  const pointPts = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n\r\n  // 头十秒直接回到开始位置\r\n  if (pointPts < 10000n) {\r\n    logger.debug(`seek pts is earlier then 10s, seek to first packet pos(${firstPacketPos}) directly`)\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n\r\n  let bytes = getBytesByDuration(context.streams, duration, stream.timeBase)\r\n  // 最大到结尾往前 5 秒\r\n  const max = fileSize - getBytesByDuration(context.streams, 5000n, AV_MILLI_TIME_BASE_Q)\r\n  const length = getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  if (bytes > max) {\r\n    bytes = max\r\n  }\r\n  if (bytes < firstPacketPos) {\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n  const avpacket = createAVPacket()\r\n  let seekMax = fileSize\r\n  let seekMin = 0n\r\n\r\n  while (true) {\r\n    if (seekMax - seekMin < length) {\r\n      pos = seekMin\r\n      break\r\n    }\r\n    await context.ioReader.seek(bytes)\r\n    await syncAVPacket(context)\r\n    const now = context.ioReader.getPos()\r\n\r\n    let ret = await readAVPacket(context, avpacket)\r\n\r\n    if (ret >= 0) {\r\n      const currentPts = avRescaleQ(avpacket.pts, avpacket.timeBase, AV_MILLI_TIME_BASE_Q)\r\n      const diff = currentPts - pointPts\r\n\r\n      logger.debug(`try to seek to pos: ${bytes}, got packet pts: ${avpacket.pts}(${currentPts}ms), diff: ${diff}ms`)\r\n\r\n      // seek 时间戳的前面 10 秒内\r\n      if (diff <= 0n && -diff < 10000n) {\r\n        pos = now\r\n        break\r\n      }\r\n      // seek 后面\r\n      else if (diff > 0n) {\r\n        seekMax = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n      // seek 前面 10 秒外\r\n      else {\r\n        seekMin = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n    }\r\n    else {\r\n      break\r\n    }\r\n  }\r\n\r\n  destroyAVPacket(avpacket)\r\n\r\n  if (pos !== NOPTS_VALUE_BIGINT) {\r\n    logger.debug(`finally seek to pos ${pos}`)\r\n\r\n    await context.ioReader.seek(pos)\r\n    await syncAVPacket(context)\r\n    return now\r\n  }\r\n  else {\r\n    await context.ioReader.seek(now)\r\n  }\r\n\r\n  return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n}\r\n","/*\r\n * libmedia expgolomb util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\nimport BitWriter from 'common/io/BitWriter'\r\n\r\nconst UESizeTable = [\r\n  // 0 的二进制所需的比特个数\r\n  1,\r\n  // 1 的二进制所需的比特个数    \r\n  1,\r\n  // 2~3 的二进制所需的比特个数   \r\n  2, 2,\r\n  // 4~7 的二进制所需的比特个数\r\n  3, 3, 3, 3,\r\n  // 8~15 的二进制所需的比特个数\r\n  4, 4, 4, 4, 4, 4, 4, 4,\r\n  // 16~31 的二进制所需的比特个数\r\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\r\n  // 32~63 的二进制所需的比特个数\r\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\r\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\r\n  // 64~127 的二进制所需的比特个数\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  // 128~255 的二进制所需的比特个数\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\r\n]\r\n\r\n/**\r\n * ue(v) 指数哥伦布解码\r\n */\r\nexport function readUE(bitReader: BitReader) {\r\n  let result = 0\r\n  // leadingZeroBits\r\n  let i = 0\r\n\r\n  while (i < 32 && bitReader.readU1() === 0) {\r\n    i++\r\n  }\r\n  // 计算 read_bits ( leadingZeroBits )\r\n  result = bitReader.readU(i)\r\n  // 计算 codeNum，1 << i 即为 2 的 i 次幂\r\n  result += (1 << i) - 1\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * se(v) 有符号指数哥伦布解码\r\n */\r\nexport function readSE(bitReader: BitReader) {\r\n  let result = readUE(bitReader)\r\n\r\n  // 判断 result 的奇偶性\r\n  if (result & 0x01) {\r\n    // 如果为奇数，说明编码前 > 0\r\n    result = (result + 1) / 2\r\n  }\r\n  else {\r\n    // 如果为偶数，说明编码前 <= 0\r\n    result = -result / 2\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * te(v) 截断指数哥伦布解码\r\n */\r\nexport function readTE(bitReader: BitReader, x: number) {\r\n  let result = 0\r\n  // 判断取值上限\r\n  if (x === 1) {\r\n    // 如果为 1 则将读取到的比特值取反\r\n    result = 1 - bitReader.readU1()\r\n  }\r\n  else if (x > 1) {\r\n    // 否则按照 ue(v) 进行解码\r\n    result = readUE(bitReader)\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * ue(v) 指数哥伦布编码\r\n */\r\nexport function writeUE(bitWriter: BitWriter, value: number) {\r\n  let size = 0\r\n\r\n  if (value === 0) {\r\n    // 0 直接编码为 1\r\n    bitWriter.writeU1(1)\r\n  }\r\n  else {\r\n    let tmp = ++value\r\n    // 判断所需比特个数是否大于 16 位\r\n    if ( tmp >= 0x00010000 ) {\r\n      size += 16\r\n      tmp >>= 16\r\n    }\r\n\r\n    // 判断此时所需比特个数是否大于 8 位\r\n    if ( tmp >= 0x100 ) {\r\n      size += 8\r\n      tmp >>= 8\r\n    }\r\n    // 最终 tmp 移位至 8 位以内，去查表\r\n    size += UESizeTable[tmp]\r\n\r\n    // 最终得出编码 value 所需的总比特数：2 * size - 1\r\n    bitWriter.writeU(2 * size - 1, value)\r\n  }\r\n}\r\n\r\n/**\r\n * se(v) 有符号指数哥伦布编码\r\n */\r\nexport function writeSE(bitWriter: BitWriter, value: number) {\r\n  if (value <= 0) {\r\n    writeUE(bitWriter, -value * 2)\r\n  }\r\n  else {\r\n    writeUE(bitWriter, value * 2 - 1)\r\n  }\r\n}\r\n\r\n/**\r\n * te(v) 截断指数哥伦布编码\r\n */\r\nexport function writeTE(bitWriter: BitWriter, x: number, value: number) {\r\n  if (x === 1) {\r\n    bitWriter.writeU1(1 & ~value)\r\n  }\r\n  else if (x > 1) {\r\n    writeUE(bitWriter, value)\r\n  }\r\n}\r\n","/*\r\n * libmedia int read util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport function r8(p: pointer<void>): uint8 {\r\n  return accessof(reinterpret_cast<pointer<uint8>>(p))\r\n}\r\n\r\nexport function rl16(p: pointer<void>): uint16 {\r\n  return (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) | r8(p)\r\n}\r\n\r\nexport function rb16(p: pointer<void>): uint16 {\r\n  return (r8(p) << 8) | r8(reinterpret_cast<pointer<uint8>>(p + 1))\r\n}\r\n\r\nexport function rl24(p: pointer<void>): int32 {\r\n  return (r8(reinterpret_cast<pointer<uint8>>(p + 2)) << 16) | (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) + r8(p)\r\n}\r\n\r\nexport function rb24(p: pointer<void>): int32 {\r\n  return (r8(p) << 16) | (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) | r8(reinterpret_cast<pointer<uint8>>(p + 2))\r\n}\r\n\r\nexport function rl32(p: pointer<void>): int32 {\r\n  return (rl16(reinterpret_cast<pointer<uint8>>(p + 2)) << 16) | rl16(p)\r\n}\r\n\r\nexport function rb32(p: pointer<void>): int32 {\r\n  return (rb16(p) << 16) | rb16(reinterpret_cast<pointer<uint8>>(p + 2))\r\n}\r\n\r\nexport function rl64(p: pointer<void>): int64 {\r\n  return (BigInt(rl32(reinterpret_cast<pointer<uint8>>(p + 4))) << 32n) | BigInt(rl32(p))\r\n}\r\n\r\nexport function rb64(p: pointer<void>): int64 {\r\n  return (BigInt(rb32(p)) << 32n) | BigInt(rb32(reinterpret_cast<pointer<uint8>>(p + 4)))\r\n}\r\n","/*\r\n * libmedia nalu util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport * as array from 'common/util/array'\r\n\r\nexport function isAnnexb(data: Uint8ArrayInterface) {\r\n  return data.length > 4\r\n  && data[0] === 0\r\n  && data[1] === 0\r\n  && (\r\n    data[2] === 1\r\n    || data[2] === 0 && data[3] === 1\r\n  )\r\n}\r\n\r\nexport function getNextNaluStart(data: Uint8ArrayInterface, offset: number) {\r\n  let t = 0\r\n  for (let i = offset; i < data.length; i++) {\r\n    switch (data[i]) {\r\n      case 0:\r\n        t++\r\n        break\r\n      case 1:\r\n        if (t >= 2) {\r\n          return {\r\n            offset: i - Math.min(t, 3),\r\n            startCode: Math.min(t + 1, 4)\r\n          }\r\n        }\r\n        t = 0\r\n        break\r\n      default:\r\n        t = 0\r\n    }\r\n  }\r\n  return {\r\n    offset: -1,\r\n    startCode: 0\r\n  }\r\n}\r\n\r\nexport function splitNaluByStartCode<T extends Uint8ArrayInterface>(buffer: T): T[] {\r\n  const list = []\r\n  let offset = 0\r\n  let current = getNextNaluStart(buffer, offset)\r\n  let next = {\r\n    offset: -1,\r\n    startCode: 0\r\n  }\r\n  while (next = getNextNaluStart(buffer, current.offset + current.startCode), next.offset > -1) {\r\n    list.push(buffer.subarray(current.offset + current.startCode, next.offset, true))\r\n    current = next\r\n  }\r\n  list.push(buffer.subarray(current.offset + current.startCode, undefined, true))\r\n\r\n  return list\r\n}\r\n\r\nexport function splitNaluByLength<T extends Uint8ArrayInterface>(buffer: T, naluLengthSizeMinusOne: int32): T[] {\r\n  const list = []\r\n  const bufferReader = new BufferReader(buffer)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    const nalu = buffer.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length, true)\r\n    bufferReader.skip(length)\r\n    list.push(nalu)\r\n  }\r\n  return list\r\n}\r\n\r\nexport function joinNaluByStartCode(nalus: Uint8ArrayInterface[], output?: Uint8Array, slice: boolean = false): Uint8Array {\r\n  if (!output) {\r\n    let length = nalus.reduce((prev, nalu, index) => {\r\n      return prev + ((index && slice) ? 3 : 4) + nalu.length\r\n    }, 0)\r\n    output = new Uint8Array(length)\r\n  }\r\n\r\n  const bufferWriter = new BufferWriter(output)\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index && slice) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n  })\r\n\r\n  return output\r\n}\r\n\r\nexport function joinNaluByLength(nalus: Uint8Array[], naluLengthSizeMinusOne: int32, output?: Uint8Array): Uint8Array {\r\n  if (!output) {\r\n    const length = nalus.reduce((prev, nalu) => {\r\n      return prev + naluLengthSizeMinusOne + 1 + nalu.length\r\n    }, 0)\r\n    output = new Uint8Array(length)\r\n  }\r\n  const bufferWriter = new BufferWriter(output)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu)\r\n  })\r\n  return output\r\n}\r\n\r\nexport function naluUnescape(data: Uint8Array, start = 0, end?: number) {\r\n\r\n  if (!end) {\r\n    end = data.length\r\n  }\r\n\r\n  const buffer = new Uint8Array(data.length)\r\n\r\n  let zeroCount = 0\r\n  let pos = 0\r\n  for (let i = 0; i < data.length; i++) {\r\n    if (i >= start && i < end) {\r\n      if (data[i] === 0) {\r\n        zeroCount++\r\n      }\r\n      else {\r\n        if (data[i] === 3 && zeroCount === 2 && i + 1 < data.length && data[i + 1] <= 3) {\r\n          i++\r\n          if (i === data.length) {\r\n            break\r\n          }\r\n          else {\r\n            if (data[i] === 0) {\r\n              zeroCount = 1\r\n            }\r\n            else {\r\n              zeroCount = 0\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          zeroCount = 0\r\n        }\r\n      }\r\n    }\r\n    buffer[pos++] = data[i]\r\n  }\r\n\r\n  return buffer.slice(0, pos)\r\n}\r\n\r\nexport function naluEscape(data: Uint8Array, start: number = 0, end?: number) {\r\n  if (!end) {\r\n    end = data.length\r\n  }\r\n\r\n  const indexes = []\r\n  let zeroCount = 0\r\n  for (let i = start; i < end; i++) {\r\n\r\n    if (i >= end) {\r\n      break\r\n    }\r\n\r\n    if (data[i] === 0) {\r\n      zeroCount++\r\n    }\r\n    else {\r\n      if (data[i] <= 3 && zeroCount === 2) {\r\n        indexes.push(i)\r\n      }\r\n      zeroCount = 0\r\n    }\r\n  }\r\n\r\n  if (indexes.length) {\r\n    const buffer = new Uint8Array(data.length + indexes.length)\r\n    let pos = 0\r\n    let subData = data.subarray(0, indexes[0])\r\n    buffer.set(subData, pos)\r\n    pos += subData.length\r\n\r\n    buffer[pos++] = 3\r\n\r\n    for (let i = 1; i < indexes.length; i++) {\r\n      subData = data.subarray(indexes[i - 1], indexes[i])\r\n      buffer.set(subData, pos)\r\n      pos += subData.length\r\n      buffer[pos++] = 3\r\n    }\r\n\r\n    subData = data.subarray(indexes[indexes.length - 1], data.length)\r\n    buffer.set(subData, pos)\r\n    pos += subData.length\r\n\r\n    return buffer\r\n  }\r\n  else {\r\n    return data\r\n  }\r\n}\r\n","/**\r\n * bit 读取器\r\n */\r\n\r\nimport { IOError } from './error'\r\nimport * as logger from '../util/logger'\r\nimport { Uint8ArrayInterface } from './interface'\r\n\r\nexport default class BitReader {\r\n\r\n  private buffer: Uint8Array\r\n\r\n  private pointer: number\r\n\r\n  private bitsLeft: number\r\n\r\n  private size: number\r\n\r\n  private endPointer: number\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array) => number\r\n\r\n  /**\r\n   * @param data 待读取的字节\r\n   * @param bigEndian 是否按大端字节序读取，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024) {\r\n    this.pointer = 0\r\n    this.bitsLeft = 8\r\n\r\n    this.size = size\r\n    this.endPointer = 0\r\n    this.error = 0\r\n\r\n    this.buffer = new Uint8Array(this.size)\r\n  }\r\n\r\n  /**\r\n   * 不影响原读取操作的情况下，读取 1 个比特\r\n   */\r\n  public peekU1() {\r\n    let result = 0\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitsLeft === 0) {\r\n      this.flush()\r\n    }\r\n\r\n    let pointer = this.pointer\r\n    let bitsLeft = this.bitsLeft\r\n\r\n    if (bitsLeft === 0) {\r\n      pointer++\r\n      bitsLeft = 8\r\n    }\r\n\r\n    result = (this.buffer[pointer] >> (bitsLeft - 1)) & 0x01\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 读取 1 个比特\r\n   */\r\n  public readU1() {\r\n    let result = 0\r\n\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitsLeft === 0) {\r\n      this.flush()\r\n    }\r\n\r\n    this.bitsLeft--\r\n\r\n    result = (this.buffer[this.pointer] >> this.bitsLeft) & 0x01\r\n\r\n    if (this.bitsLeft === 0) {\r\n      this.pointer++\r\n      this.bitsLeft = 8\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 读取 n 个比特\r\n   * \r\n   * @param n\r\n   */\r\n  public readU(n: number) {\r\n    let result = 0\r\n    for (let i = 0; i < n; i++) {\r\n      result |= (this.readU1() << (n - i - 1))\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可读字节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.endPointer - this.pointer\r\n  }\r\n\r\n  public getPos() {\r\n    return this.pointer\r\n  }\r\n\r\n  public skip(n: number) {\r\n    const byte = (n - (n % 8)) / 8\r\n\r\n    this.pointer += byte\r\n\r\n    const bitsLeft = n % 8\r\n\r\n    if (this.bitsLeft <= bitsLeft) {\r\n      this.pointer++\r\n      this.bitsLeft = 8 - (bitsLeft - this.bitsLeft)\r\n    }\r\n    else {\r\n      this.bitsLeft -= bitsLeft\r\n    }\r\n  }\r\n\r\n  public flush() {\r\n\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOReader error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.bitsLeft === 0) {\r\n      this.pointer++\r\n    }\r\n\r\n    if (this.size - this.remainingLength() <= 0) {\r\n      return\r\n    }\r\n\r\n    if (this.pointer < this.endPointer) {\r\n      this.buffer.set(this.buffer.subarray(this.pointer, this.endPointer), 0)\r\n\r\n      const len = this.onFlush(this.buffer.subarray(this.endPointer - this.pointer, this.size))\r\n\r\n      if (len < 0) {\r\n        this.error = len\r\n        throw Error('IOReader error, flush failed')\r\n      }\r\n\r\n      this.endPointer = this.endPointer - this.pointer + len\r\n      this.pointer = 0\r\n    }\r\n    else {\r\n      const len = this.onFlush(this.buffer)\r\n\r\n      this.endPointer = len\r\n      this.pointer = 0\r\n      this.bitsLeft = 8\r\n\r\n      if (len < 0) {\r\n        this.error = len\r\n        throw Error('IOReader error, flush failed')\r\n      }\r\n    }\r\n  }\r\n\r\n  public getBuffer() {\r\n    return this.buffer\r\n  }\r\n\r\n  public appendBuffer(buffer: Uint8ArrayInterface) {\r\n    if (this.size - this.endPointer >= buffer.length) {\r\n      this.buffer.set(buffer, this.endPointer)\r\n      this.endPointer += buffer.length\r\n    }\r\n    else {\r\n      this.buffer.set(this.buffer.subarray(this.pointer, this.endPointer), 0)\r\n      this.endPointer = this.endPointer - this.pointer\r\n      this.pointer = 0\r\n\r\n      if (this.size - this.endPointer >= buffer.length) {\r\n        this.buffer.set(buffer, this.endPointer)\r\n        this.endPointer += buffer.length\r\n      }\r\n      else {\r\n        const len = Math.min(this.size - this.endPointer, buffer.length)\r\n        this.buffer.set(buffer.subarray(0, len), this.endPointer)\r\n        this.endPointer += len\r\n\r\n        logger.warn('BSReader, call appendBuffer but the buffer\\'s size is lagger then the remaining size')\r\n      }\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    this.pointer = this.endPointer = 0\r\n    this.bitsLeft = 8\r\n    this.error = 0\r\n  }\r\n\r\n  public skipPadding() {\r\n    if (this.bitsLeft < 8) {\r\n      this.bitsLeft = 8\r\n      this.pointer++\r\n    }\r\n  }\r\n}\r\n","/**\r\n * bit 写存器\r\n */\r\n\r\nimport { IOError } from './error'\r\n\r\n/**\r\n * 写字节流工具\r\n */\r\n\r\nexport default class BitWriter {\r\n\r\n  private buffer: Uint8Array\r\n\r\n  private pointer: number\r\n\r\n  private bitPointer: number\r\n\r\n  private size: number\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array, pos?: number) => number\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024) {\r\n    this.pointer = 0\r\n    this.bitPointer = 0\r\n    this.size = size\r\n    this.error = 0\r\n\r\n    this.buffer = new Uint8Array(this.size)\r\n  }\r\n\r\n  /**\r\n   * 写一个 bit\r\n   * \r\n   * @param bit \r\n   */\r\n  public writeU1(bit: number) {\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitPointer >= 8) {\r\n      this.flush()\r\n    }\r\n\r\n    if (bit & 0x01) {\r\n      this.buffer[this.pointer] |= (1 << (7 - this.bitPointer))\r\n    }\r\n    else {\r\n      this.buffer[this.pointer] &= ~(1 << (7 - this.bitPointer))\r\n    }\r\n\r\n\r\n    this.bitPointer++\r\n\r\n    if (this.bitPointer === 8) {\r\n      this.pointer++\r\n      this.bitPointer = 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 n 个比特\r\n   * \r\n   * @param n\r\n   */\r\n  public writeU(n: number, v: number) {\r\n    for (let i = 0; i < n; i++) {\r\n      this.writeU1(v >> (n - i - 1 ) & 0x01)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.size - this.pointer\r\n  }\r\n\r\n  public flush() {\r\n\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('BSWriter error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.pointer) {\r\n      if (this.bitPointer && this.pointer > 1) {\r\n        const ret = this.onFlush(this.buffer.subarray(0, this.pointer - 1))\r\n        if (ret !== 0) {\r\n          this.error = ret\r\n          throw Error('BSWriter error, flush failed')\r\n        }\r\n        this.buffer[0] = this.buffer[this.pointer]\r\n      }\r\n      else if (this.bitPointer === 0) {\r\n        const ret = this.onFlush(this.buffer.subarray(0, this.pointer))\r\n        if (ret !== 0) {\r\n          this.error = ret\r\n          throw Error('BSWriter error, flush failed')\r\n        }\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  public padding() {\r\n    while (this.bitPointer !== 0) {\r\n      this.writeU1(0)\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    this.pointer = 0\r\n    this.bitPointer = 0\r\n    this.error = 0\r\n  }\r\n\r\n  public getBuffer() {\r\n    return this.buffer\r\n  }\r\n\r\n  public getPointer() {\r\n    return this.pointer\r\n  }\r\n}\r\n","/**\r\n * 写字节流工具\r\n */\r\n\r\nimport * as logger from '../util/logger'\r\nimport { Uint8ArrayInterface, BytesWriterSync } from './interface'\r\nimport * as text from '../util/text'\r\n\r\nexport default class BufferWriter implements BytesWriterSync {\r\n\r\n  private data: DataView\r\n\r\n  private buffer: Uint8ArrayInterface\r\n\r\n  private byteStart: number\r\n\r\n  private pos: number\r\n\r\n  private size: number\r\n\r\n  private littleEndian: boolean\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   * @param bigEndian 是否按大端字节序写，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(data: Uint8ArrayInterface, bigEndian: boolean = true) {\r\n    this.buffer = data\r\n    this.data = data instanceof Uint8Array ? new DataView(data.buffer) : data.view\r\n    this.byteStart = data instanceof Uint8Array ? data.byteOffset : 0\r\n    this.pos = 0\r\n    this.size = data.byteLength\r\n    this.littleEndian = !bigEndian\r\n  }\r\n\r\n  /**\r\n   * 写 8 位无符号整数\r\n   */\r\n  public writeUint8(value: number) {\r\n    this.data.setUint8(this.pos++ + this.byteStart, value)\r\n  }\r\n\r\n  /**\r\n   * 读取 16 位无符号整数\r\n   */\r\n  public writeUint16(value: number) {\r\n    this.data.setUint16(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 2\r\n  }\r\n\r\n  /**\r\n   * 写 24 位无符号整数\r\n   */\r\n  public writeUint24(value: number) {\r\n    const high = value & 0xf00\r\n    const middle = value & 0x0f0\r\n    const low = value & 0x00f\r\n    if (this.littleEndian) {\r\n      this.writeUint8(low)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(high)\r\n    }\r\n    else {\r\n      this.writeUint8(high)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(low)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 32 位无符号整数\r\n   */\r\n  public writeUint32(value: number) {\r\n    this.data.setUint32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写 64 位无符号整数\r\n   */\r\n  public writeUint64(value: bigint) {\r\n    const low = value & 0xffffffffn\r\n    const high = (value & (0xffffffffn << 32n)) >> 32n\r\n    if (this.littleEndian) {\r\n      this.writeUint32(Number(low))\r\n      this.writeUint32(Number(high))\r\n    }\r\n    else {\r\n      this.writeUint32(Number(high))\r\n      this.writeUint32(Number(low))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 8 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeInt8(value: number) {\r\n    this.data.setInt8(this.pos++ + this.byteStart, value)\r\n  }\r\n\r\n  /**\r\n   * 写 16 位有符号整数\r\n   */\r\n  public writeInt16(value: number) {\r\n    this.data.setInt16(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 2\r\n  }\r\n\r\n  /**\r\n   * 写 32 位有符号整数\r\n   */\r\n  public writeInt32(value: number) {\r\n    this.data.setInt32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写 64 位有符号整数\r\n   */\r\n  public writeInt64(value: bigint) {\r\n    const low = value & BigInt(0xffffffff)\r\n    const high = (value & (BigInt(0xffffffff) << 32n)) >> 32n\r\n    if (this.littleEndian) {\r\n      this.writeInt32(Number(low))\r\n      this.writeInt32(Number(high))\r\n    }\r\n    else {\r\n      this.writeInt32(Number(high))\r\n      this.writeInt32(Number(low))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写单精度浮点数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeFloat(value: number) {\r\n    this.data.setFloat32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写双精度浮点数\r\n   */\r\n  public writeDouble(value: number) {\r\n    this.data.setFloat64(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 8\r\n  }\r\n\r\n  /**\r\n   * 获取当前写指针\r\n   * \r\n   * @returns \r\n   */\r\n  public getPos() {\r\n    return this.pos\r\n  }\r\n\r\n  /**\r\n   * seek 写指针\r\n   * \r\n   * @param pos \r\n   */\r\n  public seek(pos: number) {\r\n    if (pos > this.size) {\r\n      pos = this.size\r\n    }\r\n    this.pos = Math.max(0, pos)\r\n  }\r\n\r\n  /**\r\n   * 跳过指定字节长度\r\n   * \r\n   * @param length \r\n   */\r\n  public skip(length: number) {\r\n    this.seek(this.pos + length)\r\n  }\r\n\r\n  /**\r\n   * 返回指定字节长度\r\n   * \r\n   * @param length \r\n   */\r\n  public back(length: number) {\r\n    this.seek(this.pos - length)\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingSize() {\r\n    return this.size - this.pos\r\n  }\r\n\r\n  /**\r\n   * 写指定长度的二进制 buffer 数据\r\n   * \r\n   * @param length \r\n   * @returns \r\n   */\r\n  public writeBuffer(buffer: Uint8ArrayInterface) {\r\n    let length = buffer.length\r\n    if (this.remainingSize() < length) {\r\n      length = this.remainingSize()\r\n      logger.warn(`the remaining buffer size is smaller then the wrote buffer, hope set ${buffer.length}, but set ${length}`)\r\n    }\r\n    this.buffer.set(buffer, this.pos)\r\n    this.pos += buffer.length\r\n  }\r\n\r\n  /**\r\n   * 写一个字符串\r\n   */\r\n  public writeString(str: string) {\r\n    const buffer = text.encode(str)\r\n    this.writeBuffer(buffer)\r\n    return buffer.length\r\n  }\r\n\r\n  public getWroteBuffer() {\r\n    return this.buffer.subarray(0, this.pos)\r\n  }\r\n\r\n  public resetBuffer(data: Uint8ArrayInterface, bigEndian: boolean = true) {\r\n    this.buffer = data\r\n    this.data = data instanceof Uint8Array ? new DataView(data.buffer) : data.view\r\n    this.byteStart = data instanceof Uint8Array ? data.byteOffset : 0\r\n\r\n    this.pos = 0\r\n    this.size = data.byteLength\r\n    this.littleEndian = !bigEndian\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}