{"version":3,"file":"src_avformat_formats_IMovFormat_ts.avplayer.js","mappings":"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pB,CAAE,EAAE,EAAI,EAAE,EAAI,GAAG,CAAG;IACpB,CAAE,EAAE,EAAI,EAAE,EAAI,GAAG,CAAG;IACpB,CAAE,EAAE,EAAI,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,EAAE,EAAI,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAA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","sources":["webpack://AVPlayer/./src/avformat/codecs/aac.ts","webpack://AVPlayer/./src/avformat/codecs/ac3.ts","webpack://AVPlayer/./src/avformat/codecs/av1.ts","webpack://AVPlayer/./src/avformat/codecs/h264.ts","webpack://AVPlayer/./src/avformat/codecs/hevc.ts","webpack://AVPlayer/./src/avformat/codecs/opus.ts","webpack://AVPlayer/./src/avformat/codecs/vp9.ts","webpack://AVPlayer/./src/avformat/codecs/vvc.ts","webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/IMovFormat.ts","webpack://AVPlayer/./src/avformat/formats/mov/boxType.ts","webpack://AVPlayer/./src/avformat/formats/mov/function/buildFragmentIndex.ts","webpack://AVPlayer/./src/avformat/formats/mov/function/buildIndex.ts","webpack://AVPlayer/./src/avformat/formats/mov/function/createFragmentTrack.ts","webpack://AVPlayer/./src/avformat/formats/mov/function/createMovContext.ts","webpack://AVPlayer/./src/avformat/formats/mov/function/createMovStreamContext.ts","webpack://AVPlayer/./src/avformat/formats/mov/function/getNextSample.ts","webpack://AVPlayer/./src/avformat/formats/mov/imov.ts","webpack://AVPlayer/./src/avformat/formats/mov/mov.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/av1c.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/avcc.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/co64.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/colr.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/ctts.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/dac3.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/dec3.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/dfla.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/dops.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/esds.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/hdlr.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/hvcc.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/mdhd.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/mfhd.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/mvhd.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/parsers.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/stco.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/stsc.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/stsd.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/stss.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/stsz.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/stts.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/stz2.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/tfdt.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/tfhd.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/tkhd.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/trex.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/trun.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/vpcc.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/vvcc.ts","webpack://AVPlayer/./src/avformat/formats/mov/parsing/wave.ts","webpack://AVPlayer/./src/avformat/function/mktag.ts","webpack://AVPlayer/./src/avutil/util/av1syntax.ts","webpack://AVPlayer/./src/avutil/util/expgolomb.ts","webpack://AVPlayer/./src/avutil/util/intread.ts","webpack://AVPlayer/./src/avutil/util/nalu.ts","webpack://AVPlayer/./src/common/io/BitReader.ts","webpack://AVPlayer/./src/common/io/BitWriter.ts","webpack://AVPlayer/./src/common/io/BufferWriter.ts"],"sourcesContent":["/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'HE'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)] ?? 48000\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f] ?? 2\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((codecpar.profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia ac3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AV_CH_LAYOUT } from 'avutil/audiosamplefmt'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport BitReader from 'common/io/BitReader'\r\n\r\nexport const enum AC3DeltaStrategy {\r\n  DBA_REUSE = 0,\r\n  DBA_NEW,\r\n  DBA_NONE,\r\n  DBA_RESERVED\r\n}\r\n\r\nexport const enum AC3ChannelMode {\r\n  AC3_CHMODE_DUALMONO = 0,\r\n  AC3_CHMODE_MONO,\r\n  AC3_CHMODE_STEREO,\r\n  AC3_CHMODE_3F,\r\n  AC3_CHMODE_2F1R,\r\n  AC3_CHMODE_3F1R,\r\n  AC3_CHMODE_2F2R,\r\n  AC3_CHMODE_3F2R\r\n}\r\n\r\nexport const enum AC3DolbySurroundMode {\r\n  AC3_DSURMOD_NOTINDICATED = 0,\r\n  AC3_DSURMOD_OFF,\r\n  AC3_DSURMOD_ON,\r\n  AC3_DSURMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3DolbySurroundEXMode {\r\n  AC3_DSUREXMOD_NOTINDICATED = 0,\r\n  AC3_DSUREXMOD_OFF,\r\n  AC3_DSUREXMOD_ON,\r\n  AC3_DSUREXMOD_PLIIZ\r\n}\r\n\r\nexport const enum AC3DolbyHeadphoneMode {\r\n  AC3_DHEADPHONMOD_NOTINDICATED = 0,\r\n  AC3_DHEADPHONMOD_OFF,\r\n  AC3_DHEADPHONMOD_ON,\r\n  AC3_DHEADPHONMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3PreferredStereoDownmixMode {\r\n  AC3_DMIXMOD_NOTINDICATED = 0,\r\n  AC3_DMIXMOD_LTRT,\r\n  AC3_DMIXMOD_LORO,\r\n  AC3_DMIXMOD_DPLII // reserved value in A/52, but used by encoders to indicate DPL2\r\n}\r\n\r\nexport const enum EAC3FrameType {\r\n  EAC3_FRAME_TYPE_INDEPENDENT = 0,\r\n  EAC3_FRAME_TYPE_DEPENDENT,\r\n  EAC3_FRAME_TYPE_AC3_CONVERT,\r\n  EAC3_FRAME_TYPE_RESERVED\r\n}\r\n\r\nexport const AC3ChannelLayout = [\r\n  AV_CH_LAYOUT.AV_CH_LAYOUT_STEREO,\r\n  AV_CH_LAYOUT.AV_CH_LAYOUT_MONO,\r\n  AV_CH_LAYOUT.AV_CH_LAYOUT_STEREO,\r\n  AV_CH_LAYOUT.AV_CH_LAYOUT_SURROUND,\r\n  AV_CH_LAYOUT.AV_CH_LAYOUT_2_1,\r\n  AV_CH_LAYOUT.AV_CH_LAYOUT_4POINT0,\r\n  AV_CH_LAYOUT.AV_CH_LAYOUT_2_2,\r\n  AV_CH_LAYOUT.AV_CH_LAYOUT_5POINT0\r\n]\r\n\r\nexport interface AC3HeaderInfo {\r\n  syncWord: uint16\r\n  crc1: uint16\r\n  srCode: uint8\r\n  bitstreamId: uint8\r\n  bitstreamMode: uint8\r\n  channelMode: uint8\r\n  lfeOn: uint8\r\n  frameType: uint8\r\n  substreamId: int32\r\n  centerMixLevel: int32\r\n  surroundMixLevel: int32\r\n  channelMap: uint16\r\n  numBlocks: int32\r\n  dolbySurroundMode: int32\r\n  srShift: uint8\r\n  sampleRate: uint16\r\n  bitRate: uint32\r\n  channels: uint8\r\n  frameSize: uint16\r\n  channelLayout: uint64\r\n  ac3BitrateCode: int8\r\n}\r\n\r\nconst AC3FrameSizeTab = [\r\n  [ 64,   69,   96   ],\r\n  [ 64,   70,   96   ],\r\n  [ 80,   87,   120  ],\r\n  [ 80,   88,   120  ],\r\n  [ 96,   104,  144  ],\r\n  [ 96,   105,  144  ],\r\n  [ 112,  121,  168  ],\r\n  [ 112,  122,  168  ],\r\n  [ 128,  139,  192  ],\r\n  [ 128,  140,  192  ],\r\n  [ 160,  174,  240  ],\r\n  [ 160,  175,  240  ],\r\n  [ 192,  208,  288  ],\r\n  [ 192,  209,  288  ],\r\n  [ 224,  243,  336  ],\r\n  [ 224,  244,  336  ],\r\n  [ 256,  278,  384  ],\r\n  [ 256,  279,  384  ],\r\n  [ 320,  348,  480  ],\r\n  [ 320,  349,  480  ],\r\n  [ 384,  417,  576  ],\r\n  [ 384,  418,  576  ],\r\n  [ 448,  487,  672  ],\r\n  [ 448,  488,  672  ],\r\n  [ 512,  557,  768  ],\r\n  [ 512,  558,  768  ],\r\n  [ 640,  696,  960  ],\r\n  [ 640,  697,  960  ],\r\n  [ 768,  835,  1152 ],\r\n  [ 768,  836,  1152 ],\r\n  [ 896,  975,  1344 ],\r\n  [ 896,  976,  1344 ],\r\n  [ 1024, 1114, 1536 ],\r\n  [ 1024, 1115, 1536 ],\r\n  [ 1152, 1253, 1728 ],\r\n  [ 1152, 1254, 1728 ],\r\n  [ 1280, 1393, 1920 ],\r\n  [ 1280, 1394, 1920 ],\r\n]\r\n\r\nconst CenterLevelsTab = [4, 5, 6, 5]\r\nconst SurroundLevelsTab = [4, 6, 7, 6]\r\nconst AC3SampleRateTab = [48000, 44100, 32000, 0]\r\nconst AC3BitrateTab = [\r\n  32, 40, 48, 56, 64, 80, 96, 112, 128,\r\n  160, 192, 224, 256, 320, 384, 448, 512, 576, 640\r\n]\r\nconst AC3ChannelsTab = [\r\n  2, 1, 2, 3, 3, 4, 4, 5\r\n]\r\n\r\nconst EAC3Blocks = [\r\n  1, 2, 3, 6\r\n]\r\n\r\nconst AC3_HEADER_SIZE = 7\r\n\r\nexport function parseHeader(buf: pointer<uint8>, size: size) {\r\n  const bitReader = new BitReader(size)\r\n  bitReader.appendBuffer(mapUint8Array(buf, size))\r\n\r\n  const info: AC3HeaderInfo = {\r\n    syncWord: 0,\r\n    crc1: 0,\r\n    srCode: 0,\r\n    bitstreamId: 0,\r\n    bitstreamMode: 0,\r\n    channelMode: 0,\r\n    lfeOn: 0,\r\n    frameType: 0,\r\n    substreamId: 0,\r\n    centerMixLevel: 0,\r\n    surroundMixLevel: 0,\r\n    channelMap: 0,\r\n    numBlocks: 0,\r\n    dolbySurroundMode: 0,\r\n    srShift: 0,\r\n    sampleRate: 0,\r\n    bitRate: 0,\r\n    channels: 0,\r\n    frameSize: 0,\r\n    channelLayout: 0n,\r\n    ac3BitrateCode: 0\r\n  }\r\n\r\n  info.syncWord = bitReader.readU(16)\r\n\r\n  if (info.syncWord !== 0x0B77) {\r\n    return -1\r\n  }\r\n\r\n  info.bitstreamId = bitReader.readU(29) & 0x1f\r\n\r\n  if (info.bitstreamId > 16) {\r\n    return -2\r\n  }\r\n\r\n  info.numBlocks = 6\r\n  info.ac3BitrateCode = -1\r\n  info.centerMixLevel = 5\r\n  info.surroundMixLevel = 6\r\n\r\n  info.dolbySurroundMode = AC3DolbySurroundMode.AC3_DSURMOD_NOTINDICATED\r\n\r\n  if (info.bitstreamId <= 10) {\r\n    info.crc1 = bitReader.readU(16)\r\n    info.srCode = bitReader.readU(2)\r\n\r\n    if (info.srCode === 3) {\r\n      return -3\r\n    }\r\n\r\n    const frameSizeCode = bitReader.readU(6)\r\n    if(frameSizeCode > 37) {\r\n      return -4\r\n    }\r\n\r\n    info.ac3BitrateCode = (frameSizeCode >> 1)\r\n\r\n    bitReader.readU(5)\r\n\r\n    info.bitstreamMode = bitReader.readU(3)\r\n    info.channelMode = bitReader.readU(3)\r\n\r\n    if (info.channelMode == AC3ChannelMode.AC3_CHMODE_STEREO) {\r\n      info.dolbySurroundMode = bitReader.readU(2)\r\n    }\r\n    else {\r\n      if ((info.channelMode & 1) && info.channelMode != AC3ChannelMode.AC3_CHMODE_MONO) {\r\n        info.centerMixLevel = CenterLevelsTab[bitReader.readU(2)]\r\n      }\r\n      if (info.channelMode & 4) {\r\n        info.surroundMixLevel = SurroundLevelsTab[bitReader.readU(2)]\r\n      }\r\n    }\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.srShift = Math.max(info.bitstreamId, 8) - 8\r\n    info.sampleRate = AC3SampleRateTab[info.srCode] >> info.srShift\r\n    info.bitRate = (AC3BitrateTab[info.ac3BitrateCode] * 1000) >> info.srShift\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn;\r\n    info.frameSize = AC3FrameSizeTab[frameSizeCode][info.srCode] * 2\r\n    info.frameType = EAC3FrameType.EAC3_FRAME_TYPE_AC3_CONVERT\r\n    info.substreamId = 0\r\n  }\r\n  else {\r\n    /* Enhanced AC-3 */\r\n    info.crc1 = 0\r\n    info.frameType = bitReader.readU(2)\r\n    if(info.frameType == EAC3FrameType.EAC3_FRAME_TYPE_RESERVED) {\r\n      return -5\r\n    }\r\n    info.substreamId = bitReader.readU(3)\r\n\r\n    info.frameSize = (bitReader.readU(11) + 1) << 1\r\n    if(info.frameSize < AC3_HEADER_SIZE) {\r\n      return -6\r\n    }\r\n\r\n    info.srCode = bitReader.readU(2)\r\n    if (info.srCode == 3) {\r\n      const srCode2 = bitReader.readU(2)\r\n      if(srCode2 == 3) {\r\n        return -7\r\n      }\r\n      info.sampleRate = AC3SampleRateTab[srCode2] / 2\r\n      info.srShift = 1\r\n    }\r\n    else {\r\n      info.numBlocks = EAC3Blocks[bitReader.readU(2)]\r\n      info.sampleRate = AC3SampleRateTab[info.srCode]\r\n      info.srShift = 0\r\n    }\r\n\r\n    info.channelMode = bitReader.readU(3)\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.bitRate = 8 * info.frameSize * info.sampleRate / (info.numBlocks * 256)\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n  }\r\n  info.channelLayout = static_cast<uint64>(AC3ChannelLayout[info.channelMode])\r\n  if (info.lfeOn) {\r\n    info.channelLayout |= static_cast<uint64>(AV_CH_LAYOUT.AV_CH_LOW_FREQUENCY)\r\n  }\r\n\r\n  return info\r\n}","/*\r\n * libmedia av1 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as av1syntax from 'avutil/util/av1syntax'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { PixelFormatDescriptorsMap } from 'avutil/pixelFormatDescriptor'\r\n\r\nexport const enum AV1Profile {\r\n  Main,\r\n  High,\r\n  Professional\r\n}\r\n\r\nexport const enum OBUType {\r\n  Reserved,\r\n  SEQUENCE_HEADER,\r\n  TEMPORAL_DELIMITER,\r\n  FRAME_HEADER,\r\n  TILE_GROUP,\r\n  METADATA,\r\n  FRAME,\r\n  REDUNDANT_FRAME_HEADER,\r\n  TILE_LIST,\r\n  PADDING = 15\r\n}\r\n\r\nexport const AV1Profile2Name: Record<AV1Profile, string> = {\r\n  [AV1Profile.Main]: 'Main',\r\n  [AV1Profile.High]: 'High',\r\n  [AV1Profile.Professional]: 'Professional'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 20, maxResolution: 2048 * 1152 },\r\n  { level: 21, maxResolution: 2816 * 1584 },\r\n  { level: 30, maxResolution: 4352 * 2448 },\r\n  { level: 31, maxResolution: 5504 * 3096 },\r\n  { level: 40, maxResolution: 6144 * 3456 },\r\n  { level: 41, maxResolution: 6144 * 3456 },\r\n  { level: 50, maxResolution: 8192 * 4352 },\r\n  { level: 51, maxResolution: 8192 * 4352 },\r\n  { level: 52, maxResolution: 8192 * 4352 },\r\n  { level: 53, maxResolution: 8192 * 4352 },\r\n  { level: 60, maxResolution: 16384 * 8704 },\r\n  { level: 61, maxResolution: 16384 * 8704 },\r\n  { level: 62, maxResolution: 16384 * 8704 },\r\n  { level: 63, maxResolution: 16384 * 8704 }\r\n]\r\n\r\nexport const AV1LevelIdx = [20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43, 50, 51, 52, 53, 60, 61, 62, 63, 70, 71, 72, 73]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height;\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 4) {\r\n    const params = parseExtraData(extradata)\r\n\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 bit marker\r\n * - 7 bit version\r\n * - 3 bit profile\r\n * - 5 bit level\r\n * - 1 bit tier\r\n * - 1 bit bitdepth > 8\r\n * - 1 bit bitdepth == 12\r\n * - 1 bit monochrome\r\n * - 1 bit chroma_subsampling_x\r\n * - 1 bit chroma_subsampling_y\r\n * - 2 bit chroma_sample_position\r\n * - 8 bit padding\r\n * \r\n * @param header \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  // marker\r\n  bitReader.readU1()\r\n  // version\r\n  bitReader.readU(7)\r\n\r\n  const profile = bitReader.readU(3)\r\n  const level = bitReader.readU(5)\r\n  const tier = bitReader.readU1()\r\n  let bitDepth = bitReader.readU1() ? 10 : 8\r\n  if (bitReader.readU1()) {\r\n    bitDepth = 12\r\n  }\r\n  const monochrome = bitReader.readU1()\r\n  const chromaSubsamplingX = bitReader.readU1()\r\n  const chromaSubsamplingY = bitReader.readU1()\r\n  const chromaSamplePosition = bitReader.readU(2)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    tier,\r\n    bitDepth,\r\n    monochrome,\r\n    chromaSubsamplingX,\r\n    chromaSubsamplingY,\r\n    chromaSamplePosition\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport function parseSequenceHeader(header: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(header.length)\r\n  bitReader.appendBuffer(header)\r\n\r\n  bitReader.readU1()\r\n  bitReader.readU(4)\r\n  const extensionFlag = bitReader.readU1()\r\n  const hasSizeFlag = bitReader.readU1()\r\n  // obu_reserved_1bit\r\n  bitReader.readU1()\r\n  if (extensionFlag) {\r\n    bitReader.readU(8)\r\n  }\r\n  if (hasSizeFlag) {\r\n    av1syntax.leb128(bitReader)\r\n  }\r\n\r\n  const seq_profile =\tav1syntax.f(bitReader, 3)\r\n  const still_picture =\tav1syntax.f(bitReader, 1)\r\n  const reduced_still_picture_header = av1syntax.f(bitReader, 1)\r\n\r\n  let timing_info_present_flag = 0\r\n  let decoder_model_info_present_flag = 0\r\n  let initial_display_delay_present_flag = 0\r\n  let operating_points_cnt_minus_1 = 0\r\n  let operating_point_idc: number[] = [0]\r\n  let seq_level_idx: number[] = [0]\r\n  let seq_tier: number[] = [0]\r\n  let decoder_model_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_minus_1: number[] = [0]\r\n  let buffer_delay_length_minus_1 = 0\r\n  let decoder_buffer_delay: number[] = [0]\r\n  let encoder_buffer_delay: number[] = [0]\r\n  let low_delay_mode_flag: number[] = [0]\r\n\r\n  if (reduced_still_picture_header) {\r\n    seq_level_idx[0] = av1syntax.f(bitReader, 5)\r\n  }\r\n  else {\r\n    timing_info_present_flag = av1syntax.f(bitReader, 1)\r\n    if (timing_info_present_flag) {\r\n\r\n      let num_units_in_display_tick =\tav1syntax.f(bitReader, 32)\r\n      let time_scale = av1syntax.f(bitReader, 32)\r\n      let equal_picture_interval = av1syntax.f(bitReader, 1)\r\n      if (equal_picture_interval) {\r\n        let num_ticks_per_picture_minus_1 = av1syntax.uvlc(bitReader)\r\n      }\r\n\r\n      let decoder_model_info_present_flag =\tav1syntax.f(bitReader, 1)\r\n      if (decoder_model_info_present_flag) {\r\n        buffer_delay_length_minus_1 =\tav1syntax.f(bitReader, 5)\r\n        let num_units_in_decoding_tick = av1syntax.f(bitReader, 32)\r\n        let buffer_removal_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n        let frame_presentation_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n      }\r\n    }\r\n    else {\r\n      decoder_model_info_present_flag = 0\r\n    }\r\n    let initial_display_delay_present_flag = av1syntax.f(bitReader, 1)\r\n    let operating_points_cnt_minus_1 = av1syntax.f(bitReader, 5)\r\n    for (let i = 0; i <= operating_points_cnt_minus_1; i++ ) {\r\n      operating_point_idc[i] = av1syntax.f(bitReader, 12)\r\n      seq_level_idx[i] = av1syntax.f(bitReader, 5)\r\n      if (seq_level_idx[i] > 7) {\r\n        seq_tier[i] = av1syntax.f(bitReader, 1)\r\n      }\r\n      else {\r\n        seq_tier[i] = 0\r\n      }\r\n      if (decoder_model_info_present_flag) {\r\n        decoder_model_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if (decoder_model_present_for_this_op[i]) {\r\n          let n = buffer_delay_length_minus_1 + 1\r\n          decoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          encoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          low_delay_mode_flag[i] = av1syntax.f(bitReader, 1)\r\n        }\r\n      }\r\n      else {\r\n        decoder_model_present_for_this_op[i] = 0\r\n      }\r\n      if (initial_display_delay_present_flag) {\r\n        initial_display_delay_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if ( initial_display_delay_present_for_this_op[i] ) {\r\n          initial_display_delay_minus_1[i] = av1syntax.f(bitReader, 4)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let frame_width_bits_minus_1 = av1syntax.f(bitReader, 4)\r\n  let frame_height_bits_minus_1 =\tav1syntax.f(bitReader, 4)\r\n  let n = frame_width_bits_minus_1 + 1\r\n  let max_frame_width_minus_1 =\tav1syntax.f(bitReader, n)\r\n  n = frame_height_bits_minus_1 + 1\r\n  let max_frame_height_minus_1 = av1syntax.f(bitReader, n)\r\n  let frame_id_numbers_present_flag = 0\r\n  let delta_frame_id_length_minus_2 = 0\r\n  let additional_frame_id_length_minus_1 = 0\r\n  if (reduced_still_picture_header ) {\r\n    frame_id_numbers_present_flag = 0\r\n  }\r\n  else {\r\n    frame_id_numbers_present_flag =\tav1syntax.f(bitReader, 1)\r\n  }\r\n  if ( frame_id_numbers_present_flag ) {\r\n    delta_frame_id_length_minus_2 =\tav1syntax.f(bitReader, 4)\r\n    additional_frame_id_length_minus_1 = av1syntax.f(bitReader, 3)\r\n  }\r\n  let use_128x128_superblock = av1syntax.f(bitReader, 1)\r\n  let enable_filter_intra =\tav1syntax.f(bitReader, 1)\r\n  let enable_intra_edge_filter = av1syntax.f(bitReader, 1)\r\n  let enable_interintra_compound = 0\r\n  let enable_masked_compound = 0\r\n  let enable_warped_motion = 0\r\n  let enable_dual_filter = 0\r\n  let enable_order_hint = 0\r\n  let enable_jnt_comp = 0\r\n  let enable_ref_frame_mvs = 0\r\n  let seq_force_screen_content_tools = 2\r\n  let seq_force_integer_mv = 2\r\n  let OrderHintBits = 0\r\n  if (!reduced_still_picture_header) {\r\n    let enable_interintra_compound = av1syntax.f(bitReader, 1)\r\n    enable_masked_compound = av1syntax.f(bitReader, 1)\r\n    enable_warped_motion = av1syntax.f(bitReader, 1)\r\n    enable_dual_filter = av1syntax.f(bitReader, 1)\r\n    enable_order_hint = av1syntax.f(bitReader, 1)\r\n    if (enable_order_hint) {\r\n      enable_jnt_comp = av1syntax.f(bitReader, 1)\r\n      enable_ref_frame_mvs = av1syntax.f(bitReader, 1)\r\n    }\r\n    else {\r\n      enable_jnt_comp = 0\r\n      enable_ref_frame_mvs = 0\r\n    }\r\n    let seq_choose_screen_content_tools =\tav1syntax.f(bitReader, 1)\r\n    if (seq_choose_screen_content_tools) {\r\n      seq_force_screen_content_tools = 2\r\n    }\r\n    else {\r\n      seq_force_screen_content_tools = av1syntax.f(bitReader, 1)\r\n    }\r\n\r\n    if (seq_force_screen_content_tools > 0) {\r\n      let seq_choose_integer_mv =\tav1syntax.f(bitReader, 1)\r\n      if (seq_choose_integer_mv) {\r\n        seq_force_integer_mv = 2\r\n      }\r\n      else {\r\n        seq_force_integer_mv = av1syntax.f(bitReader, 1)\r\n      }\r\n    }\r\n    else {\r\n      seq_force_integer_mv = 2\r\n    }\r\n    if (enable_order_hint) {\r\n      const order_hint_bits_minus_1 =\tav1syntax.f(bitReader, 3)\r\n      OrderHintBits = order_hint_bits_minus_1 + 1\r\n    }\r\n    else {\r\n      OrderHintBits = 0\r\n    }\r\n  }\r\n  let enable_superres =\tav1syntax.f(bitReader, 1)\r\n  let enable_cdef =\tav1syntax.f(bitReader, 1)\r\n  let enable_restoration = av1syntax.f(bitReader, 1)\r\n\r\n  let high_bitdepth =\tav1syntax.f(bitReader, 1)\r\n  let twelve_bit = 0\r\n  let bit_depth = 0\r\n  let mono_chrome = 0\r\n  if (seq_profile == 2 && high_bitdepth ) {\r\n    twelve_bit = av1syntax.f(bitReader, 1)\r\n    bit_depth = twelve_bit ? 12 : 10\r\n  }\r\n  else if (seq_profile <= 2) {\r\n    bit_depth = high_bitdepth ? 10 : 8\r\n  }\r\n  if ( seq_profile == 1 ) {\r\n    mono_chrome = 0\r\n  }\r\n  else {\r\n    mono_chrome = av1syntax.f(bitReader, 1)\r\n  }\r\n  const color_description_present_flag = av1syntax.f(bitReader, 1)\r\n  let color_primaries = 0\r\n  let transfer_characteristics = 0\r\n  let matrix_coefficients = 0\r\n  if (color_description_present_flag ) {\r\n    color_primaries =\tav1syntax.f(bitReader, 8)\r\n    transfer_characteristics = av1syntax.f(bitReader, 8)\r\n    matrix_coefficients = av1syntax.f(bitReader, 8)\r\n  }\r\n  else {\r\n    color_primaries = 2\r\n    transfer_characteristics = 2\r\n    matrix_coefficients = 2\r\n  }\r\n  let color_range = 0\r\n  let subsampling_x = 0\r\n  let subsampling_y = 0\r\n  let chroma_sample_position = 0\r\n  let separate_uv_delta_q = 0\r\n  if (mono_chrome) {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    subsampling_x = 1\r\n    subsampling_y = 1\r\n    chroma_sample_position = 0\r\n    separate_uv_delta_q = 0\r\n  }\r\n  else if (color_primaries == 1\r\n    && transfer_characteristics == 13\r\n    && matrix_coefficients == 0\r\n  ) {\r\n    color_range = 1\r\n    subsampling_x = 0\r\n    subsampling_y = 0\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n  else {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    if (seq_profile == 0) {\r\n      subsampling_x = 1\r\n      subsampling_y = 1\r\n    }\r\n    else if ( seq_profile == 1 ) {\r\n      subsampling_x = 0\r\n      subsampling_y = 0\r\n    }\r\n    else {\r\n      if (bit_depth == 12) {\r\n        subsampling_x\t= av1syntax.f(bitReader, 1)\r\n        if (subsampling_x) {\r\n          subsampling_y =\tav1syntax.f(bitReader, 1)\r\n        }\r\n        else {\r\n          subsampling_y = 0\r\n        }\r\n      }\r\n      else {\r\n        subsampling_x = 1\r\n        subsampling_y = 0\r\n      }\r\n    }\r\n    if (subsampling_x && subsampling_y) {\r\n      chroma_sample_position = av1syntax.f(bitReader, 2)\r\n    }\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n\r\n  let film_grain_params_present\t= av1syntax.f(bitReader, 1)\r\n\r\n  return {\r\n    width: max_frame_width_minus_1 + 1,\r\n    height: max_frame_height_minus_1 + 1,\r\n    profile: seq_profile,\r\n    level: AV1LevelIdx[seq_level_idx[0]],\r\n    tier: seq_tier[0],\r\n    bitDepth: bit_depth,\r\n    monoChrome: mono_chrome,\r\n    colorRange: color_range,\r\n    colorPrimaries: color_primaries,\r\n    transferCharacteristics: transfer_characteristics,\r\n    matrixCoefficients: matrix_coefficients,\r\n    subsamplingX: subsampling_x,\r\n    subsamplingY: subsampling_y,\r\n    chromaSamplePosition: chroma_sample_position\r\n  }\r\n}\r\n\r\nexport function splitOBU(buffer: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader()\r\n\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const list: Uint8ArrayInterface[] = []\r\n\r\n  while (bitReader.remainingLength()) {\r\n    const now = bitReader.getPos()\r\n    // obu_forbidden_bit\r\n    bitReader.readU1()\r\n    const type = bitReader.readU(4)\r\n    const extensionFlag = bitReader.readU1()\r\n    const hasSizeFlag = bitReader.readU1()\r\n    // obu_reserved_1bit\r\n    bitReader.readU1()\r\n\r\n    if (extensionFlag) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    const size = hasSizeFlag ? av1syntax.leb128(bitReader) : buffer.length - 1 - extensionFlag\r\n\r\n    const headerSize = bitReader.getPos() - now\r\n\r\n    list.push(buffer.subarray(now, now + headerSize + size))\r\n\r\n    bitReader.skip(size * 8)\r\n  }\r\n\r\n  return list\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>, buffer: Uint8ArrayInterface) {\r\n  const bitWriter = new BitWriter(4)\r\n  // marker\r\n  bitWriter.writeU1(1)\r\n  // version\r\n  bitWriter.writeU(7, 1)\r\n\r\n  const header = splitOBU(buffer).find((buffer) => {\r\n    return ((buffer[0] >>> 3) & 0x0f) === OBUType.SEQUENCE_HEADER\r\n  }) \r\n  \r\n  if (header) {\r\n    const params = parseSequenceHeader(header)\r\n    bitWriter.writeU(3, params.profile)\r\n    bitWriter.writeU(5, params.level)\r\n    bitWriter.writeU(1, params.tier)\r\n    bitWriter.writeU(1, params.bitDepth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, params.bitDepth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, params.monoChrome)\r\n    bitWriter.writeU(1, params.subsamplingX)\r\n    bitWriter.writeU(1, params.subsamplingY)\r\n    bitWriter.writeU(1, params.chromaSamplePosition)\r\n  }\r\n  else {\r\n    const desc = PixelFormatDescriptorsMap[codecpar.format]\r\n    bitWriter.writeU(3, codecpar.profile)\r\n    bitWriter.writeU(5, codecpar.level)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 0)\r\n  }\r\n  // padding\r\n  bitWriter.writeU(8, 0)\r\n  return bitWriter.getBuffer()\r\n}\r\n","/*\r\n * libmedia h264 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport * as logger from 'common/util/logger'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nexport const NALULengthSizeMinusOne = 3\r\n\r\nexport const enum BitFormat {\r\n  AVCC = 1,\r\n  ANNEXB\r\n}\r\n\r\nexport const enum PictureType {\r\n  I = 1,\r\n  P,\r\n  B,\r\n  SPS,\r\n  PPS,\r\n  SEI\r\n}\r\n\r\nexport const enum H264NaluType {\r\n  kUnspecified = 0,\r\n  kSliceNonIDR,\r\n  kSliceDPA,\r\n  kSliceDPB,\r\n  kSliceDPC,\r\n  kSliceIDR,\r\n  kSliceSEI,\r\n  kSliceSPS,\r\n  kSlicePPS,\r\n  kSliceAUD,\r\n  kEndOfSequence,\r\n  kEndOfStream,\r\n  kFiller,\r\n  kSPSExt,\r\n  kReserved0\r\n}\r\n\r\nexport const enum H264SliceType {\r\n  kSliceNone = -1,\r\n  kSliceP,\r\n  kSliceB,\r\n  kSliceI,\r\n  kSliceSP = 5,\r\n  kSliceSB,\r\n  kSliceSI\r\n}\r\n\r\nexport const enum H264Profile {\r\n  kBaseline = 66,\r\n  kMain = 77,\r\n  kHigh = 100,\r\n  kConstrained = kBaseline,\r\n  kHigh10 = 110,\r\n  kHigh422 = 122,\r\n  kHigh444 = 244\r\n}\r\n\r\nexport const H264Profile2Name: Record<H264Profile, string> = {\r\n  [H264Profile.kBaseline]: 'Constrained Baseline',\r\n  [H264Profile.kMain]: 'Main',\r\n  [H264Profile.kHigh]: 'High',\r\n  [H264Profile.kHigh10]: 'High10',\r\n  [H264Profile.kHigh422]: 'High422',\r\n  [H264Profile.kHigh444]: 'High444'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 25344, maxFrameRate: 15 },\r\n  { level: 11, maxResolution: 25344, maxFrameRate: 30 },\r\n  { level: 12, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 13, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 20, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 202752, maxFrameRate: 30 },\r\n  { level: 22, maxResolution: 414720, maxFrameRate: 30 },\r\n  { level: 30, maxResolution: 414720, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 921600, maxFrameRate: 30 },\r\n  { level: 32, maxResolution: 1310720, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2097152, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2097152, maxFrameRate: 60 },\r\n  { level: 42, maxResolution: 2228224, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 8912896, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 8912896, maxFrameRate: 60 },\r\n  { level: 52, maxResolution: 8912896, maxFrameRate: 120 },\r\n  { level: 60, maxResolution: 35651584, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 35651584, maxFrameRate: 60 },\r\n  { level: 62, maxResolution: 35651584, maxFrameRate: 120 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height;\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * avcc 格式的 extradata 转 annexb sps pps\r\n * \r\n * bits    \r\n * - 8   version ( always 0x01 )\r\n * - 8   avc profile ( sps[0][1] )\r\n * - 8   avc compatibility ( sps[0][2] )\r\n * - 8   avc level ( sps[0][3] )\r\n * - 6   reserved ( all bits on )\r\n * - 2   NALULengthSizeMinusOne\r\n * - 3   reserved ( all bits on )\r\n * - 5   number of SPS NALUs (usually 1)\r\n * - repeated once per SPS:\r\n *   - 16         SPS size\r\n *   - variable   SPS NALU data\r\n * - 8 number of PPS NALUs (usually 1)\r\n * - repeated once per PPS:\r\n *   - 16       PPS size\r\n *   - variable PPS NALU data\r\n * \r\n * - ext (profile !== 66 && profile !== 77 && profile !== 88)\r\n *  - 6 reserved ( all bits on )\r\n *  - 2 chroma_format_idc\r\n *  - 5 reserved ( all bits on )\r\n *  - 3 bit_depth_luma_minus8\r\n *  - 5 reserved ( all bits on )\r\n *  - 3 bit_depth_chroma_minus8\r\n *  - 8 number of SPS_EXT NALUs\r\n *    - 16 SPS_EXT size\r\n *    - variable   SPS_EXT NALU data\r\n * \r\n */\r\nexport function extradata2SpsPps(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata)\r\n  bufferReader.skip(5)\r\n\r\n  const spss = []\r\n  const ppss = []\r\n  const spsExts = []\r\n\r\n  const spsLength = bufferReader.readUint8() & 0x1f\r\n  for (let i = 0; i < spsLength; i++) {\r\n    const length = bufferReader.readUint16()\r\n    spss.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  const ppsLength = bufferReader.readUint8()\r\n  for (let i = 0; i < ppsLength; i++) {\r\n    const length = bufferReader.readUint16()\r\n    ppss.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  if (bufferReader.remainingSize() > 4) {\r\n    bufferReader.skip(3)\r\n    const spsExtLength = bufferReader.readUint8()\r\n    if (spsExtLength > 0) {\r\n      for (let i = 0; i < spsExtLength; i++) {\r\n        const length = bufferReader.readUint16()\r\n        spsExts.push(bufferReader.readBuffer(length))\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    spss,\r\n    ppss,\r\n    spsExts\r\n  }\r\n}\r\n\r\nexport function spsPps2Extradata(spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[], spsExts: Uint8ArrayInterface[] = []) {\r\n\r\n  if (spss.length > 32) {\r\n    logger.warn(`h264 metadata\\'s sps max length is 32, but get ${spss.length}`)\r\n    spss = spss.slice(0, 32)\r\n  }\r\n  if (spss.length > 256) {\r\n    logger.warn(`h264 metadata\\'s pps max length is 256, but get ${spss.length}`)\r\n    spss = spss.slice(0, 256)\r\n  }\r\n\r\n  let length = 7\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 2 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 2 + pps.length\r\n  }, length)\r\n\r\n  const sps = spss[0]\r\n\r\n  const params = parseSPS(sps)\r\n\r\n  if (params.profile !== 66 && params.profile !== 77 && params.profile !== 88) {\r\n    length += 4\r\n\r\n    if (spsExts.length) {\r\n      length = spsExts.reduce((prev, ext) => {\r\n        return prev + 2 + ext.length\r\n      }, length)\r\n    }\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(sps[1])\r\n  bufferWriter.writeUint8(sps[2])\r\n  bufferWriter.writeUint8(sps[3])\r\n  bufferWriter.writeUint8(0xfc | NALULengthSizeMinusOne)\r\n\r\n  // sps\r\n  bufferWriter.writeUint8(0xe0 | (spss.length & 0x1f))\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint16(sps.length)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  // pps\r\n  bufferWriter.writeUint8(ppss.length)\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint16(pps.length)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  if (params.profile !== 66 && params.profile !== 77 && params.profile !== 88) {\r\n    bufferWriter.writeUint8(0xfc | params.chromaFormatIdc)\r\n    bufferWriter.writeUint8(0xf8 | params.bitDepthLumaMinus8)\r\n    bufferWriter.writeUint8(0xf8 | params.bitDepthChromaMinus8)\r\n\r\n    if (spsExts.length) {\r\n      array.each(spsExts, (ext) => {\r\n        bufferWriter.writeUint16(ext.length)\r\n        bufferWriter.writeBuffer(ext)\r\n      })\r\n    }\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n    if (spss.length && ppss.length) {\r\n      return spsPps2Extradata(spss, ppss, spsExts)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n    }\r\n\r\n    nalus = nalus.filter((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      return type !== H264NaluType.kSliceAUD\r\n        && type !== H264NaluType.kSlicePPS\r\n        && type !== H264NaluType.kSliceSPS\r\n        && type !== H264NaluType.kSPSExt\r\n    })\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = nalu[0] & 0x1f\r\n    if (type === H264NaluType.kSliceIDR) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    key,\r\n    extradata\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? (extradata[4] & 0x03) : NALULengthSizeMinusOne\r\n  let spss = []\r\n  let ppss = []\r\n  let spsExts = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2SpsPps(extradata)\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    spsExts = result.spsExts\r\n\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n  const seis = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = nalu[0] & 0x1f\r\n\r\n    if (naluType === H264NaluType.kSliceSEI) {\r\n      seis.push(nalu)\r\n    }\r\n    else if (naluType !== H264NaluType.kSliceAUD) {\r\n      nalus.push(nalu)\r\n    }\r\n  }\r\n\r\n  let length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, 0)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = spsExts.reduce((prev, ext) => {\r\n    return prev + 4 + ext.length\r\n  }, length)\r\n  length = seis.reduce((prev, sei) => {\r\n    return prev + 4 + sei.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 6)\r\n  const bufferWriter = new BufferWriter(mapUint8Array(bufferPointer, length + 6))\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(0x09)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(seis, (sei) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sei)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n  array.each(spsExts, (ext) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(ext)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = nalu[0] & 0x1f\r\n    if (type === H264NaluType.kSliceIDR) {\r\n      key = true\r\n    }\r\n  })\r\n  return {\r\n    bufferPointer,\r\n    length: length + 6,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let spss = []\r\n  let ppss = []\r\n  let spsExts = []\r\n  let others = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = nalu[0] & 0x1f\r\n\r\n    if (naluType === H264NaluType.kSliceSPS) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === H264NaluType.kSlicePPS) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === H264NaluType.kSPSExt) {\r\n      spsExts.push(nalu)\r\n    }\r\n    else {\r\n      others.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length) {\r\n    const extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      const extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[4] & 0x03)\r\n\r\n    const { spss } = extradata2SpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      const { profile, level, width, height } = parseSPS(spss[0])\r\n\r\n      stream.codecpar.profile = profile\r\n      stream.codecpar.level = level\r\n      stream.codecpar.width = width\r\n      stream.codecpar.height = height\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      return type === H264NaluType.kSliceIDR\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = intread.r8(avpacket.data + (i + naluLengthSize)) & 0x1f\r\n      if (type === H264NaluType.kSliceIDR) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface H264SPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chromaFormatIdc: number\r\n  bitDepthLumaMinus8: number\r\n  bitDepthChromaMinus8: number\r\n  frameMbsOnlyFlag: number\r\n  picOrderCntType: number\r\n  log2MaxPicOrderCntLsbMinus4: number\r\n  deltaPicOrderAlwaysZeroFlag: number\r\n  log2MaxFrameNumMinus4: number\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): H264SPS {\r\n\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nal_ref_idc\r\n  bitReader.readU(2)\r\n  // nal_unit_type\r\n  bitReader.readU(5)\r\n\r\n  const profile = bitReader.readU(8)\r\n\r\n  // constraint_set0_flag\r\n  bitReader.readU1()\r\n  // constraint_set1_flag\r\n  bitReader.readU1()\r\n  // constraint_set2_flag\r\n  bitReader.readU1()\r\n  // constraint_set3_flag\r\n  bitReader.readU1()\r\n  // constraint_set4_flag\r\n  bitReader.readU1()\r\n  // constraint_set4_flag\r\n  bitReader.readU1()\r\n  // reserved_zero_2bits\r\n  bitReader.readU(2)\r\n\r\n  const level = bitReader.readU(8)\r\n\r\n  // seq_parameter_set_id\r\n  expgolomb.readUE(bitReader)\r\n\r\n  // 摄像机出图大部分格式是 4:2:0\r\n  let chromaFormatIdc = 1\r\n  let bitDepthLumaMinus8 = 0\r\n  let bitDepthChromaMinus8 = 0\r\n\r\n  if (profile == 100 || profile == 110 || profile == 122\r\n    || profile == 244 || profile == 44 || profile == 83\r\n    || profile == 86 || profile == 118 || profile == 128\r\n    || profile == 138 || profile == 139 || profile == 134 || profile == 135\r\n  ) {\r\n    chromaFormatIdc = expgolomb.readUE(bitReader)\r\n    if (chromaFormatIdc === 3) {\r\n      // separate_colour_plane_flag\r\n      bitReader.readU1()\r\n    }\r\n    // bit_depth_luma_minus8\r\n    bitDepthLumaMinus8 = expgolomb.readUE(bitReader)\r\n    // bit_depth_chroma_minus8\r\n    bitDepthChromaMinus8 = expgolomb.readUE(bitReader)\r\n    // qpprime_y_zero_transform_bypass_flag\r\n    bitReader.readU1()\r\n\r\n    let seqScalingMatrixPresentFlag = bitReader.readU1()\r\n    if (seqScalingMatrixPresentFlag) {\r\n      const seqScalingListPresentFlag = new Array(8)\r\n      for (let i = 0; i < ((chromaFormatIdc != 3) ? 8 : 12); i++) {\r\n        seqScalingListPresentFlag[i] = bitReader.readU1()\r\n      }\r\n    }\r\n  }\r\n\r\n  // log2_max_frame_num_minus4\r\n  const log2MaxFrameNumMinus4 = expgolomb.readUE(bitReader)\r\n\r\n  const picOrderCntType = expgolomb.readUE(bitReader)\r\n  let log2MaxPicOrderCntLsbMinus4 = 0\r\n  let deltaPicOrderAlwaysZeroFlag = 0\r\n\r\n  if (picOrderCntType === 0) {\r\n    // log2_max_pic_order_cnt_lsb_minus4\r\n    log2MaxPicOrderCntLsbMinus4 = expgolomb.readUE(bitReader)\r\n  }\r\n  else if (picOrderCntType === 1) {\r\n    // delta_pic_order_always_zero_flag\r\n    deltaPicOrderAlwaysZeroFlag = bitReader.readU1()\r\n\r\n    // offset_for_non_ref_pic\r\n    expgolomb.readSE(bitReader)\r\n    // offset_for_top_to_bottom_field\r\n    expgolomb.readSE(bitReader)\r\n\r\n    const numRefFramesInPicOrderCntCycle = expgolomb.readUE(bitReader)\r\n    for (let i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\r\n      expgolomb.readSE(bitReader)\r\n    }\r\n  }\r\n\r\n  // max_num_ref_frames\r\n  expgolomb.readUE(bitReader)\r\n  // gaps_in_frame_num_value_allowed_flag\r\n  bitReader.readU1()\r\n\r\n  const picWidthInMbsMinus1 = expgolomb.readUE(bitReader)\r\n  const picHeightInMapUnitsMinus1 = expgolomb.readUE(bitReader)\r\n  const frameMbsOnlyFlag = bitReader.readU1()\r\n\r\n  let width = (picWidthInMbsMinus1 + 1) * 16\r\n  let height = (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16\r\n\r\n  if (!frameMbsOnlyFlag) {\r\n    // mb_adaptive_frame_field_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  // direct_8x8_inference_flag\r\n  bitReader.readU1()\r\n\r\n  const frameCroppingFlag = bitReader.readU1()\r\n  if (frameCroppingFlag) {\r\n    const frameCropLeftOffset = expgolomb.readUE(bitReader)\r\n    const frameCropRightOffset = expgolomb.readUE(bitReader)\r\n    const frameCropTopOffset = expgolomb.readUE(bitReader)\r\n    const frameCropBottomOffset = expgolomb.readUE(bitReader)\r\n\r\n    let cropUnitX = 1\r\n    let cropUnitY = 2 - frameCroppingFlag\r\n\r\n    if (chromaFormatIdc === 1) {\r\n      cropUnitX = 2\r\n      cropUnitY = 2 * (2 - frameCroppingFlag)\r\n    }\r\n    else if (frameCroppingFlag === 2) {\r\n      cropUnitX = 2\r\n      cropUnitY = 2 - frameCroppingFlag\r\n    }\r\n\r\n    width -= cropUnitX * (frameCropLeftOffset + frameCropRightOffset)\r\n    height -= cropUnitY * (frameCropTopOffset + frameCropBottomOffset)\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chromaFormatIdc,\r\n    bitDepthLumaMinus8,\r\n    bitDepthChromaMinus8,\r\n    frameMbsOnlyFlag,\r\n    picOrderCntType,\r\n    log2MaxPicOrderCntLsbMinus4,\r\n    deltaPicOrderAlwaysZeroFlag,\r\n    log2MaxFrameNumMinus4\r\n  }\r\n}\r\n","/*\r\n * libmedia hevc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport { BitFormat } from './h264'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nexport const enum HEVCProfile {\r\n  Main = 1,\r\n  Main10,\r\n  MainStillPicture,\r\n  Main444\r\n}\r\n\r\nexport const HEVCProfile2Name: Record<HEVCProfile, string> = {\r\n  [HEVCProfile.Main]: 'Main',\r\n  [HEVCProfile.Main10]: 'Main10',\r\n  [HEVCProfile.MainStillPicture]: 'MainStillPicture',\r\n  [HEVCProfile.Main444]: 'Main444'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxLumaSamplesPerSecond: 552960, maxLumaPictureSize: 36864, maxBitRate: { main: 128, main10: 150 } },\r\n  { level: 20, maxLumaSamplesPerSecond: 3686400, maxLumaPictureSize: 122880, maxBitRate: { main: 1500, main10: 1875 } },\r\n  { level: 21, maxLumaSamplesPerSecond: 7372800, maxLumaPictureSize: 245760, maxBitRate: { main: 3000, main10: 3750 } },\r\n  { level: 30, maxLumaSamplesPerSecond: 16588800, maxLumaPictureSize: 552960, maxBitRate: { main: 6000, main10: 7500 } },\r\n  { level: 31, maxLumaSamplesPerSecond: 33177600, maxLumaPictureSize: 983040, maxBitRate: { main: 10000, main10: 12500 } },\r\n  { level: 40, maxLumaSamplesPerSecond: 66846720, maxLumaPictureSize: 2228224, maxBitRate: { main: 12000, main10: 15000 } },\r\n  { level: 41, maxLumaSamplesPerSecond: 133693440, maxLumaPictureSize: 2228224, maxBitRate: { main: 20000, main10: 25000 } },\r\n  { level: 50, maxLumaSamplesPerSecond: 267386880, maxLumaPictureSize: 8912896, maxBitRate: { main: 25000, main10: 40000 } },\r\n  { level: 51, maxLumaSamplesPerSecond: 534773760, maxLumaPictureSize: 8912896, maxBitRate: { main: 40000, main10: 60000 } },\r\n  { level: 52, maxLumaSamplesPerSecond: 1069547520, maxLumaPictureSize: 35651584, maxBitRate: { main: 60000, main10: 100000 } },\r\n  { level: 60, maxLumaSamplesPerSecond: 1069547520, maxLumaPictureSize: 35651584, maxBitRate: { main: 60000, main10: 100000 } },\r\n  { level: 61, maxLumaSamplesPerSecond: 2139095040, maxLumaPictureSize: 89128960, maxBitRate: { main: 120000, main10: 240000 } },\r\n  { level: 62, maxLumaSamplesPerSecond: 4278190080, maxLumaPictureSize: 356515840, maxBitRate: { main: 240000, main10: 480000 } }\r\n]\r\n\r\nexport function getLevelByResolution(profile: number, width: number, height: number, fps: number, bitrate: number) {\r\n\r\n  bitrate /= 1000\r\n\r\n  const selectedProfile = profile === HEVCProfile.Main ? 'main' : 'main10'\r\n  const lumaSamplesPerSecond = width * height * fps\r\n  for (const level of LevelCapabilities) {\r\n    if (lumaSamplesPerSecond <= level.maxLumaSamplesPerSecond && width * height <= level.maxLumaPictureSize && bitrate <= level.maxBitRate[selectedProfile]) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum HEVCNaluType {\r\n  kSliceTRAIL_N = 0,\r\n  kSliceTRAIL_R = 1,\r\n  kSliceTSA_N = 2,\r\n  kSliceTSA_R = 3,\r\n  kSliceSTSA_N = 4,\r\n  kSliceSTSA_R = 5,\r\n  kSliceRADL_N = 6,\r\n  kSliceRADL_R = 7,\r\n  kSliceRASL_N = 8,\r\n  kSliceRASL_R = 9,\r\n  kSliceBLA_W_LP = 16,\r\n  kSliceBLA_W_RADL = 17,\r\n  kSliceBLA_N_LP = 18,\r\n  kSliceIDR_W_RADL = 19,\r\n  kSliceIDR_N_LP = 20,\r\n  kSliceCRA_NUT = 21,\r\n  kSliceVPS = 32,\r\n  kSliceSPS = 33,\r\n  kSlicePPS = 34,\r\n  kSliceAUD = 35,\r\n  kSliceEOS_NUT = 36,\r\n  kSliceEOB_NUT = 37,\r\n  kSliceFD_NUT = 38,\r\n  kSliceSEI_PREFIX = 39,\r\n  kSliceSEI_SUFFIX = 40\r\n}\r\n\r\n\r\nexport const enum HEVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\n/**\r\n * \r\n * avcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 8   configurationVersion( 固定   1)\r\n * - 2   general_profile_space\r\n * - 1   general_tier_flag\r\n * - 5   general_profile_idc\r\n * - 32  general_profile_compatibility_flags\r\n * - 48  general_constraint_indicator_flags (6 个 字节）\r\n * - 8   general_level_idc\r\n * - 4   reserved1 (1111)\r\n * - 4   min_spatial_segmentation_idc_L\r\n * - 8   min_spatial_segmentation_idc_H\r\n * - 6   reserved2 (111111)\r\n * - 2   parallelismType\r\n * - 6   reserved3 (111111)\r\n * - 2   chromaFormat\r\n * - 5   reserved4 (11111)\r\n * - 3   bitDepthLumaMinus8\r\n * - 5   reserved5(11111)\r\n * - 3   bitDepthChromaMinus8\r\n * - 16  avgFrameRate\r\n * - 2   constantFrameRate\r\n * - 3   numTemporalLayers\r\n * - 1   temporalIdNested\r\n * - 2   lengthSizeMinusOne\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 1   reserved (0)\r\n * - 6   NAL_unit_type\r\n * - 16  numNalus\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata, true)\r\n  bufferReader.skip(22)\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x3f\r\n    const count = bufferReader.readUint16()\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === HEVCNaluType.kSliceVPS) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === HEVCNaluType.kSliceSPS) {\r\n      spss = list\r\n    }\r\n    else if (naluType === HEVCNaluType.kSlicePPS) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n\r\n  const sps = spss[0]\r\n\r\n  let length = 23\r\n\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n  const spsData = parseSPS(sps)\r\n\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(sps[1])\r\n  bufferWriter.writeUint8(sps[2])\r\n  bufferWriter.writeUint8(sps[3])\r\n  bufferWriter.writeUint8(sps[4])\r\n  bufferWriter.writeUint8(sps[5])\r\n\r\n  // general_constraint_indicator_flags\r\n  bufferWriter.writeUint8(sps[6])\r\n  bufferWriter.writeUint8(sps[7])\r\n  bufferWriter.writeUint8(sps[8])\r\n  bufferWriter.writeUint8(sps[9])\r\n  bufferWriter.writeUint8(sps[10])\r\n  bufferWriter.writeUint8(sps[11])\r\n\r\n  bufferWriter.writeUint8(spsData.level)\r\n\r\n  // min_spatial_segmentation_idc\r\n  bufferWriter.writeUint8((0xff << 2) | 0)\r\n  bufferWriter.writeUint8(0)\r\n\r\n  // parallelismType\r\n  bufferWriter.writeUint8((0xff << 6) | 0)\r\n\r\n  // chromaFormat\r\n  bufferWriter.writeUint8((0xff << 6) | spsData.chroma_format_idc)\r\n\r\n  // bitDepthLumaMinus8\r\n  bufferWriter.writeUint8((0xff << 5) | spsData.bit_depth_luma_minus8)\r\n\r\n  // bitDepthChromaMinus8\r\n  bufferWriter.writeUint8((0xff << 5) | spsData.bit_depth_chroma_minus8)\r\n\r\n  // avgFrameRate\r\n  bufferWriter.writeUint16(0)\r\n\r\n  // constantFrameRate numTemporalLayers temporalIdNested lengthSizeMinusOne\r\n  bufferWriter.writeUint8((0 << 6) | (1 << 3) | ((sps[0] & 0x01) << 2) | NALULengthSizeMinusOne)\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSliceVPS)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSliceSPS)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSlicePPS)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[0] >>> 1) & 0x3f\r\n        return type !== HEVCNaluType.kSliceVPS\r\n          && type !== HEVCNaluType.kSliceSPS\r\n          && type !== HEVCNaluType.kSlicePPS\r\n          && type !== HEVCNaluType.kSliceAUD\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = (nalu[0] >>> 1) & 0x3f\r\n    if (type === HEVCNaluType.kSliceIDR_W_RADL\r\n      || type === HEVCNaluType.kSliceIDR_N_LP\r\n      || type === HEVCNaluType.kSliceCRA_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? (extradata[21] & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    nalus.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  let length = vpss.reduce((prev, vps) => {\r\n    return prev + 4 + vps.length\r\n  }, 0)\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 7)\r\n  const buffer = mapUint8Array(bufferPointer, length + 7)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(HEVCNaluType.kSliceAUD << 1)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(vpss, (vps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(vps)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = (nalu[0] >>> 1) & 0x3f\r\n    if (type === HEVCNaluType.kSliceIDR_W_RADL\r\n      || type === HEVCNaluType.kSliceIDR_N_LP\r\n      || type === HEVCNaluType.kSliceCRA_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = (nalu[0] >>> 1) & 0x3f\r\n\r\n    if (naluType === HEVCNaluType.kSliceSPS) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === HEVCNaluType.kSlicePPS) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === HEVCNaluType.kSliceVPS) {\r\n      vpss.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length || vpss.length) {\r\n    const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (vpss.length && spss.length && ppss.length) {\r\n      const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[21] & 0x03)\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      const { profile, level, width, height } = parseSPS(spss[0])\r\n\r\n      stream.codecpar.profile = profile\r\n      stream.codecpar.level = level\r\n      stream.codecpar.width = width\r\n      stream.codecpar.height = height\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      return type === HEVCNaluType.kSliceIDR_N_LP || type === HEVCNaluType.kSliceIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize)) >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceIDR_N_LP || type === HEVCNaluType.kSliceIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface HevcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chroma_format_idc: number\r\n  bit_depth_luma_minus8: number\r\n  bit_depth_chroma_minus8: number\r\n  general_profile_space: number\r\n  general_tier_flag: number\r\n  general_profile_compatibility_flags: number\r\n  constraint_flags: number\r\n  separate_colour_plane_flag: number\r\n  log2_min_cb_size: number\r\n  log2_diff_max_min_coding_block_size: number\r\n  log2_min_tb_size: number\r\n  log2_diff_max_min_transform_block_size: number\r\n  log2_max_trafo_size: number\r\n  log2_ctb_size: number\r\n  log2_min_pu_size: number\r\n  ctb_width: number\r\n  ctb_height: number\r\n  ctb_size: number\r\n  min_cb_width: number\r\n  min_cb_height: number\r\n  min_tb_width: number\r\n  min_tb_height: number\r\n  min_pu_width: number\r\n  min_pu_height: number\r\n  log2_max_poc_lsb: number\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): HevcSPS {\r\n\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bit_depth_luma_minus8 = 0\r\n  let bit_depth_chroma_minus8 = 0\r\n  let chroma_format_idc = 1\r\n  let general_profile_space = 0\r\n  let general_tier_flag = 0\r\n  let general_profile_compatibility_flags = 0\r\n  let constraint_flags = 0\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n\r\n  // nalu type\r\n  bitReader.readU(6)\r\n\r\n  // layerId\r\n  bitReader.readU(6)\r\n\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_video_parameter_set_id\r\n  bitReader.readU(4)\r\n\r\n  // The value of sps_max_sub_layers_minus1 shall be in the range of 0 to 6, inclusive.\r\n  const spsMaxSubLayersMinus1 = bitReader.readU(3)\r\n\r\n  // sps_temporal_id_nesting_flag\r\n  bitReader.readU1()\r\n\r\n  let separate_colour_plane_flag = 0\r\n\r\n  if (spsMaxSubLayersMinus1 <= 6) {\r\n    // profile_tier_level(sps_max_sub_layers_minus1)\r\n\r\n    // general_profile_space\r\n    general_profile_space = bitReader.readU(2)\r\n    // general_tier_flag\r\n    general_tier_flag = bitReader.readU1()\r\n    // general_profile_idc\r\n    profile = bitReader.readU(5)\r\n    // general_profile_compatibility_flag[32]\r\n    general_profile_compatibility_flags = bitReader.readU(32)\r\n\r\n    /**\r\n     * 1 general_progressive_source_flag\r\n     * 1 general_interlaced_source_flag\r\n     * 1 general_non_packed_constraint_flag\r\n     * 1 general_frame_only_constraint_flag\r\n     * 44 general_reserved_zero_44bits\r\n     */\r\n    constraint_flags = bitReader.readU(48)\r\n\r\n    // general_level_idc\r\n    level = bitReader.readU(8)\r\n\r\n    const subLayerProfilePresentFlag = new Array(6)\r\n    const subLayerLevelPresentFlag = new Array(6)\r\n    for (let i = 0; i < spsMaxSubLayersMinus1; i++) {\r\n      subLayerProfilePresentFlag[i] = bitReader.readU1()\r\n      subLayerLevelPresentFlag[i] = bitReader.readU1()\r\n    }\r\n\r\n    if (spsMaxSubLayersMinus1 > 0) {\r\n      for (let i = spsMaxSubLayersMinus1; i < 8; i++) {\r\n        // reserved_zero_2bits\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < spsMaxSubLayersMinus1; i++) {\r\n      if (subLayerProfilePresentFlag[i]) {\r\n        // sub_layer_profile_space[i]\r\n        bitReader.readU(2)\r\n        // sub_layer_tier_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_profile_idc[i]\r\n        bitReader.readU(5)\r\n        // sub_layer_profile_compatibility_flag[i][32]\r\n        bitReader.readU(32)\r\n        // sub_layer_progressive_source_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_interlaced_source_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_non_packed_constraint_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_frame_only_constraint_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_reserved_zero_44bits[i]\r\n        bitReader.readU(44)\r\n      }\r\n\r\n      if (subLayerLevelPresentFlag[i]) {\r\n        // sub_layer_level_idc[i]\r\n        bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    // \"The  value  of sps_seq_parameter_set_id shall be in the range of 0 to 15, inclusive.\"\r\n    expgolomb.readUE(bitReader)\r\n    chroma_format_idc = expgolomb.readUE(bitReader)\r\n\r\n    if (chroma_format_idc === 3) {\r\n      // separate_colour_plane_flag\r\n      separate_colour_plane_flag = bitReader.readU(1)\r\n    }\r\n\r\n    width = expgolomb.readUE(bitReader)\r\n    height = expgolomb.readUE(bitReader)\r\n\r\n    const conformanceWindowFlag = bitReader.readU1()\r\n\r\n    let confWinLeftOffset = 0\r\n    let confWinRightOffset = 0\r\n    let confWinTopOffset = 0\r\n    let confWinBottomOffset = 0\r\n\r\n    if (conformanceWindowFlag) {\r\n      confWinLeftOffset = expgolomb.readUE(bitReader)\r\n      confWinRightOffset = expgolomb.readUE(bitReader)\r\n      confWinTopOffset = expgolomb.readUE(bitReader)\r\n      confWinBottomOffset = expgolomb.readUE(bitReader)\r\n    }\r\n\r\n    bit_depth_luma_minus8 = expgolomb.readUE(bitReader)\r\n    bit_depth_chroma_minus8 = expgolomb.readUE(bitReader)\r\n\r\n\r\n    let SubWidthC = 2\r\n    let SubHeightC = 2\r\n\r\n    if (chroma_format_idc === 0) {\r\n      SubWidthC = SubHeightC = 0\r\n    }\r\n    else if (chroma_format_idc === 2) {\r\n      SubWidthC = 2\r\n      SubHeightC = 1\r\n    }\r\n    else if (chroma_format_idc === 3) {\r\n      SubWidthC = SubHeightC = 1\r\n    }\r\n\r\n    const cropUnitX = SubWidthC * (1 << (bit_depth_luma_minus8 + 1))\r\n    const cropUnitY = SubHeightC * (1 << (bit_depth_luma_minus8 + 1))\r\n\r\n    width -= cropUnitX * (confWinLeftOffset + confWinRightOffset)\r\n    height -= cropUnitY * (confWinTopOffset + confWinBottomOffset)\r\n  }\r\n\r\n  const log2_max_poc_lsb = expgolomb.readUE(bitReader) + 4\r\n\r\n  const sublayer_ordering_info_flag = bitReader.readU1()\r\n  const start = sublayer_ordering_info_flag ? 0 : spsMaxSubLayersMinus1\r\n  for (let i = start; i < (spsMaxSubLayersMinus1 + 1); i++) {\r\n    // max_dec_pic_buffering\r\n    expgolomb.readUE(bitReader)\r\n    // num_reorder_pics\r\n    expgolomb.readUE(bitReader)\r\n    // max_latency_increase\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  const log2_min_cb_size = expgolomb.readUE(bitReader) + 3\r\n  const log2_diff_max_min_coding_block_size = expgolomb.readUE(bitReader)\r\n  const log2_min_tb_size = expgolomb.readUE(bitReader) + 2\r\n  const log2_diff_max_min_transform_block_size = expgolomb.readUE(bitReader)\r\n  const log2_max_trafo_size = log2_diff_max_min_transform_block_size + log2_min_tb_size\r\n\r\n  const log2_ctb_size = log2_min_cb_size + log2_diff_max_min_coding_block_size\r\n  const log2_min_pu_size = log2_min_cb_size - 1\r\n\r\n  const ctb_width  = (width  + (1 << log2_ctb_size) - 1) >> log2_ctb_size\r\n  const ctb_height = (height + (1 << log2_ctb_size) - 1) >> log2_ctb_size\r\n  const ctb_size   = ctb_width * ctb_height\r\n\r\n  const min_cb_width  = width  >> log2_min_cb_size\r\n  const min_cb_height = height >> log2_min_cb_size\r\n  const min_tb_width  = width  >> log2_min_tb_size\r\n  const min_tb_height = height >> log2_min_tb_size\r\n  const min_pu_width  = width  >> log2_min_pu_size\r\n  const min_pu_height = height >> log2_min_pu_size\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chroma_format_idc,\r\n    bit_depth_luma_minus8,\r\n    bit_depth_chroma_minus8,\r\n    general_profile_space,\r\n    general_tier_flag,\r\n    general_profile_compatibility_flags,\r\n    constraint_flags,\r\n    separate_colour_plane_flag,\r\n    log2_min_cb_size,\r\n    log2_diff_max_min_coding_block_size,\r\n    log2_min_tb_size,\r\n    log2_diff_max_min_transform_block_size,\r\n    log2_max_trafo_size,\r\n    log2_ctb_size,\r\n    log2_min_pu_size,\r\n    ctb_width,\r\n    ctb_height,\r\n    ctb_size,\r\n    min_cb_width,\r\n    min_cb_height,\r\n    min_tb_width,\r\n    min_tb_height,\r\n    min_pu_width,\r\n    min_pu_height,\r\n    log2_max_poc_lsb\r\n  }\r\n}\r\n\r\nexport interface HevcPPS {\r\n  pps_pic_parameter_set_id: number\r\n  pps_seq_parameter_set_id: number\r\n  dependent_slice_segment_flag: number\r\n  output_flag_present_flag: number\r\n  num_extra_slice_header_bits: number\r\n}\r\n\r\nexport function parsePPS(pps: Uint8ArrayInterface): HevcPPS {\r\n  if (!pps || pps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (pps[0] === 0x00\r\n    && pps[1] === 0x00\r\n    && pps[2] === 0x00\r\n    && pps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  const buffer = naluUnescape(pps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const pps_pic_parameter_set_id = expgolomb.readUE(bitReader)\r\n  const pps_seq_parameter_set_id = expgolomb.readUE(bitReader)\r\n  const dependent_slice_segment_flag = bitReader.readU1()\r\n  const output_flag_present_flag = bitReader.readU1()\r\n  const num_extra_slice_header_bits = bitReader.readU(3)\r\n\r\n  return {\r\n    pps_pic_parameter_set_id,\r\n    pps_seq_parameter_set_id,\r\n    dependent_slice_segment_flag,\r\n    output_flag_present_flag,\r\n    num_extra_slice_header_bits\r\n  }\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia vp9 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { PixelFormatDescriptorsMap } from 'avutil/pixelFormatDescriptor'\r\nimport { avQ2D } from 'avutil/util/rational'\r\nimport { AVChromaLocation, AVColorRange } from 'avutil/pixfmt'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\n\r\nexport const enum VP9Profile {\r\n  Profile0,\r\n  Profile1,\r\n  Profile2,\r\n  Profile3\r\n}\r\n\r\nexport const VP9Profile2Name: Record<VP9Profile, string> = {\r\n  [VP9Profile.Profile0]: 'Profile0',\r\n  [VP9Profile.Profile1]: 'Profile1',\r\n  [VP9Profile.Profile2]: 'Profile2',\r\n  [VP9Profile.Profile3]: 'Profile3'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 512 * 384, maxFrameRate: 30 },\r\n  { level: 11, maxResolution: 512 * 384, maxFrameRate: 60 },\r\n  { level: 20, maxResolution: 960 * 540, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 960 * 540, maxFrameRate: 60 },\r\n  { level: 30, maxResolution: 1920 * 1080, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 1920 * 1080, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2560 * 1440, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2560 * 1440, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 3840 * 2160, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 3840 * 2160, maxFrameRate: 60 },\r\n  { level: 60, maxResolution: 4096 * 2160, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 4096 * 2160, maxFrameRate: 60 },\r\n  { level: 70, maxResolution: 8192 * 4320, maxFrameRate: 30 },\r\n  { level: 71, maxResolution: 8192 * 4320, maxFrameRate: 60 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height;\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n\r\nconst enum VPX_CHROMA_SUBSAMPLING {\r\n  VPX_SUBSAMPLING_420_VERTICAL = 0,\r\n  VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA = 1,\r\n  VPX_SUBSAMPLING_422 = 2,\r\n  VPX_SUBSAMPLING_444 = 3\r\n}\r\n\r\nfunction getVpccFeature(codecpar: pointer<AVCodecParameters>) {\r\n  let profile = codecpar.profile\r\n  let level = codecpar.level\r\n  if (level === NOPTS_VALUE) {\r\n    level = getLevelByResolution(codecpar.width, codecpar.height, avQ2D(codecpar.framerate))\r\n  }\r\n  const desc = PixelFormatDescriptorsMap[codecpar.format]\r\n\r\n  let bitDepth = codecpar.bitsPerCodedSample\r\n  let chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n  if (desc) {\r\n    bitDepth = desc.comp[0].depth\r\n    if (desc.log2ChromaW === 1 && desc.log2ChromaH === 1) {\r\n      if (codecpar.chromaLocation === AVChromaLocation.AVCHROMA_LOC_LEFT) {\r\n        chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      }\r\n    }\r\n    else if (desc.log2ChromaW === 1 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_422\r\n    }\r\n    else if (desc.log2ChromaW === 0 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_444\r\n    }\r\n  }\r\n  const fullRange = codecpar.colorRange === AVColorRange.AVCOL_RANGE_JPEG ? 1 : 0\r\n\r\n  if (profile === NOPTS_VALUE && bitDepth) {\r\n    if (chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      || chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n    ) {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile0 : VP9Profile.Profile2\r\n    }\r\n    else {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile1 : VP9Profile.Profile3\r\n    }\r\n  }\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRange\r\n  }\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>) {\r\n  const ioWriter = new BufferWriter(new Uint8Array(8))\r\n  const vpcc = getVpccFeature(codecpar)\r\n  ioWriter.writeUint8(vpcc.profile)\r\n  ioWriter.writeUint8(vpcc.level)\r\n  ioWriter.writeUint8((vpcc.bitDepth << 4) | (vpcc.chromaSubsampling << 1) | vpcc.fullRange)\r\n  ioWriter.writeUint8(codecpar.colorPrimaries)\r\n  ioWriter.writeUint8(codecpar.colorTrc)\r\n  ioWriter.writeUint8(codecpar.colorSpace)\r\n  ioWriter.writeUint16(0)\r\n  return ioWriter.getWroteBuffer()\r\n}","/*\r\n * libmedia vvc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { Data } from 'common/types/type'\r\nimport { BitFormat } from './h264'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum VVCNaluType {\r\n  kTRAIL_NUT      = 0,\r\n  kSTSA_NUT       = 1,\r\n  kRADL_NUT       = 2,\r\n  kRASL_NUT       = 3,\r\n  kRSV_VCL_4      = 4,\r\n  kRSV_VCL_5      = 5,\r\n  kRSV_VCL_6      = 6,\r\n  kIDR_W_RADL     = 7,\r\n  kIDR_N_LP       = 8,\r\n  kCRA_NUT        = 9,\r\n  kGDR_NUT        = 10,\r\n  kRSV_IRAP_11    = 11,\r\n  kOPI_NUT        = 12,\r\n  kDCI_NUT        = 13,\r\n  kVPS_NUT        = 14,\r\n  kSPS_NUT        = 15,\r\n  kPPS_NUT        = 16,\r\n  kPREFIX_APS_NUT = 17,\r\n  kSUFFIX_APS_NUT = 18,\r\n  kPH_NUT         = 19,\r\n  kAUD_NUT        = 20,\r\n  kEOS_NUT        = 21,\r\n  kEOB_NUT        = 22,\r\n  kPREFIX_SEI_NUT = 23,\r\n  kSUFFIX_SEI_NUT = 24,\r\n  kFD_NUT         = 25,\r\n  kRSV_NVCL_26    = 26,\r\n  kRSV_NVCL_27    = 27,\r\n  kUNSPEC_28      = 28,\r\n  kUNSPEC_29      = 29,\r\n  kUNSPEC_30      = 30,\r\n  kUNSPEC_31      = 31,\r\n}\r\n\r\nexport const enum VVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\nexport const enum VVCAPSType {\r\n  kALF     = 0,\r\n  kLMCS    = 1,\r\n  kSCALING = 2\r\n}\r\n\r\nfunction parsePTL(bitReader: BitReader) {\r\n  const olsIdx = bitReader.readU(9)\r\n  const numSublayers = bitReader.readU(3)\r\n  const constantFrameRate = bitReader.readU(2)\r\n  const chromaFormatIdc = bitReader.readU(2)\r\n  const bitDepthMinus8 = bitReader.readU(3)\r\n  bitReader.readU(5)\r\n\r\n  // VvcPTLRecord\r\n  bitReader.readU(2)\r\n  const num_bytes_constraint_info = bitReader.readU(6)\r\n  const generalProfileIdc = bitReader.readU(7)\r\n  const generalTierFlag = bitReader.readU(1)\r\n  const generalLevelIdc = bitReader.readU(8)\r\n  const ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n  const ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n  const generalConstraintInfo = []\r\n  const sublayerLevelIdc = []\r\n\r\n  if (num_bytes_constraint_info) {\r\n    for (let i = 0; i < num_bytes_constraint_info - 1; i++) {\r\n      generalConstraintInfo[i] = bitReader.readU(8)\r\n    }\r\n    generalConstraintInfo[num_bytes_constraint_info - 1] = bitReader.readU(6)\r\n  }\r\n  else {\r\n    bitReader.readU(6)\r\n  }\r\n  if (numSublayers > 1) {\r\n    let ptl_sublayer_present_mask = 0\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      const val = bitReader.readU(1)\r\n      ptl_sublayer_present_mask |= val << j\r\n    }\r\n    for (let j = numSublayers; j <= 8 && numSublayers > 1; ++j) {\r\n      bitReader.readU(1)\r\n    }\r\n    \r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      if (ptl_sublayer_present_mask & (1 << j)) {\r\n        sublayerLevelIdc[j] = bitReader.readU(8)\r\n      }\r\n    }\r\n  }\r\n  const ptl_num_sub_profiles = bitReader.readU(8)\r\n  const generalSubProfileIdc = []\r\n  if (ptl_num_sub_profiles) {\r\n    for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n      generalSubProfileIdc.push(bitReader.readU(8))\r\n    }\r\n  }\r\n\r\n  const maxPictureWidth = bitReader.readU(16)\r\n  const maxPictureHeight = bitReader.readU(16)\r\n  const avgFramerate = bitReader.readU(16)\r\n\r\n  return {\r\n    olsIdx,\r\n    numSublayers,\r\n    bitDepthMinus8,\r\n    chromaFormatIdc,\r\n    constantFrameRate,\r\n    generalProfileIdc,\r\n    generalTierFlag,\r\n    generalLevelIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    generalConstraintInfo,\r\n    sublayerLevelIdc,\r\n    generalSubProfileIdc,\r\n    maxPictureWidth,\r\n    maxPictureHeight,\r\n    avgFramerate\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * vvcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 5   reserved (11111)\r\n * - 2   lengthSizeMinusOne\r\n * - 1   ptl_present_flag\r\n * if ptl_present_flag\r\n *   - 9   ols_idx\r\n *   - 3  num_sublayers\r\n *   - 2  constant_frame_rate\r\n *   - 2  chroma_format_idc\r\n *   - 3  bit_depth_minus8\r\n *   - 5  reserved (11111)\r\n *   VvcPTLRecord\r\n *   - 2 reserved (11)\r\n *   - 6 num_bytes_constraint_info\r\n *   - 7 general_profile_idc\r\n *   - 1 general_tier_flag\r\n *   - 8 general_level_idc\r\n *   - 1 general_level_idc\r\n *   - 1 ptl_multilayer_enabled_flag\r\n *   if num_bytes_constraint_info > 0\r\n *      for (i = 0; i < num_bytes_constraint_info - 1; i++)\r\n *        - 8 general_constraint_info[i]\r\n *      - 6 general_constraint_info[num_bytes_constraint_info - 1]\r\n *   else\r\n *      - 6 reserved\r\n *   if num_sublayers > 1\r\n *      - num_sublayers - 2 ptl_sublayer_level_present_flag\r\n *      - 8 - num_sublayers + 1 ptl_reserved_zero_bit\r\n *      for (i = num_sublayers -2; i >= 0; i--)\r\n *        if ptl_sublayer_present_mask & (1 << i)\r\n *          - 8 sublayer_level_idc[i]\r\n *    - 8 ptl_num_sub_profiles\r\n *    if ptl_num_sub_profiles\r\n *      for (i = 0; i < ptl_num_sub_profiles; i++)\r\n *        - 32 general_sub_profile_idc[i]\r\n *    - 16 max_picture_width\r\n *    - 16 max_picture_height\r\n *    - 16 avg_frame_rate\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 2   reserved (0)\r\n * - 5   NAL_unit_type\r\n * if nalu_type != VVC_NALU_DEC_PARAM && nalu_type != VVC_NALU_OPI\r\n *    - 16  numNalus\r\n * else\r\n *   numNalus = 1\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n\r\n  const bufferReader = new BufferReader(extradata, true)\r\n\r\n  const ptlPresentFlag = bufferReader.readUint8() & 0x01\r\n\r\n  if (ptlPresentFlag) {\r\n    const bitReader = new BitReader()\r\n    bitReader.appendBuffer(extradata.subarray(1))\r\n    parsePTL(bitReader)\r\n    bufferReader.skip(bitReader.getPos())\r\n  }\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x1f\r\n    let count = 1\r\n\r\n    if (naluType !== VVCNaluType.kDCI_NUT && naluType !== VVCNaluType.kOPI_NUT) {\r\n      count = bufferReader.readUint16()\r\n    }\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n  \r\n  const sps = spss[0]\r\n  let ptl: Uint8Array\r\n  if (sps) {\r\n    const spsParams = parseSPS(sps)\r\n    let generalConstraintInfo = spsParams.generalConstraintInfo\r\n    if (!generalConstraintInfo.length) {\r\n      generalConstraintInfo = new Array(12).fill(0)\r\n    }\r\n    const biWriter = new BitWriter()\r\n    biWriter.writeU(9, 0)\r\n    biWriter.writeU(3, spsParams.spsMaxSublayersMinus1 + 1)\r\n    biWriter.writeU(2, 1)\r\n    biWriter.writeU(2, spsParams.chromaFormatIdc)\r\n    biWriter.writeU(3, spsParams.bitDepthMinus8)\r\n    biWriter.writeU(5, 0b11111)\r\n    biWriter.writeU(2, 0)\r\n    biWriter.writeU(6, generalConstraintInfo.length)\r\n    biWriter.writeU(7, spsParams.profile)\r\n    biWriter.writeU1(spsParams.tierFlag)\r\n    biWriter.writeU(8, spsParams.level)\r\n    biWriter.writeU1(spsParams.ptlFrameOnlyConstraintFlag)\r\n    biWriter.writeU1(spsParams.ptlMultilayerEnabledFlag)\r\n\r\n    if (generalConstraintInfo.length) {\r\n      for (let i = 0; i < generalConstraintInfo.length - 1; i++) {\r\n        biWriter.writeU(8, generalConstraintInfo[i])\r\n      }\r\n      biWriter.writeU(6, generalConstraintInfo[generalConstraintInfo.length - 1])\r\n    }\r\n    else {\r\n      biWriter.writeU(6, 0b111111)\r\n    }\r\n\r\n    if (spsParams.spsMaxSublayersMinus1 + 1 > 1) {\r\n      let ptl_sublayer_level_present_flags = 0\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        ptl_sublayer_level_present_flags = (ptl_sublayer_level_present_flags << 1 | spsParams.ptlSublayerLevelPresentFlag[i])\r\n      }\r\n      biWriter.writeU(spsParams.spsMaxSublayersMinus1, ptl_sublayer_level_present_flags)\r\n\r\n      for (let j = spsParams.spsMaxSublayersMinus1 + 1; j <= 8 && spsParams.spsMaxSublayersMinus1 > 0; ++j) {\r\n        biWriter.writeU1(0)\r\n      }\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        if (spsParams.ptlSublayerLevelPresentFlag[i]) {\r\n          biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n        }\r\n      }\r\n    }\r\n    biWriter.writeU(8, spsParams.generalSubProfileIdc.length)\r\n    for (let i = 0; i < spsParams.generalSubProfileIdc.length; i++) {\r\n      biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n    }\r\n    biWriter.writeU(16, spsParams.width)\r\n    biWriter.writeU(16, spsParams.height)\r\n    biWriter.writeU(16, 0)\r\n    biWriter.padding()\r\n    ptl = biWriter.getBuffer().subarray(0, biWriter.getPointer())\r\n  }\r\n\r\n  let length = 2 + (ptl ? ptl.length : 0)\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n\r\n  bufferWriter.writeUint8(NALULengthSizeMinusOne << 1 | (ptl ? 1 : 0) | 0xf8)\r\n\r\n  if (ptl) {\r\n    bufferWriter.writeBuffer(ptl)\r\n  }\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kVPS_NUT)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kSPS_NUT)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kPPS_NUT)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return type !== VVCNaluType.kVPS_NUT\r\n          && type !== VVCNaluType.kSPS_NUT\r\n          && type !== VVCNaluType.kPPS_NUT\r\n          && type !== VVCNaluType.kAUD_NUT\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    if (type === VVCNaluType.kIDR_N_LP\r\n      || type === VVCNaluType.kIDR_W_RADL\r\n      || type === VVCNaluType.kCRA_NUT\r\n      || type === VVCNaluType.kGDR_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? ((extradata[0] >>> 1) & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    nalus.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  let length = vpss.reduce((prev, vps) => {\r\n    return prev + 4 + vps.length\r\n  }, 0)\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 7)\r\n  const buffer = mapUint8Array(bufferPointer, length + 7)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(VVCNaluType.kAUD_NUT << 3)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(vpss, (vps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(vps)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    if (type === VVCNaluType.kIDR_N_LP\r\n      || type === VVCNaluType.kIDR_W_RADL\r\n      || type === VVCNaluType.kCRA_NUT\r\n      || type === VVCNaluType.kGDR_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = (nalu[1] >>> 3) & 0x1f\r\n\r\n    if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length || vpss.length) {\r\n    const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (vpss.length && spss.length && ppss.length) {\r\n      const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParametersBySps(stream: AVStream, sps: Uint8Array) {\r\n  const { profile, level, width, height } = parseSPS(sps)\r\n  stream.codecpar.profile = profile\r\n  stream.codecpar.level = level\r\n  stream.codecpar.width = width\r\n  stream.codecpar.height = height\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[0] >>> 1) & 0x03\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      parseAVCodecParametersBySps(stream, spss[0])\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      return type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize + 1)) >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface VvcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chromaFormatIdc: number\r\n  bitDepthMinus8: number\r\n  generalProfileSpace: number\r\n  tierFlag: number\r\n  generalConstraintInfo: number[]\r\n  generalSubProfileIdc: number[]\r\n  ptlFrameOnlyConstraintFlag: number\r\n  ptlMultilayerEnabledFlag: number\r\n  spsMaxSublayersMinus1: number\r\n  ptlSublayerLevelPresentFlag: number[]\r\n  sublayerLevelIdc: number[]\r\n  sps_log2_max_pic_order_cnt_lsb_minus4: number\r\n  sps_poc_msb_cycle_flag: number\r\n  sps_poc_msb_cycle_len_minus1: number\r\n  sps_num_extra_ph_bytes: number\r\n    sps_extra_ph_bit_present_flag: number[]\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): VvcSPS {\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bitDepthMinus8 = 0\r\n  let chromaFormatIdc = 1\r\n  let generalProfileSpace = 0\r\n  let tierFlag = 0\r\n  let ptlFrameOnlyConstraintFlag = 0\r\n  let ptlMultilayerEnabledFlag = 0\r\n\r\n  const generalConstraintInfo = []\r\n  const ptlSublayerLevelPresentFlag = []\r\n  const sublayerLevelIdc = []\r\n  const generalSubProfileIdc = []\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nuh_reserved_zero_bit\r\n  bitReader.readU1()\r\n  // layerId\r\n  bitReader.readU(6)\r\n  // nalu type\r\n  bitReader.readU(5)\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_seq_parameter_set_id && sps_video_parameter_set_id\r\n  bitReader.readU(8)\r\n\r\n  const spsMaxSublayersMinus1 = bitReader.readU(3)\r\n  chromaFormatIdc = bitReader.readU(2)\r\n  const sps_log2_ctu_size_minus5 = bitReader.readU(2)\r\n  const sps_ptl_dpb_hrd_params_present_flag = bitReader.readU(1)\r\n  if (sps_ptl_dpb_hrd_params_present_flag) {\r\n    profile = bitReader.readU(7)\r\n    tierFlag = bitReader.readU(1)\r\n    level = bitReader.readU(8)\r\n    ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n    ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n    const gci_present_flag = bitReader.readU(1)\r\n    if (gci_present_flag) {\r\n      for (let j = 0; j < 8; j++) {\r\n        generalConstraintInfo[j] = bitReader.readU(8)\r\n      }\r\n      generalConstraintInfo[8] = bitReader.readU(7)\r\n      const gci_num_reserved_bits = bitReader.readU(8)\r\n      bitReader.readU(gci_num_reserved_bits)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      ptlSublayerLevelPresentFlag[i] = bitReader.readU(1)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      if (ptlSublayerLevelPresentFlag[i]) {\r\n        sublayerLevelIdc[i] = bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    const ptl_num_sub_profiles = bitReader.readU(8)\r\n    if (ptl_num_sub_profiles) {\r\n      for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n        generalSubProfileIdc[i] = bitReader.readU(32)\r\n      }\r\n    } \r\n  }\r\n\r\n  // sps_gdr_enabled_flag\r\n  bitReader.readU1()\r\n  const sps_ref_pic_resampling_enabled_flag = bitReader.readU1()\r\n  if (sps_ref_pic_resampling_enabled_flag) {\r\n    // sps_res_change_in_clvs_allowed_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  const sps_pic_width_max_in_luma_samples = width = expgolomb.readUE(bitReader)\r\n  const sps_pic_height_max_in_luma_samples = height = expgolomb.readUE(bitReader)\r\n\r\n  if (bitReader.readU1()) {\r\n    // sps_conf_win_left_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_right_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_top_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_bottom_offset\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  if (bitReader.readU1()) {\r\n    const sps_num_subpics_minus1 = expgolomb.readUE(bitReader)\r\n    const ctb_log2_size_y = sps_log2_ctu_size_minus5 + 5\r\n    const ctb_size_y      = 1 << ctb_log2_size_y\r\n    const tmp_width_val   = sps_pic_width_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const tmp_height_val  = sps_pic_height_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const wlen            = Math.ceil(Math.log2(tmp_width_val))\r\n    const hlen            = Math.ceil(Math.log2(tmp_height_val))\r\n\r\n    let sps_subpic_id_len = 0\r\n    let sps_subpic_same_size_flag = 0\r\n    let sps_independent_subpics_flag = 0\r\n     // sps_num_subpics_minus1\r\n    if (sps_num_subpics_minus1 > 0) {\r\n      sps_independent_subpics_flag = bitReader.readU1()\r\n      sps_subpic_same_size_flag = bitReader.readU1()\r\n    }\r\n    for (let i = 0; sps_num_subpics_minus1 > 0 && i <= sps_num_subpics_minus1; i++) {\r\n      if (!sps_subpic_same_size_flag || i == 0) {\r\n        if (i > 0 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i > 0 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n      }\r\n      if (!sps_independent_subpics_flag) {\r\n        // sps_subpic_treated_as_pic_flag && sps_loop_filter_across_subpic_enabled_flag\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n    sps_subpic_id_len = expgolomb.readUE(bitReader) + 1\r\n    // sps_subpic_id_mapping_explicitly_signalled_flag\r\n    if (bitReader.readU(1)) {\r\n       // sps_subpic_id_mapping_present_flag\r\n      if (bitReader.readU(1)) {\r\n        for (let i = 0; i <= sps_num_subpics_minus1; i++) {\r\n          // sps_subpic_id[i]\r\n          bitReader.readU(sps_subpic_id_len)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  bitDepthMinus8 = expgolomb.readUE(bitReader)\r\n\r\n  // sps_entropy_coding_sync_enabled_flag\r\n  bitReader.readU(1)\r\n  // sps_entry_point_offsets_present_flag\r\n  bitReader.readU(1)\r\n\r\n  const sps_log2_max_pic_order_cnt_lsb_minus4 = bitReader.readU(4)\r\n  const sps_poc_msb_cycle_flag = bitReader.readU(1)\r\n  let sps_poc_msb_cycle_len_minus1 = 0\r\n  if (sps_poc_msb_cycle_flag) {\r\n    sps_poc_msb_cycle_len_minus1 = expgolomb.readUE(bitReader)\r\n  }\r\n  const sps_extra_ph_bit_present_flag: number[] = []\r\n  const sps_num_extra_ph_bytes = bitReader.readU(2)\r\n  for (let i = 0; i < (sps_num_extra_ph_bytes * 8); i++) {\r\n    sps_extra_ph_bit_present_flag[i] = bitReader.readU(1)\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chromaFormatIdc,\r\n    bitDepthMinus8,\r\n    generalProfileSpace,\r\n    tierFlag,\r\n    generalConstraintInfo,\r\n    generalSubProfileIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    spsMaxSublayersMinus1,\r\n    ptlSublayerLevelPresentFlag,\r\n    sublayerLevelIdc,\r\n    sps_log2_max_pic_order_cnt_lsb_minus4,\r\n    sps_poc_msb_cycle_flag,\r\n    sps_poc_msb_cycle_len_minus1,\r\n    sps_num_extra_ph_bytes,\r\n    sps_extra_ph_bit_present_flag\r\n  }\r\n}\r\n\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n\r\n  if (extradata[0] === 0 && extradata[1] === 0 && extradata[2] === 0 && extradata[3] === 1) {\r\n    extradata = annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n\r\n  const bitReader = new BitReader()\r\n  bitReader.appendBuffer(extradata)\r\n  const ptlPresentFlag = bitReader.readU(8) & 0x01\r\n  if (ptlPresentFlag) {\r\n    return parsePTL(bitReader)\r\n  }\r\n  return {} as Data\r\n}","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from '../avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n  \r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public destroy(formatContext: AVIFormatContext): void {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia mov decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\n\r\nimport { IOError } from 'common/io/error'\r\nimport { MOVContext, MOVStreamContext, MovFormatOptions } from './mov/type'\r\nimport mktag from '../function/mktag'\r\nimport { BoxType } from './mov/boxType'\r\nimport * as imov from './mov/imov'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport IFormat from './IFormat'\r\nimport { getNextSample } from './mov/function/getNextSample'\r\nimport createMovContext from './mov/function/createMovContext'\r\nimport { AVFormat, AVSeekFlags } from '../avformat'\r\nimport * as array from 'common/util/array'\r\nimport { mapSafeUint8Array, memcpy, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc, avMallocz } from 'avutil/util/mem'\r\nimport { addAVPacketData, addAVPacketSideData } from 'avutil/util/avpacket'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport AVStream from '../AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { IOFlags } from 'common/io/flags'\r\nimport { BitFormat } from '../codecs/h264'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nexport default class IMovFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.MOV\r\n\r\n  private context: MOVContext\r\n\r\n  public options: MovFormatOptions\r\n\r\n  constructor(options: MovFormatOptions = {}) {\r\n    super()\r\n\r\n    this.options = options\r\n\r\n    this.context = createMovContext()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    try {\r\n\r\n      let ret = 0\r\n\r\n      let size = await formatContext.ioReader.readUint32()\r\n      let type = await formatContext.ioReader.readUint32()\r\n\r\n      if (type !== mktag(BoxType.FTYP)) {\r\n        logger.error('the file format is not mp4')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      await imov.readFtyp(formatContext.ioReader, this.context, {\r\n        type,\r\n        size: size - 8\r\n      })\r\n\r\n      let firstMdatPos = 0n\r\n\r\n      while (!this.context.foundMoov) {\r\n        const pos = formatContext.ioReader.getPos()\r\n        size = await formatContext.ioReader.readUint32()\r\n        type = await formatContext.ioReader.readUint32()\r\n\r\n        if (size < 8) {\r\n          logger.error(`invalid box size ${size}`)\r\n          return errorType.DATA_INVALID\r\n        }\r\n\r\n        if (type === mktag(BoxType.MDAT)) {\r\n          if (!this.context.foundMdat) {\r\n            firstMdatPos = pos\r\n          }\r\n          this.context.foundMdat = true\r\n          await formatContext.ioReader.seek(pos + static_cast<int64>(size))\r\n        }\r\n        else if (type === mktag(BoxType.MOOV)) {\r\n          await imov.readMoov(formatContext.ioReader, formatContext, this.context, {\r\n            size: size - 8,\r\n            type\r\n          })\r\n          this.context.foundMoov = true\r\n        }\r\n        else {\r\n          await formatContext.ioReader.seek(pos + static_cast<int64>(size))\r\n        }\r\n      }\r\n\r\n      if (!this.context.fragment && !this.context.foundMdat) {\r\n        const nextType = (await formatContext.ioReader.peekUint64()) >> 32n\r\n        if (Number(nextType) === mktag(BoxType.MOOF)) {\r\n          this.context.fragment = true\r\n        }\r\n      }\r\n\r\n      if (this.context.fragment && formatContext.ioReader.flags & IOFlags.SEEKABLE) {\r\n        const now = formatContext.ioReader.getPos()\r\n        const fileSize = await formatContext.ioReader.fileSize()\r\n\r\n        if (fileSize > 16n) {\r\n          await formatContext.ioReader.seek(fileSize - 12n)\r\n          let type = await formatContext.ioReader.readUint32()\r\n          if (type === mktag(BoxType.MFRO)) {\r\n            await formatContext.ioReader.skip(4)\r\n            const mfraSize = await formatContext.ioReader.readUint32()\r\n            await formatContext.ioReader.seek(fileSize - static_cast<int64>(mfraSize))\r\n            const size = await formatContext.ioReader.readUint32()\r\n            type = await formatContext.ioReader.readUint32()\r\n            if (type === mktag(BoxType.MFRA)) {\r\n              await imov.readMfra(formatContext.ioReader, formatContext, this.context, {\r\n                size: size - 8,\r\n                type\r\n              })\r\n            }\r\n          }\r\n          await formatContext.ioReader.seek(now)\r\n        }\r\n      }\r\n\r\n      if (!this.context.fragment && this.context.foundMdat) {\r\n        await formatContext.ioReader.seek(firstMdatPos)\r\n      }\r\n\r\n      return ret\r\n    }\r\n    catch (error) {\r\n\r\n      logger.error(error.message)\r\n\r\n      if (!this.context.foundMoov) {\r\n        logger.error('moov not found')\r\n      }\r\n\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const { sample, stream } = getNextSample(formatContext, this.context)\r\n\r\n    if (sample) {\r\n      avpacket.streamIndex = stream.index\r\n      avpacket.dts = sample.dts\r\n      avpacket.pts = sample.pts\r\n      avpacket.duration = static_cast<int64>(sample.duration)\r\n      avpacket.flags |= sample.flags\r\n      avpacket.pos = sample.pos\r\n      avpacket.timeBase.den = stream.timeBase.den\r\n      avpacket.timeBase.num = stream.timeBase.num\r\n\r\n      if (stream.startTime === NOPTS_VALUE_BIGINT) {\r\n        stream.startTime = avpacket.pts || avpacket.dts\r\n      }\r\n\r\n      await formatContext.ioReader.seek(avpacket.pos)\r\n\r\n      const len = sample.size\r\n      const data = avMalloc(len)\r\n      addAVPacketData(avpacket, data, len)\r\n      await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, len))\r\n\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n      ) {\r\n        avpacket.bitFormat = BitFormat.AVCC\r\n      }\r\n\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_WEBVTT\r\n        && avpacket.size >= 8\r\n      ) {\r\n        const tag = static_cast<uint32>(intread.rb32(avpacket.data + 4))\r\n        const packetSize = avpacket.size\r\n        if (tag === mktag(BoxType.VTTE)) {\r\n          if (packetSize === 8) {\r\n            const newData = avMallocz(1)\r\n            addAVPacketData(avpacket, newData, 1)\r\n            avpacket.size = 1\r\n          }\r\n        }\r\n        if (packetSize > 8 && (tag === mktag(BoxType.VTTE) || tag === mktag(BoxType.VTTC))) {\r\n          let start: pointer<uint8> = (avpacket.data + 8) as pointer<uint8>\r\n          const end: pointer<uint8> = (avpacket.data + packetSize) as pointer<uint8>\r\n          while (start < end) {\r\n            const size = intread.rb32(start)\r\n            const tag = static_cast<uint32>(intread.rb32(start + 4))\r\n            if (tag === mktag(BoxType.PAYL) && size > 8) {\r\n              const newData = avMalloc(size - 8)\r\n              memcpy(newData, (start + 8) as pointer<uint8>, size - 8)\r\n              addAVPacketData(avpacket, newData, size - 8)\r\n              break\r\n            }\r\n            else {\r\n              start = reinterpret_cast<pointer<uint8>>(start + size)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n        const len = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA].length\r\n        const extradata = avMalloc(len)\r\n        addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradata, len)\r\n        memcpyFromUint8Array(extradata, len, stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n        delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n      }\r\n    }\r\n    else {\r\n      return IOError.END\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      if (this.context.fragment && !this.context.currentFragment) {\r\n        while (!this.context.currentFragment) {\r\n          const pos = formatContext.ioReader.getPos()\r\n          const size = await formatContext.ioReader.readUint32()\r\n          const type = await formatContext.ioReader.readUint32()\r\n\r\n          if (type === mktag(BoxType.MOOF)) {\r\n            this.context.currentFragment = {\r\n              pos: pos,\r\n              size,\r\n              sequence: 0,\r\n              tracks: [],\r\n              currentTrack: null\r\n            }\r\n\r\n            if (!this.context.firstMoof) {\r\n              this.context.firstMoof = pos\r\n            }\r\n\r\n            await imov.readMoof(\r\n              formatContext.ioReader,\r\n              formatContext,\r\n              this.context,\r\n              {\r\n                type,\r\n                size: size - 8\r\n              }\r\n            )\r\n          }\r\n          else if (type === mktag(BoxType.MOOV)) {\r\n            await imov.readMoov(formatContext.ioReader, formatContext, this.context, {\r\n              size: size - 8,\r\n              type\r\n            })\r\n          }\r\n          else {\r\n            await formatContext.ioReader.skip(size - 8)\r\n          }\r\n        }\r\n      }\r\n\r\n      return await this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END) {\r\n        logger.error(error.message)\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n\r\n  public async seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: AVStream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64> {\r\n\r\n    assert(stream)\r\n\r\n    const pts = timestamp\r\n\r\n    const streamContext = stream.privData as MOVStreamContext\r\n\r\n    const resetFragment = () => {\r\n      this.context.currentFragment = null\r\n      formatContext.streams.forEach((stream) => {\r\n        const movStreamContext = stream.privData as MOVStreamContext\r\n        movStreamContext.samplesIndex.length = 0\r\n      })\r\n    }\r\n\r\n    // dash 使用时间戳去 seek\r\n    if (flags & AVSeekFlags.TIMESTAMP && this.context.fragment) {\r\n      const seekTime = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n      await formatContext.ioReader.seek(seekTime, true)\r\n      resetFragment()\r\n      return 0n\r\n    }\r\n\r\n    if (this.context.fragment) {\r\n      if (streamContext.fragIndexes.length) {\r\n        let index = array.binarySearch(streamContext.fragIndexes, (item) => {\r\n          if (item.time > pts) {\r\n            return -1\r\n          }\r\n          else if (item.time === pts) {\r\n            return 0\r\n          }\r\n          return 1\r\n        })\r\n        if (index > -1) {\r\n          await formatContext.ioReader.seek(streamContext.fragIndexes[index].pos, true)\r\n          resetFragment()\r\n          return 0n\r\n        }\r\n      }\r\n      if (pts === 0n && this.context.firstMoof) {\r\n        await formatContext.ioReader.seek(this.context.firstMoof)\r\n        resetFragment()\r\n        return 0n\r\n      }\r\n      return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n    }\r\n\r\n    let index = array.binarySearch(streamContext.samplesIndex, (item) => {\r\n      if (item.pts > pts) {\r\n        return -1\r\n      }\r\n      else if (item.pts === pts) {\r\n        return 0\r\n      }\r\n      return 1\r\n    })\r\n\r\n    if (index > -1 && stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      let i = index\r\n      for (; i >= 0; i--) {\r\n        if (streamContext.samplesIndex[i].flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n          index = i\r\n          break\r\n        }\r\n      }\r\n      if (i < 0) {\r\n        index = -1\r\n      }\r\n    }\r\n\r\n    if (index > -1) {\r\n      streamContext.currentSample = index\r\n      streamContext.sampleEnd = false\r\n      array.each(formatContext.streams, (st) => {\r\n        if (st !== stream) {\r\n          const stContext = st.privData as MOVStreamContext\r\n          let seeked = false\r\n          let timestamp = avRescaleQ(streamContext.samplesIndex[streamContext.currentSample].pts, stream.timeBase, st.timeBase)\r\n          array.each(stContext.samplesIndex, (sample, i) => {\r\n            if (sample.pts >= timestamp) {\r\n              stContext.currentSample = i\r\n              seeked = true\r\n              return false\r\n            }\r\n          })\r\n\r\n          if (!seeked) {\r\n            stContext.sampleEnd = true\r\n            stContext.currentSample = stContext.samplesIndex.length\r\n          }\r\n          else {\r\n            stContext.sampleEnd = false\r\n          }\r\n        }\r\n      })\r\n      return 0n\r\n    }\r\n    return static_cast<int64>(errorType.DATA_INVALID)\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    // mov 在 readheader 时分析了 moov，不需要在进行流分析\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 box defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport const enum BoxType {\r\n  MDAT = 'mdat',\r\n  IDAT = 'idat',\r\n  FREE = 'free',\r\n  WIDE = 'wide',\r\n  SKIP = 'skip',\r\n  MECO = 'meco',\r\n  STRK = 'strk',\r\n  HMHD = 'hmhd',\r\n  NMHD = 'nmhd',\r\n  IODS = 'iods',\r\n  XML = 'xml ',\r\n  BXML = 'bxml',\r\n  IPRO = 'ipro',\r\n  MERE = 'mere',\r\n  MOOV = 'moov',\r\n  TRAK = 'trak',\r\n  EDTS = 'edts',\r\n  MDIA = 'mdia',\r\n  MINF = 'minf',\r\n  SMHD = 'smhd',\r\n  DINF = 'dinf',\r\n  DREF = 'dref',\r\n  STBL = 'stbl',\r\n  MVEX = 'mvex',\r\n  MOOF = 'moof',\r\n  TRAF = 'traf',\r\n  VTTE = 'vtte',\r\n  VTTC = 'vttc',\r\n  PAYL = 'payl',\r\n  TREF = 'tref',\r\n  IREF = 'iref',\r\n  MFRA = 'mfra',\r\n  HNTI = 'hnti',\r\n  HINF = 'hinf',\r\n  STRD = 'strd',\r\n  SINF = 'sinf',\r\n  RINF = 'rinf',\r\n  SCHI = 'schi',\r\n  TRGR = 'trgr',\r\n  UDTA = 'udta',\r\n  IPRP = 'iprp',\r\n  IPCO = 'ipco',\r\n  UUID = 'uuid',\r\n  STTS = 'stts',\r\n  CTTS = 'ctts',\r\n  STSS = 'stss',\r\n  STSZ = 'stsz',\r\n  STZ2 = 'stz2',\r\n  STSC = 'stsc',\r\n  STCO = 'stco',\r\n  CO64 = 'co64',\r\n  MVHD = 'mvhd',\r\n  TKHD = 'tkhd',\r\n  MDHD = 'mdhd',\r\n  HDLR = 'hdlr',\r\n  FTYP = 'ftyp',\r\n  STSD = 'stsd',\r\n  AVC1 = 'avc1',\r\n  AVC3 = 'avc3',\r\n  AVCC = 'avcC',\r\n  HEV1 = 'hev1',\r\n  HVC1 = 'hvc1',\r\n  HVCC = 'hvcC',\r\n  VVC1 = 'vvc1',\r\n  VVI1 = 'vvi1',\r\n  VVCC = 'vvcC',\r\n  MP4A = 'mp4a',\r\n  MP4V = 'mp4v',\r\n  VP09 = 'vp09',\r\n  VPCC = 'vpcC',\r\n  AV01 = 'av01',\r\n  AV1C = 'av1C',\r\n  OPUS = 'Opus',\r\n  FLAC = 'fLaC',\r\n  ESDS = 'esds',\r\n  WAVE = 'wave',\r\n  DFLA = 'dfLa',\r\n  DOPS = 'dOps',\r\n  TREX = 'trex',\r\n  MFHD = 'mfhd',\r\n  TFHD = 'tfhd',\r\n  TFDT = 'tfdt',\r\n  TRUN = 'trun',\r\n  COLR = 'colr',\r\n  PASP = 'pasp',\r\n  BTRT = 'btrt',\r\n  TEXT = 'text',\r\n  VMHD = 'vmhd',\r\n  ELST = 'elst',\r\n  URL = 'url ',\r\n  NONE = 'none',\r\n  STPP = 'stpp',\r\n  WVTT = 'wvtt',\r\n  TX3G = 'tx3g',\r\n  C608 = 'c608',\r\n  MFRO = 'mfro',\r\n  TFRA = 'tfra',\r\n  MINF_HDLR = 'minf_hdlr',\r\n  FRMA = 'frma',\r\n  DAC3 = 'dac3',\r\n  DEC3 = 'dec3',\r\n  EC_3 = 'ec-3',\r\n  AC_3 = 'ac-3'\r\n}\r\n\r\nexport const BasicBoxs = [\r\n  BoxType.FTYP,\r\n  BoxType.MDAT,\r\n  BoxType.IDAT,\r\n  BoxType.FREE,\r\n  BoxType.SKIP,\r\n  BoxType.MECO,\r\n  BoxType.STRK,\r\n]\r\n\r\nexport const FullBoxs = [\r\n  BoxType.HMHD,\r\n  BoxType.NMHD,\r\n  BoxType.IODS,\r\n  BoxType.XML,\r\n  BoxType.URL,\r\n  BoxType.BXML,\r\n  BoxType.IPRO,\r\n  BoxType.MERE,\r\n  BoxType.STTS,\r\n  BoxType.CTTS,\r\n  BoxType.STSS,\r\n  BoxType.STSZ,\r\n  BoxType.STZ2,\r\n  BoxType.STSC,\r\n  BoxType.STCO,\r\n  BoxType.CO64,\r\n  BoxType.STSD,\r\n  BoxType.DREF,\r\n\r\n  BoxType.MVHD,\r\n  BoxType.TKHD,\r\n  BoxType.MDHD,\r\n  BoxType.HDLR\r\n]\r\n\r\nexport const ContainerBoxs = [\r\n  BoxType.MOOV,\r\n  BoxType.TRAK,\r\n  BoxType.EDTS,\r\n  BoxType.MDIA,\r\n  BoxType.MINF,\r\n  BoxType.DINF,\r\n  BoxType.STBL,\r\n  BoxType.MVEX,\r\n  BoxType.MOOF,\r\n  BoxType.TRAF,\r\n  BoxType.VTTC,\r\n  BoxType.TREF,\r\n  BoxType.IREF,\r\n  BoxType.MFRA,\r\n  BoxType.HNTI,\r\n  BoxType.HINF,\r\n  BoxType.STRD,\r\n  BoxType.SINF,\r\n  BoxType.RINF,\r\n  BoxType.SCHI,\r\n  BoxType.TRGR,\r\n  BoxType.UDTA,\r\n  BoxType.IPRP,\r\n  BoxType.IPCO,\r\n  BoxType.STRK,\r\n  BoxType.MECO\r\n]\r\n\r\nexport const enum TFHDFlags {\r\n  BASE_DATA_OFFSET = 0x01,\r\n  SAMPLE_DESCRIPTION\t= 0x02,\r\n  SAMPLE_DURATION = 0x08,\r\n  SAMPLE_SIZE\t= 0x10,\r\n  SAMPLE_FLAGS = 0x20,\r\n  DURATION_EMPTY = 0x10000,\r\n  DEFAULT_BASE_IS_MOOF = 0x20000\r\n}\r\n\r\nexport const enum TRUNFlags {\r\n  DATA_OFFSET = 0x01,\r\n  FIRST_FLAG = 0x04,\r\n  DURATION = 0x100,\r\n  SIZE = 0x200,\r\n  FLAGS = 0x400,\r\n  CTS_OFFSET = 0x800\r\n}\r\n\r\nexport const enum SampleFlags {\r\n  DEGRADATION_PRIORITY_MASK = 0x0000ffff,\r\n  IS_NON_SYN = 0x00010000,\r\n  PADDING_MASK = 0x000e0000,\r\n  REDUNDANCY_MASK = 0x00300000,\r\n  DEPENDED_MASK = 0x00c00000,\r\n  DEPENDS_MASK = 0x03000000,\r\n  DEPENDS_NO = 0x02000000,\r\n  DEPENDS_YES = 0x01000000\r\n}\r\n\r\nexport const enum MP4Tag {\r\n  MP4_O_DESCR_TAG = 0x01,\r\n  MP4_IO_DESCR_TAG = 0x02,\r\n  MP4_ES_DESCR_TAG = 0x03,\r\n  MP4_DEC_CONFIG_DESCR_TAG = 0x04,\r\n  MP4_DEC_SPECIFIC_DESCR_TAG = 0x05,\r\n  MP4_SL_DESCR_TAG = 0x06\r\n}\r\n\r\nexport const enum TKHDFlags {\r\n  ENABLED = 0x0001,\r\n  IN_MOVIE = 0x0002,\r\n  IN_PREVIEW = 0x0004,\r\n  POSTER = 0x0008\r\n}\r\n","/*\r\n * libmedia mov fragment indexes\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../../../AVStream'\r\nimport { FragmentTrack, MOVContext, MOVStreamContext, Sample } from '../type'\r\nimport { SampleFlags } from '../boxType'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { IOFlags } from 'common/io/flags'\r\n\r\n\r\nexport function buildFragmentIndex(stream: Stream, track: FragmentTrack, movContext: MOVContext, ioFlag: int32 = 0) {\r\n  const context = stream.privData as MOVStreamContext\r\n\r\n  const trex = movContext.trexs.find((trex) => {\r\n    return trex.trackId === track.trackId\r\n  })\r\n\r\n  let currentOffset = track.baseDataOffset + static_cast<int64>(track.dataOffset)\r\n  if (track.baseIsMoof) {\r\n    currentOffset += movContext.currentFragment.pos\r\n  }\r\n  let currentDts = track.baseMediaDecodeTime\r\n\r\n  const sampleSizes = track.sampleSizes\r\n  const sampleDurations = track.sampleDurations\r\n  const sampleFlags = track.sampleFlags\r\n  const sampleCompositionTimeOffset = track.sampleCompositionTimeOffset\r\n\r\n  if (!sampleSizes.length) {\r\n    for (let i = 0; i < track.sampleCount; i++) {\r\n      sampleSizes.push(track.defaultSampleSize || trex.size)\r\n    }\r\n  }\r\n  if (!sampleDurations.length) {\r\n    for (let i = 0; i < track.sampleCount; i++) {\r\n      sampleDurations.push(track.defaultSampleDuration || trex.duration)\r\n    }\r\n  }\r\n  if (!sampleFlags.length) {\r\n    for (let i = 0; i < track.sampleCount; i++) {\r\n      sampleFlags.push(track.defaultSampleFlags || trex.flags)\r\n    }\r\n  }\r\n  if (!sampleCompositionTimeOffset.length) {\r\n    for (let i = 0; i < track.sampleCount; i++) {\r\n      sampleCompositionTimeOffset.push(0)\r\n    }\r\n  }\r\n\r\n  const samplesIndex: Sample[] = []\r\n\r\n  for (let i = 0; i < track.sampleCount; i++) {\r\n    const sample: Sample = {\r\n      dts: currentDts,\r\n      pts: currentDts + static_cast<int64>(sampleCompositionTimeOffset[i]),\r\n      pos: currentOffset,\r\n      size: sampleSizes[i],\r\n      duration: sampleDurations[i],\r\n      flags: 0\r\n    }\r\n\r\n    currentDts += static_cast<int64>(sample.duration)\r\n    currentOffset += static_cast<int64>(sample.size)\r\n\r\n    let currentFlags = sampleFlags[i]\r\n\r\n    if (i === 0 && track.firstSampleFlags) {\r\n      currentFlags = track.firstSampleFlags\r\n    }\r\n\r\n    if (!(currentFlags & (SampleFlags.IS_NON_SYN | SampleFlags.DEPENDS_YES))) {\r\n      sample.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n\r\n    if (i === 0 && sampleSizes.length > 1 && (ioFlag & IOFlags.SLICE)) {\r\n      // 切片的第一个帧强制为关键帧\r\n      sample.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n\r\n    samplesIndex.push(sample)\r\n  }\r\n\r\n  context.samplesIndex = samplesIndex\r\n}\r\n","/*\r\n * libmedia mov indexes\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../../../AVStream'\r\nimport { MOVStreamContext, Sample } from '../type'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVMediaType } from 'avutil/codec'\r\n\r\n\r\nexport function buildIndex(stream: Stream) {\r\n  const context = stream.privData as MOVStreamContext\r\n\r\n  const chunkOffsets = context.chunkOffsets\r\n  const sampleSizes = context.sampleSizes\r\n\r\n  const cttsSampleCounts = context.cttsSampleCounts\r\n  const cttsSampleOffsets = context.cttsSampleOffsets\r\n\r\n  const stscFirstChunk = context.stscFirstChunk\r\n  const stscSamplesPerChunk = context.stscSamplesPerChunk\r\n\r\n  const stssSampleNumbers = context.stssSampleNumbersMap\r\n\r\n  const sttsSampleCounts = context.sttsSampleCounts\r\n  const sttsSampleDeltas = context.sttsSampleDeltas\r\n\r\n  if (!chunkOffsets.length) {\r\n    return\r\n  }\r\n\r\n  let stscIndex = 0\r\n\r\n  let sttsIndex = 0\r\n  let sttsCurrentIndex = 0\r\n\r\n  let cttsIndex = 0\r\n  let cttsCurrentIndex = 0\r\n\r\n  let chunkSamples = 0\r\n  let currentOffset = 0n\r\n  let currentSample = 0\r\n  let currentDts = 0n\r\n\r\n  const samplesIndex: Sample[] = []\r\n\r\n  for (let i = 0; i < chunkOffsets.length; i++) {\r\n    currentOffset = chunkOffsets[i]\r\n    if (stscIndex < (stscFirstChunk.length - 1) && stscFirstChunk[stscIndex + 1] === i + 1) {\r\n      stscIndex++\r\n    }\r\n    chunkSamples = stscSamplesPerChunk[stscIndex]\r\n\r\n    while (chunkSamples > 0) {\r\n      const sample: Sample = {\r\n        dts: currentDts,\r\n        pts: currentDts,\r\n        pos: currentOffset,\r\n        size: sampleSizes[currentSample],\r\n        duration: 0,\r\n        flags: 0\r\n      }\r\n\r\n      if (stssSampleNumbers && stssSampleNumbers.has(currentSample + 1)\r\n                || stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO\r\n      ) {\r\n        sample.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      }\r\n\r\n      if (cttsSampleOffsets) {\r\n        sample.pts = sample.dts + static_cast<int64>(cttsSampleOffsets[cttsIndex])\r\n        cttsCurrentIndex++\r\n        if (cttsCurrentIndex === cttsSampleCounts[cttsIndex]) {\r\n          cttsIndex++\r\n          cttsCurrentIndex = 0\r\n        }\r\n      }\r\n\r\n\r\n      if (currentSample) {\r\n        samplesIndex[currentSample - 1].duration = Number(sample.dts - samplesIndex[currentSample - 1].dts)\r\n      }\r\n\r\n      currentOffset += static_cast<int64>(sample.size)\r\n\r\n      currentDts += static_cast<int64>(sttsSampleDeltas[sttsIndex])\r\n      sttsCurrentIndex++\r\n      if (sttsCurrentIndex === sttsSampleCounts[sttsIndex]) {\r\n        sttsIndex++\r\n        sttsCurrentIndex = 0\r\n      }\r\n\r\n      currentSample++\r\n\r\n      samplesIndex.push(sample)\r\n\r\n      chunkSamples--\r\n    }\r\n  }\r\n\r\n  if (samplesIndex.length > 1) {\r\n    // 最后一个 sample 使用前一个的 duration\r\n    samplesIndex[currentSample - 1].duration = samplesIndex[currentSample - 2].duration\r\n  }\r\n\r\n  context.samplesIndex = samplesIndex\r\n}\r\n","/*\r\n * libmedia create fragment track\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { FragmentTrack } from '../type'\r\n\r\nexport default function createFragmentTrack(): FragmentTrack {\r\n  return {\r\n    trackId: 0,\r\n    baseDataOffset: 0n,\r\n    defaultSampleDuration: 0,\r\n    defaultSampleSize: 0,\r\n    defaultSampleFlags: 0,\r\n    baseMediaDecodeTime: 0n,\r\n    sampleCount: 0,\r\n    dataOffset: 0,\r\n    dataOffsetPos: 0n,\r\n    firstSampleFlags: 0,\r\n    sampleDurations: [],\r\n    sampleSizes: [],\r\n    sampleFlags: [],\r\n    sampleCompositionTimeOffset: [],\r\n    baseIsMoof: false,\r\n    ioWriter: null,\r\n    buffers: []\r\n  }\r\n}\r\n","/*\r\n * libmedia create mov context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MOVContext } from '../type'\r\nimport { NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\n\r\nexport default function createMovContext(): MOVContext {\r\n  return {\r\n    isom: false,\r\n    timescale: NOPTS_VALUE,\r\n    duration: NOPTS_VALUE_BIGINT,\r\n    foundMoov: false,\r\n    foundMdat: false,\r\n    majorBrand: 0,\r\n    minorVersion: 0,\r\n    compatibleBrand: [],\r\n    creationTime: 0n,\r\n    modificationTime: 0n,\r\n    rate: NOPTS_VALUE,\r\n    volume: NOPTS_VALUE,\r\n    matrix: null,\r\n    nextTrackId: 1,\r\n    fragment: false,\r\n    trexs: [],\r\n    currentFragment: null,\r\n    boxsPositionInfo: [],\r\n    holdMoovPos: 0n,\r\n    currentChunk: null\r\n  }\r\n}\r\n","/*\r\n * libmedia create mov stream context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MOVStreamContext } from '../type'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\n\r\nexport default function createMovStreamContext(): MOVStreamContext {\r\n  return {\r\n    chunkOffsets: null,\r\n    cttsSampleCounts: null,\r\n    cttsSampleOffsets: null,\r\n    stscFirstChunk: null,\r\n    stscSamplesPerChunk: null,\r\n    stscSampleDescriptionIndex: null,\r\n    stssSampleNumbersMap: null,\r\n    stssSampleNumbers: null,\r\n    sampleSizes: null,\r\n    sttsSampleCounts: null,\r\n    sttsSampleDeltas: null,\r\n\r\n    timescale: 0,\r\n    duration: 0n,\r\n    trackId: NOPTS_VALUE,\r\n    layer: 0,\r\n    alternateGroup: 0,\r\n    volume: 0,\r\n    matrix: null,\r\n    width: 0,\r\n    height: 0,\r\n\r\n    audioCid: 0,\r\n    samplesPerFrame: 0,\r\n    bytesPerFrame: 0,\r\n\r\n    currentSample: 0,\r\n    sampleEnd: false,\r\n    samplesIndex: [],\r\n    fragIndexes: [],\r\n\r\n    lastPts: 0n,\r\n    lastDts: 0n,\r\n    startDts: 0n,\r\n    startCT: 0,\r\n    lastDuration: 0,\r\n    chunkCount: 0,\r\n    firstWrote: false,\r\n    lastStscCount: 0,\r\n    perStreamGrouping: false,\r\n    index: 0,\r\n    flags: 0\r\n  }\r\n}\r\n","/*\r\n * libmedia get next sample\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../../../AVStream'\r\nimport { AVIFormatContext } from '../../../AVFormatContext'\r\nimport { MOVContext, MOVStreamContext, Sample } from '../type'\r\nimport { AV_TIME_BASE_Q } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { IOFlags } from 'common/io/flags'\r\n\r\nexport function getNextSample(context: AVIFormatContext, movContext: MOVContext) {\r\n  let sample: Sample\r\n  let stream: Stream\r\n\r\n  let bestDts = 0n\r\n\r\n  let posSample: Sample\r\n  let posStream: Stream\r\n\r\n  let dtsSample: Sample\r\n  let dtsStream: Stream\r\n\r\n  context.streams.forEach((s) => {\r\n    const context = s.privData as MOVStreamContext\r\n\r\n    if (!context.samplesIndex || !context.samplesIndex.length) {\r\n      context.sampleEnd = true\r\n      return true\r\n    }\r\n\r\n    if (!context.sampleEnd\r\n      && (!posSample\r\n        || (context.samplesIndex[context.currentSample].pos < posSample.pos)\r\n      )\r\n    ) {\r\n      posSample = context.samplesIndex[context.currentSample]\r\n      posStream = s\r\n    }\r\n\r\n    if (!context.sampleEnd\r\n      && (!dtsSample\r\n        || avRescaleQ(context.samplesIndex[context.currentSample].dts, s.timeBase, AV_TIME_BASE_Q)\r\n          < bestDts\r\n      )\r\n    ) {\r\n      dtsSample = context.samplesIndex[context.currentSample]\r\n      bestDts = avRescaleQ(dtsSample.dts, s.timeBase, AV_TIME_BASE_Q)\r\n      dtsStream = s\r\n    }\r\n  })\r\n\r\n  if (posSample && dtsSample) {\r\n    const posDts = avRescaleQ(posSample.dts, posStream.timeBase, AV_TIME_BASE_Q)\r\n    const dtsDts = avRescaleQ(dtsSample.dts, dtsStream.timeBase, AV_TIME_BASE_Q)\r\n    const diff = Math.abs(Number(posDts - dtsDts))\r\n    // 两者时间差值在 1s 内优先 pos，避免来回 seek\r\n    if ((diff < 1000000) || (context.ioReader.flags & IOFlags.SLICE)) {\r\n      sample = posSample\r\n      stream = posStream\r\n    }\r\n    else {\r\n      sample = dtsSample\r\n      stream = dtsStream\r\n    }\r\n  }\r\n  else if (posSample) {\r\n    sample = posSample\r\n    stream = posStream\r\n  }\r\n  else if (dtsSample) {\r\n    sample = dtsSample\r\n    stream = dtsStream\r\n  }\r\n\r\n  if (stream) {\r\n    (stream.privData as MOVStreamContext).currentSample++\r\n    if ((stream.privData as MOVStreamContext).currentSample\r\n      >= (stream.privData as MOVStreamContext).samplesIndex.length\r\n    ) {\r\n      (stream.privData as MOVStreamContext).sampleEnd = true\r\n    }\r\n\r\n  }\r\n\r\n  if (movContext.fragment) {\r\n    const hasSample = !!context.streams.find((stream) => {\r\n      return (stream.privData as MOVStreamContext).sampleEnd === false\r\n    })\r\n\r\n    if (!hasSample) {\r\n      movContext.currentFragment = null\r\n    }\r\n  }\r\n\r\n  return {\r\n    sample,\r\n    stream\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 decode util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../../AVStream'\r\nimport { Atom, FragmentTrack, MOVContext, MOVStreamContext } from './type'\r\nimport IOReader from 'common/io/IOReader'\r\nimport mktag from '../../function/mktag'\r\nimport { BoxType, ContainerBoxs } from './boxType'\r\nimport { AVIFormatContext } from '../../AVFormatContext'\r\nimport parsers from './parsing/parsers'\r\nimport * as logger from 'common/util/logger'\r\nimport { buildFragmentIndex } from './function/buildFragmentIndex'\r\nimport { buildIndex } from './function/buildIndex'\r\nimport createFragmentTrack from './function/createFragmentTrack'\r\nimport createMovStreamContext from './function/createMovStreamContext'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\n\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readFtyp(ioReader: IOReader, context: MOVContext, atom: Atom) {\r\n\r\n  const endPos = ioReader.getPos() + static_cast<int64>(atom.size)\r\n\r\n  context.majorBrand = await ioReader.readUint32()\r\n  context.minorVersion = await ioReader.readUint32()\r\n\r\n  if (context.majorBrand === mktag('qt  ')) {\r\n    context.isom = true\r\n  }\r\n\r\n  while (ioReader.getPos() < endPos) {\r\n    context.compatibleBrand.push(await ioReader.readUint32())\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nasync function parseOneBox(\r\n  ioReader: IOReader,\r\n  stream: Stream,\r\n  atom: Atom,\r\n  movContext: MOVContext\r\n) {\r\n  const endPos = ioReader.getPos() + static_cast<int64>(atom.size)\r\n  while (ioReader.getPos() < endPos) {\r\n    const size = await ioReader.readUint32()\r\n    const type = await ioReader.readUint32()\r\n\r\n    if (size < 8) {\r\n      logger.error(`invalid box size ${size}`)\r\n      return\r\n    }\r\n\r\n    if (parsers[type]) {\r\n      await parsers[type](\r\n        ioReader,\r\n        stream,\r\n        {\r\n          type,\r\n          size: size - 8\r\n        },\r\n        movContext\r\n      )\r\n    }\r\n    else if (ContainerBoxs.some((boxType) => {\r\n      return mktag(boxType) === type\r\n    })) {\r\n      await parseOneBox(\r\n        ioReader,\r\n        stream,\r\n        {\r\n          type,\r\n          size: size - 8\r\n        },\r\n        movContext\r\n      )\r\n    }\r\n    else {\r\n      await ioReader.skip(size - 8)\r\n    }\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readMoov(\r\n  ioReader: IOReader,\r\n  formatContext: AVIFormatContext,\r\n  movContext: MOVContext,\r\n  atom: Atom\r\n) {\r\n  const endPos = ioReader.getPos() + static_cast<int64>(atom.size)\r\n  while (ioReader.getPos() < endPos) {\r\n    const size = await ioReader.readUint32()\r\n    const type = await ioReader.readUint32()\r\n\r\n    if (size < 8) {\r\n      logger.error(`invalid box, type: ${type}, size ${size}`)\r\n      return\r\n    }\r\n\r\n    if (parsers[type]) {\r\n      await parsers[type](\r\n        ioReader,\r\n        null,\r\n        {\r\n          type,\r\n          size: size - 8\r\n        },\r\n        movContext\r\n      )\r\n    }\r\n    else if (type === mktag(BoxType.TRAK)) {\r\n      if (!movContext.foundMoov || movContext.fragment) {\r\n        const stream = formatContext.createStream()\r\n        stream.privData = createMovStreamContext()\r\n        await parseOneBox(\r\n          ioReader,\r\n          stream,\r\n          {\r\n            type,\r\n            size: size - 8\r\n          },\r\n          movContext\r\n        )\r\n        if (!movContext.fragment) {\r\n          buildIndex(stream)\r\n        }\r\n        else {\r\n          const streamContext: MOVStreamContext = stream.privData\r\n          const old = formatContext.streams.find((st) => {\r\n            const context: MOVStreamContext = st.privData\r\n            if (st.index !== stream.index && context.trackId === streamContext.trackId) {\r\n              return true\r\n            }\r\n          })\r\n          if (old) {\r\n            if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n              old.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n              if (old.codecpar.extradata) {\r\n                avFree(old.codecpar.extradata)\r\n              }\r\n              old.codecpar.extradataSize = old.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA].length\r\n              old.codecpar.extradata = avMalloc(old.codecpar.extradataSize)\r\n              memcpyFromUint8Array(old.codecpar.extradata, old.codecpar.extradataSize, old.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n\r\n              if (stream.codecpar.width === NOPTS_VALUE && streamContext.width > 0) {\r\n                old.codecpar.width = streamContext.width\r\n              }\r\n              if (stream.codecpar.width === NOPTS_VALUE && streamContext.height > 0) {\r\n                old.codecpar.height = streamContext.height\r\n              }\r\n            }\r\n            formatContext.removeStream(stream)\r\n            formatContext.streamIndex--\r\n          }\r\n          else {\r\n            if (stream.codecpar.width === NOPTS_VALUE && streamContext.width > 0) {\r\n              stream.codecpar.width = streamContext.width\r\n            }\r\n            if (stream.codecpar.width === NOPTS_VALUE && streamContext.height > 0) {\r\n              stream.codecpar.height = streamContext.height\r\n            }\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        await ioReader.skip(size - 8)\r\n      }\r\n    }\r\n    else if (type === mktag(BoxType.MVEX)) {\r\n      movContext.fragment = true\r\n      await parseOneBox(\r\n        ioReader,\r\n        null,\r\n        {\r\n          type,\r\n          size: size - 8\r\n        },\r\n        movContext\r\n      )\r\n    }\r\n    else {\r\n      await ioReader.skip(size - 8)\r\n    }\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readMoof(\r\n  ioReader: IOReader,\r\n  formatContext: AVIFormatContext,\r\n  movContext: MOVContext,\r\n  atom: Atom\r\n) {\r\n  const endPos = ioReader.getPos() + static_cast<int64>(atom.size)\r\n  while (ioReader.getPos() < endPos) {\r\n    const size = await ioReader.readUint32()\r\n    const type = await ioReader.readUint32()\r\n\r\n    if (size < 8) {\r\n      logger.error(`invalid box, type: ${type}, size ${size}`)\r\n      return\r\n    }\r\n\r\n    if (parsers[type]) {\r\n      await parsers[type](\r\n        ioReader,\r\n        null,\r\n        {\r\n          type,\r\n          size: size - 8\r\n        },\r\n        movContext\r\n      )\r\n    }\r\n    else if (type === mktag(BoxType.TRAF)) {\r\n      const track: FragmentTrack = createFragmentTrack()\r\n\r\n      movContext.currentFragment.currentTrack = track\r\n\r\n      await parseOneBox(\r\n        ioReader,\r\n        null,\r\n        {\r\n          type,\r\n          size: size - 8\r\n        },\r\n        movContext\r\n      )\r\n      movContext.currentFragment.tracks.push(track)\r\n      movContext.currentFragment.currentTrack = null\r\n\r\n      const stream = formatContext.streams.find((stream) => {\r\n        return (stream.privData as MOVStreamContext).trackId === track.trackId\r\n      })\r\n\r\n      if (stream) {\r\n        const streamContext = stream.privData as MOVStreamContext\r\n        track.streamIndex = stream.index\r\n        buildFragmentIndex(stream, track, movContext, formatContext.ioReader.flags)\r\n        streamContext.currentSample = 0\r\n        streamContext.sampleEnd = false\r\n      }\r\n    }\r\n    else {\r\n      await ioReader.skip(size - 8)\r\n    }\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readMfra(\r\n  ioReader: IOReader,\r\n  formatContext: AVIFormatContext,\r\n  movContext: MOVContext,\r\n  atom: Atom\r\n) {\r\n  const endPos = ioReader.getPos() + static_cast<int64>(atom.size)\r\n  while (ioReader.getPos() < endPos) {\r\n    const pos = ioReader.getPos()\r\n    const size = await ioReader.readUint32()\r\n    const type = await ioReader.readUint32()\r\n    \r\n    if (type === mktag(BoxType.TFRA)) {\r\n      const version = await ioReader.readUint8()\r\n      await ioReader.skip(3)\r\n      const trackId = await ioReader.readUint32()\r\n      const fieldLength = await ioReader.readUint32()\r\n      const itemCount = await ioReader.readUint32()\r\n\r\n      const stream = formatContext.streams.find((stream) => {\r\n        return (stream.privData as MOVStreamContext).trackId === trackId\r\n      })\r\n\r\n      if (stream) {\r\n\r\n        const movStreamContext = stream.privData as MOVStreamContext\r\n\r\n        let time: int64\r\n        let offset: int64\r\n        for (let i = 0; i < itemCount; i++) {\r\n          if (version === 1) {\r\n            time = await ioReader.readUint64()\r\n            offset = await ioReader.readUint64()\r\n          }\r\n          else {\r\n            time = static_cast<int64>(await ioReader.readUint32())\r\n            offset = static_cast<int64>(await ioReader.readUint32())\r\n          }\r\n\r\n          movStreamContext.fragIndexes.push({\r\n            pos: offset,\r\n            time\r\n          })\r\n\r\n          for (let j = 0; j < ((fieldLength >> 4) & 3) + 1; j++) {\r\n            await ioReader.skip(1)\r\n          }\r\n          for (let j = 0; j < ((fieldLength >> 2) & 3) + 1; j++) {\r\n            await ioReader.skip(1)\r\n          }\r\n          for (let j = 0; j < ((fieldLength >> 0) & 3) + 1; j++) {\r\n            await ioReader.skip(1)\r\n          }\r\n        }\r\n        if (movStreamContext.fragIndexes.length) {\r\n          await ioReader.seek(movStreamContext.fragIndexes[movStreamContext.fragIndexes.length - 1].pos)\r\n          const size = await ioReader.readUint32()\r\n          const type = await ioReader.readUint32()\r\n          if (type === mktag(BoxType.MOOF)) {\r\n            movContext.currentFragment = {\r\n              pos: 0n,\r\n              size,\r\n              sequence: 0,\r\n              tracks: [],\r\n              currentTrack: null\r\n            }\r\n            await readMoof(ioReader, formatContext, movContext, {\r\n              size,\r\n              type\r\n            })\r\n            if (movStreamContext.samplesIndex.length) {\r\n              const sample = movStreamContext.samplesIndex[movStreamContext.samplesIndex.length - 1]\r\n              stream.duration = sample.pts + static_cast<int64>(sample.duration)\r\n              movStreamContext.samplesIndex.length = 0\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    await ioReader.seek(pos + static_cast<int64>(size), false, false)\r\n  }\r\n  movContext.currentFragment = null\r\n}\r\n","/*\r\n * libmedia mp4 identify defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport mktag from '../../function/mktag'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVMediaType } from 'avutil/codec'\r\nimport { BoxType } from './boxType'\r\n\r\nexport const Mp4Tag2AVCodecID = {\r\n  mp4v: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  avc1: AVCodecID.AV_CODEC_ID_H264,\r\n  avc3: AVCodecID.AV_CODEC_ID_H264,\r\n  hev1: AVCodecID.AV_CODEC_ID_HEVC,\r\n  hvc1: AVCodecID.AV_CODEC_ID_HEVC,\r\n  vvc1: AVCodecID.AV_CODEC_ID_VVC,\r\n  vvi1: AVCodecID.AV_CODEC_ID_VVC,\r\n  vp09: AVCodecID.AV_CODEC_ID_VP9,\r\n  av01: AVCodecID.AV_CODEC_ID_AV1,\r\n  mp4a: AVCodecID.AV_CODEC_ID_AAC,\r\n  opus: AVCodecID.AV_CODEC_ID_OPUS\r\n}\r\n\r\nexport const AVCodecID2Mp4a = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 0x40,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 0x69,\r\n  [AVCodecID.AV_CODEC_ID_OPUS]: 0xAD,\r\n  [AVCodecID.AV_CODEC_ID_FLAC]: 0xC1,\r\n  [AVCodecID.AV_CODEC_ID_VORBIS]: 0xDD,\r\n\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 0x20,\r\n  [AVCodecID.AV_CODEC_ID_H264]: 0x21,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 0x23,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 0x33,\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 0xB1,\r\n  [AVCodecID.AV_CODEC_ID_NONE]: 0\r\n}\r\n\r\nexport const Mp4aObj2AVCodecID = {\r\n  0x20: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  0x21: AVCodecID.AV_CODEC_ID_H264,\r\n  0x23: AVCodecID.AV_CODEC_ID_HEVC,\r\n  0x33: AVCodecID.AV_CODEC_ID_VVC,\r\n  0xB1: AVCodecID.AV_CODEC_ID_VP9,\r\n\r\n  0x40: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x66: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x67: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x68: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x69: AVCodecID.AV_CODEC_ID_MP3,\r\n  0x6B: AVCodecID.AV_CODEC_ID_MP3,\r\n  0xAD: AVCodecID.AV_CODEC_ID_OPUS,\r\n  0xC1: AVCodecID.AV_CODEC_ID_FLAC,\r\n  0xDD: AVCodecID.AV_CODEC_ID_VORBIS,\r\n  0: AVCodecID.AV_CODEC_ID_NONE\r\n}\r\n\r\nexport const HandlerType2MediaType = {\r\n  vide: AVMediaType.AVMEDIA_TYPE_VIDEO,\r\n  soun: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n  clcp: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  sbtl: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  subt: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  subp: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  text: AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n}\r\n\r\nexport const tag2CodecId = {\r\n  [mktag(BoxType.MP4A)]: AVCodecID.AV_CODEC_ID_AAC,\r\n  [0x6D730055]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [mktag('Opus')]: AVCodecID.AV_CODEC_ID_OPUS,\r\n  [mktag('fLaC')]: AVCodecID.AV_CODEC_ID_FLAC,\r\n  [mktag('spex')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktag('SPXN')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktag('ac-3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktag('sac3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n\r\n  [mktag[BoxType.MP4V]]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktag('av01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n  [mktag('vp08')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktag('vp09')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktag('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktag('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktag('hvc1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktag('vvc1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktag('vvi1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n\r\n  [mktag('text')]: AVCodecID.AV_CODEC_ID_MOV_TEXT,\r\n  [mktag('tx3g')]: AVCodecID.AV_CODEC_ID_MOV_TEXT\r\n}\r\n\r\nexport const enum FragmentMode {\r\n  GOP,\r\n  FRAME\r\n}\r\n\r\nexport const enum MovMode {\r\n  MP4,\r\n  MOV\r\n}\r\n","/*\r\n * libmedia mp4 av1c box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport * as av1 from '../../../codecs/av1'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AV1\r\n\r\n  if (atom.size <= 0) {\r\n    return\r\n  }\r\n\r\n  const data = avMalloc(atom.size)\r\n  const extradata = await ioReader.readBuffer(atom.size, mapSafeUint8Array(data, atom.size))\r\n\r\n  if (movContext.foundMoov) {\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n    avFree(data)\r\n  }\r\n  else {\r\n    stream.codecpar.extradata = data\r\n    stream.codecpar.extradataSize = atom.size\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n  }\r\n\r\n  av1.parseAVCodecParameters(stream, stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read avcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 avcc box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as h264 from '../../../codecs/h264'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_H264\r\n\r\n  if (atom.size <= 0) {\r\n    return\r\n  }\r\n\r\n  const data = avMalloc(atom.size)\r\n  const extradata = await ioReader.readBuffer(atom.size, mapSafeUint8Array(data, atom.size))\r\n\r\n  if (movContext.foundMoov) {\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n    avFree(data)\r\n  }\r\n  else {\r\n    stream.codecpar.extradata = data\r\n    stream.codecpar.extradataSize = atom.size\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n  }\r\n\r\n  h264.parseAVCodecParameters(stream, stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read avcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 co64 box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const chunkOffsets: bigint[] = []\r\n  const entryCount = await ioReader.readUint32()\r\n\r\n  if (version === 0) {\r\n    for (let i = 0; i < entryCount; i++) {\r\n      chunkOffsets.push(await ioReader.readUint64())\r\n    }\r\n  }\r\n\r\n  (stream.privData as MOVStreamContext).chunkOffsets = chunkOffsets\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read co64 error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 colr box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { AVColorRange, AVColorPrimaries, AVColorTransferCharacteristic, AVColorSpace } from 'avutil/pixfmt'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  let colorParameterType = await ioReader.readString(4)\r\n\r\n  if (colorParameterType === 'nclx'\r\n    || colorParameterType === 'nclc'\r\n    || colorParameterType === 'prof'\r\n  ) {\r\n    if (colorParameterType === 'prof') {\r\n      const buffer = await ioReader.readBuffer(atom.size - 4)\r\n      stream.sideData[AVPacketSideDataType.AV_PKT_DATA_ICC_PROFILE] = buffer\r\n    }\r\n    else {\r\n      let colorPrimaries = await ioReader.readUint16()\r\n      let colorTrc = await ioReader.readUint16()\r\n      let colorMatrix = await ioReader.readUint16()\r\n      if (colorParameterType === 'nclx') {\r\n        const colorRange = await ioReader.readUint8() >> 7\r\n        if (colorRange) {\r\n          stream.codecpar.colorRange = AVColorRange.AVCOL_RANGE_JPEG\r\n        }\r\n        else {\r\n          stream.codecpar.colorRange = AVColorRange.AVCOL_RANGE_MPEG\r\n        }\r\n      }\r\n\r\n      if (colorPrimaries >= AVColorPrimaries.AVCOL_PRI_NB) {\r\n        colorPrimaries = AVColorPrimaries.AVCOL_PRI_UNSPECIFIED\r\n      }\r\n      if (colorTrc >= AVColorTransferCharacteristic.AVCOL_TRC_NB) {\r\n        colorTrc = AVColorTransferCharacteristic.AVCOL_TRC_UNSPECIFIED\r\n      }\r\n      if (colorMatrix >= AVColorSpace.AVCOL_SPC_NB) {\r\n        colorMatrix = AVColorSpace.AVCOL_SPC_UNSPECIFIED\r\n      }\r\n\r\n      stream.codecpar.colorPrimaries = colorPrimaries\r\n      stream.codecpar.colorTrc = colorTrc\r\n      stream.codecpar.colorSpace = colorMatrix\r\n    }\r\n  }\r\n  else {\r\n    logger.warn(`unsupported color_parameter_type: ${colorParameterType}`)\r\n  }\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 ctts box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  // version & flags\r\n  await ioReader.skip(4)\r\n\r\n  const sampleCounts = []\r\n  const sampleOffsets = []\r\n\r\n  const entryCount = await ioReader.readUint32()\r\n\r\n  for (let i = 0; i < entryCount; i++) {\r\n    sampleCounts.push(await ioReader.readUint32())\r\n    sampleOffsets.push(await ioReader.readInt32())\r\n  }\r\n\r\n  streamContext.cttsSampleCounts = sampleCounts\r\n  streamContext.cttsSampleOffsets = sampleOffsets\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read ctts error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 dac3 box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { newSideData } from 'avutil/util/avpacket'\r\nimport { AV_CH_LAYOUT } from 'avutil/audiosamplefmt'\r\nimport { AC3ChannelLayout } from '../../../codecs/ac3'\r\nimport * as avChannel from 'avutil/util/channel'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AC3\r\n\r\n  if (atom.size <= 0) {\r\n    return\r\n  }\r\n\r\n  const sd = newSideData(\r\n    addressof(stream.codecpar.codedSideData),\r\n    addressof(stream.codecpar.nbCodedSideData),\r\n    AVPacketSideDataType.AV_PKT_DATA_AUDIO_SERVICE_TYPE,\r\n    sizeof(int32)\r\n  )\r\n\r\n  const ast = reinterpret_cast<pointer<int32>>(sd.data)\r\n\r\n  const ac3info = await ioReader.readUint24()\r\n  const bsmod = (ac3info >> 14) & 0x7\r\n  const acmod = (ac3info >> 11) & 0x7\r\n  const lfeon = (ac3info >> 10) & 0x1\r\n\r\n  let mask = AC3ChannelLayout[acmod]\r\n  if (lfeon) {\r\n    mask |= AV_CH_LAYOUT.AV_CH_LOW_FREQUENCY\r\n  }\r\n\r\n  avChannel.unInitChannelLayout(addressof(stream.codecpar.chLayout))\r\n  avChannel.setChannelLayoutFromMask(addressof(stream.codecpar.chLayout), mask)\r\n\r\n  accessof(ast) <- reinterpret_cast<int32>(bsmod)\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read avcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 dec3 box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { newSideData } from 'avutil/util/avpacket'\r\nimport { AV_CH_LAYOUT, AVAudioServiceType } from 'avutil/audiosamplefmt'\r\nimport { AC3ChannelLayout } from '../../../codecs/ac3'\r\nimport * as avChannel from 'avutil/util/channel'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_EAC3\r\n\r\n  if (atom.size <= 0) {\r\n    return\r\n  }\r\n\r\n  const sd = newSideData(\r\n    addressof(stream.codecpar.codedSideData),\r\n    addressof(stream.codecpar.nbCodedSideData),\r\n    AVPacketSideDataType.AV_PKT_DATA_AUDIO_SERVICE_TYPE,\r\n    sizeof(int32)\r\n  )\r\n\r\n  const ast = reinterpret_cast<pointer<int32>>(sd.data)\r\n\r\n  // data_rate and num_ind_sub\r\n  await ioReader.skip(2)\r\n  const eac3info = await ioReader.readUint24()\r\n  const bsmod = (eac3info >> 12) & 0x1f\r\n  const acmod = (eac3info >>  9) & 0x7\r\n  const lfeon = (eac3info >>  8) & 0x1\r\n\r\n  let mask = AC3ChannelLayout[acmod]\r\n  if (lfeon) {\r\n    mask |= AV_CH_LAYOUT.AV_CH_LOW_FREQUENCY\r\n  }\r\n\r\n  avChannel.unInitChannelLayout(addressof(stream.codecpar.chLayout))\r\n  avChannel.setChannelLayoutFromMask(addressof(stream.codecpar.chLayout), mask)\r\n\r\n  accessof(ast) <- reinterpret_cast<int32>(bsmod)\r\n  if (stream.codecpar.chLayout.nbChannels > 1 && bsmod == 0x7) {\r\n    accessof(ast) <- reinterpret_cast<int32>(AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_KARAOKE)\r\n  }\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read avcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 dfla box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport { FlacMetadataType } from '../../../codecs/flac'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_FLAC\r\n\r\n  // FlacSpecificBox version\r\n  await ioReader.skip(1)\r\n  // flag\r\n  await ioReader.skip(3)\r\n\r\n  const tmp = await ioReader.readUint8()\r\n  const last = tmp & 0x80\r\n  const type = tmp & 0x7f\r\n  const size = await ioReader.readUint24()\r\n\r\n  if (type === FlacMetadataType.FLAC_METADATA_TYPE_STREAMINFO && size === 34) {\r\n    const data = avMalloc(size)\r\n    const extradata = await ioReader.readBuffer(size, mapSafeUint8Array(data, size))\r\n\r\n    if (movContext.foundMoov) {\r\n      stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n      avFree(data)\r\n    }\r\n    else {\r\n      stream.codecpar.extradata = data\r\n      stream.codecpar.extradataSize = size\r\n    }\r\n  }\r\n  else {\r\n    logger.error('streaminfo must be first FLACMetadataBlock')\r\n  }\r\n\r\n  if (!last) {\r\n    logger.warn('non streaminfo FLACMetadataBlock(s) ignored')\r\n  }\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 dops box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as opus from '../../../codecs/opus'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_OPUS\r\n\r\n  // OpusSpecificBox version\r\n  await ioReader.skip(1)\r\n\r\n  const data = avMalloc(atom.size + 8)\r\n  const extradata = mapSafeUint8Array(data, atom.size + 8)\r\n\r\n  const reader = new BufferReader(extradata)\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(1)\r\n  await ioReader.readBuffer(atom.size - 1, mapSafeUint8Array(data + 9, atom.size - 1))\r\n\r\n  reader.seek(10)\r\n  writer.seek(10)\r\n\r\n  // 大端变小端\r\n  writer.writeUint16(reader.readUint16())\r\n  writer.writeUint32(reader.readUint32())\r\n  writer.writeUint16(reader.readUint16())\r\n\r\n  if (movContext.foundMoov) {\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n    avFree(data)\r\n  }\r\n  else {\r\n    stream.codecpar.extradata = data\r\n    stream.codecpar.extradataSize = extradata.length\r\n    opus.parseAVCodecParameters(stream, extradata.slice())\r\n  }\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read dops error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 esds box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { MP4Tag } from '../boxType'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport { Mp4aObj2AVCodecID } from '../mov'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport * as aac from '../../../codecs/aac'\r\nimport * as opus from '../../../codecs/opus'\r\n\r\n// @ts-ignore\r\n@deasync\r\nasync function readDescriptorLength(ioReader: IOReader) {\r\n  let len = 0\r\n  for (let i = 0; i < 4; i++) {\r\n    const c = await ioReader.readUint8()\r\n    len = (len << 7) | (c & 0x7f)\r\n    if (!(c & 0x80)) {\r\n      break\r\n    }\r\n  }\r\n  return len\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  // version = 0\r\n  await ioReader.skip(4)\r\n\r\n  let endPos = ioReader.getPos() + static_cast<int64>(atom.size - 4)\r\n\r\n  while (ioReader.getPos() < endPos) {\r\n    let tag = await ioReader.readUint8()\r\n    let size = await readDescriptorLength(ioReader)\r\n\r\n    if (size === 0) {\r\n      logger.warn('esds invalid descriptor size 0, skip')\r\n      await ioReader.skip(Number(endPos - ioReader.getPos()))\r\n      continue\r\n    }\r\n\r\n    // ES descriptor\r\n    if (tag === MP4Tag.MP4_ES_DESCR_TAG) {\r\n      let subEndPos = ioReader.getPos() + static_cast<int64>(size)\r\n      // track_id\r\n      await ioReader.skip(2)\r\n      // flags = 0\r\n      await ioReader.skip(1)\r\n\r\n      tag = await ioReader.readUint8()\r\n      size = await readDescriptorLength(ioReader)\r\n\r\n      if (size === 0) {\r\n        logger.warn('esds invalid ES descriptor size 0, skip')\r\n        await ioReader.skip(Number(subEndPos - ioReader.getPos()))\r\n        continue\r\n      }\r\n\r\n      // DecoderConfig descriptor\r\n      if (tag === MP4Tag.MP4_DEC_CONFIG_DESCR_TAG) {\r\n        stream.codecpar.codecId = Mp4aObj2AVCodecID[await ioReader.readUint8()]\r\n\r\n        /*\r\n         * the following fields is made of 6 bits to identify the streamtype (4 for video, 5 for audio)\r\n         * plus 1 bit to indicate upstream and 1 bit set to 1 (reserved)\r\n         */\r\n        await ioReader.skip(1)\r\n\r\n        // Buffersize DB\r\n        await ioReader.skip(3)\r\n        // maxbitrate\r\n        await ioReader.skip(4)\r\n        // avgbitrate\r\n        await ioReader.skip(4)\r\n\r\n        if (ioReader.getPos() < (subEndPos - 5n)) {\r\n          tag = await ioReader.readUint8()\r\n          size = await readDescriptorLength(ioReader)\r\n\r\n          // DecoderSpecific info descriptor\r\n          if (tag === MP4Tag.MP4_DEC_SPECIFIC_DESCR_TAG) {\r\n            const data = avMalloc(size)\r\n            const extradata = await ioReader.readBuffer(size, mapSafeUint8Array(data, size))\r\n            if (movContext.foundMoov) {\r\n              stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n              avFree(data)\r\n            }\r\n            else {\r\n              stream.codecpar.extradata = data\r\n              stream.codecpar.extradataSize = size\r\n              if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n                aac.parseAVCodecParameters(stream, extradata.slice())\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n                opus.parseAVCodecParameters(stream, extradata.slice())\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            await ioReader.skip(Number(subEndPos - ioReader.getPos()))\r\n          }\r\n        }\r\n        else {\r\n          await ioReader.skip(Number(subEndPos - ioReader.getPos()))\r\n        }\r\n      }\r\n      else {\r\n        await ioReader.skip(Math.min(size, Number(subEndPos - ioReader.getPos())))\r\n      }\r\n    }\r\n    else {\r\n      await ioReader.skip(Math.min(size, Number(endPos - ioReader.getPos())))\r\n    }\r\n  }\r\n\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 hdlr box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport isDef from 'common/function/isDef'\r\nimport { HandlerType2MediaType } from '../mov'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  if (version === 0) {\r\n    // handler\r\n    await ioReader.skip(4)\r\n\r\n    const handlerType = await ioReader.readString(4)\r\n\r\n    const codecType = HandlerType2MediaType[handlerType]\r\n\r\n    if (isDef(codecType)) {\r\n      stream.codecpar.codecType = codecType\r\n    }\r\n\r\n    // component manufacture \r\n    await ioReader.skip(4)\r\n    // component flags \r\n    await ioReader.skip(4)\r\n    // component flags mask \r\n    await ioReader.skip(4)\r\n\r\n    const len = atom.size - 24\r\n\r\n    if (len > 0) {\r\n      const skip = !movContext.isom && (await ioReader.peekUint8()) === len - 1\r\n      if (skip) {\r\n        await ioReader.skip(1)\r\n      }\r\n      stream.metadata['handlerName'] = await ioReader.readString(len - (skip ? 1 : 0))\r\n    }\r\n  }\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read hdlr error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 hvcc box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as hevc from '../../../codecs/hevc'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_HEVC\r\n\r\n  if (atom.size <= 0) {\r\n    return\r\n  }\r\n\r\n  const data = avMalloc(atom.size)\r\n  const extradata = await ioReader.readBuffer(atom.size, mapSafeUint8Array(data, atom.size))\r\n\r\n  if (movContext.foundMoov) {\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n    avFree(data)\r\n  }\r\n  else {\r\n    stream.codecpar.extradata = data\r\n    stream.codecpar.extradataSize = atom.size\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n  }\r\n\r\n  hevc.parseAVCodecParameters(stream, stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read hevc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 mdhd box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  let creationTime: bigint = 0n\r\n  let modificationTime: bigint = 0n\r\n  let timescale = 0\r\n  let duration: bigint = 0n\r\n\r\n  if (version === 1) {\r\n    creationTime = await ioReader.readUint64()\r\n    modificationTime = await ioReader.readUint64()\r\n    timescale = await ioReader.readUint32()\r\n    duration = await ioReader.readUint64()\r\n  }\r\n  else {\r\n    creationTime = static_cast<int64>(await ioReader.readUint32())\r\n    modificationTime = static_cast<int64>(await ioReader.readUint32())\r\n    timescale = await ioReader.readUint32()\r\n    duration = static_cast<int64>(await ioReader.readUint32())\r\n  }\r\n\r\n  stream.duration = duration\r\n  stream.timeBase.den = timescale\r\n  stream.timeBase.num = 1\r\n  stream.metadata['creationTime'] = creationTime\r\n  stream.metadata['modificationTime'] = modificationTime\r\n\r\n\r\n  const language = await ioReader.readUint16()\r\n  const chars = []\r\n  chars[0] = (language >> 10) & 0x1F\r\n  chars[1] = (language >> 5) & 0x1F\r\n  chars[2] = language & 0x1F\r\n\r\n  const languageString = String.fromCharCode(chars[0] + 0x60, chars[1] + 0x60, chars[2] + 0x60)\r\n\r\n  stream.metadata['language'] = language\r\n  stream.metadata['languageString'] = languageString\r\n\r\n  await ioReader.skip(2)\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read mdhd error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 mfhd box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  movContext.currentFragment.sequence = await ioReader.readUint32()\r\n\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 mvhd box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  if (version === 1) {\r\n    movContext.creationTime = await ioReader.readUint64()\r\n    movContext.modificationTime = await ioReader.readUint64()\r\n    movContext.timescale = await ioReader.readUint32()\r\n    movContext.duration = await ioReader.readUint64()\r\n  }\r\n  else {\r\n    movContext.creationTime = static_cast<int64>(await ioReader.readUint32())\r\n    movContext.modificationTime = static_cast<int64>(await ioReader.readUint32())\r\n    movContext.timescale = await ioReader.readUint32()\r\n    movContext.duration = static_cast<int64>(await ioReader.readUint32())\r\n  }\r\n\r\n  movContext.rate = await ioReader.readUint32()\r\n  movContext.volume = await ioReader.readUint16() >>> 8\r\n\r\n  await ioReader.skip(10)\r\n  movContext.matrix = new Uint32Array(9)\r\n  for (let i = 0; i < 9; i++) {\r\n    movContext.matrix[i] = await ioReader.readUint32()\r\n  }\r\n\r\n  await ioReader.skip(24)\r\n  movContext.nextTrackId = await ioReader.readUint32()\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read mvhd error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 box parsers map\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { BoxType } from '../boxType'\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\n\r\nimport stts from './stts'\r\nimport ctts from './ctts'\r\nimport stss from './stss'\r\nimport stsz from './stsz'\r\nimport stz2 from './stz2'\r\nimport stsc from './stsc'\r\nimport stco from './stco'\r\nimport co64 from './co64'\r\nimport mdhd from './mdhd'\r\nimport mvhd from './mvhd'\r\nimport tkhd from './tkhd'\r\nimport hdlr from './hdlr'\r\nimport stsd from './stsd'\r\n\r\nimport trex from './trex'\r\nimport mfhd from './mfhd'\r\nimport tfhd from './tfhd'\r\nimport tfdt from './tfdt'\r\nimport trun from './trun'\r\n\r\nimport mktag from '../../../function/mktag'\r\n\r\nconst parsers: Partial<Record<\r\nnumber,\r\n(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) => Promise<void>>\r\n> = {\r\n  [mktag(BoxType.STTS)]: stts,\r\n  [mktag(BoxType.CTTS)]: ctts,\r\n  [mktag(BoxType.STSS)]: stss,\r\n  [mktag(BoxType.STSZ)]: stsz,\r\n  [mktag(BoxType.STZ2)]: stz2,\r\n  [mktag(BoxType.STSC)]: stsc,\r\n  [mktag(BoxType.STCO)]: stco,\r\n  [mktag(BoxType.CO64)]: co64,\r\n  [mktag(BoxType.MDHD)]: mdhd,\r\n  [mktag(BoxType.MVHD)]: mvhd,\r\n  [mktag(BoxType.TKHD)]: tkhd,\r\n  [mktag(BoxType.HDLR)]: hdlr,\r\n  [mktag(BoxType.STSD)]: stsd,\r\n\r\n  [mktag(BoxType.TREX)]: trex,\r\n  [mktag(BoxType.MFHD)]: mfhd,\r\n  [mktag(BoxType.TFHD)]: tfhd,\r\n  [mktag(BoxType.TFDT)]: tfdt,\r\n  [mktag(BoxType.TRUN)]: trun\r\n}\r\n\r\nexport default parsers\r\n","/*\r\n * libmedia mp4 stco box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const chunkOffsets: bigint[] = []\r\n  const chunkCount = await ioReader.readUint32()\r\n\r\n  if (version === 0) {\r\n    for (let i = 0; i < chunkCount; i++) {\r\n      chunkOffsets.push(static_cast<int64>(await ioReader.readUint32()))\r\n    }\r\n  }\r\n\r\n  (stream.privData as MOVStreamContext).chunkOffsets = chunkOffsets\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read stco error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stsc box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  const firstChunk: number[] = []\r\n  const samplesPerChunk: number[] = []\r\n  const sampleDescriptionIndex: number[] = []\r\n\r\n  const entryCount = await ioReader.readUint32()\r\n\r\n  if (version === 0) {\r\n    for (let i = 0; i < entryCount; i++) {\r\n      firstChunk.push(await ioReader.readUint32())\r\n      samplesPerChunk.push(await ioReader.readUint32())\r\n      sampleDescriptionIndex.push(await ioReader.readUint32())\r\n    }\r\n  }\r\n\r\n  streamContext.stscFirstChunk = firstChunk\r\n  streamContext.stscSamplesPerChunk = samplesPerChunk\r\n  streamContext.stscSampleDescriptionIndex = sampleDescriptionIndex\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read stsc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stsd box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport mktag from '../../../function/mktag'\r\nimport { BoxType } from '../boxType'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { tag2CodecId } from '../mov'\r\n\r\nimport avcc from './avcc'\r\nimport hvcc from './hvcc'\r\nimport vvcc from './vvcc'\r\nimport vpcc from './vpcc'\r\nimport av1c from './av1c'\r\nimport esds from './esds'\r\nimport wave from './wave'\r\nimport dfla from './dfla'\r\nimport dops from './dops'\r\nimport colr from './colr'\r\n\r\nimport ac3 from './dac3'\r\nimport eac3 from './dec3'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  // version\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  const entryCount = await ioReader.readUint32()\r\n\r\n  for (let i = 0; i < entryCount; i++) {\r\n    const size = await ioReader.readUint32()\r\n    const type = await ioReader.readUint32()\r\n    const endPos = ioReader.getPos() + static_cast<int64>(size - 8)\r\n\r\n    if (tag2CodecId[type]) {\r\n      stream.codecpar.codecId = tag2CodecId[type]\r\n    }\r\n\r\n    if (size === 0) {\r\n      logger.warn('stsd entry invalid box size 0, skip')\r\n      await ioReader.skip(Number(endPos - ioReader.getPos()))\r\n      break\r\n    }\r\n\r\n    if (size >= 16) {\r\n      // reserved\r\n      await ioReader.skip(6)\r\n\r\n      // referenceIndex uin16\r\n      await ioReader.skip(2)\r\n    }\r\n    else if (size <= 7) {\r\n      logger.fatal(`invalid size: ${size} in stsd`)\r\n    }\r\n\r\n    if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      // version\r\n      await ioReader.skip(2)\r\n      // revision level\r\n      await ioReader.skip(2)\r\n      // vendor\r\n      stream.metadata['vendorId'] = await ioReader.readString(4)\r\n      // temporal quality\r\n      await ioReader.skip(4)\r\n      // spatial quality\r\n      await ioReader.skip(4)\r\n\r\n      stream.codecpar.width = await ioReader.readUint16()\r\n      stream.codecpar.height = await ioReader.readUint16()\r\n\r\n      // horizresolution uin32\r\n      await ioReader.skip(4)\r\n      // vertresolution uin32\r\n      await ioReader.skip(4)\r\n\r\n      // data size = 0 uin32\r\n      await ioReader.skip(4)\r\n\r\n      // frames per samples = 1 uin16\r\n      await ioReader.skip(2)\r\n\r\n      let len = await ioReader.readUint8()\r\n      if (len > 31) {\r\n        len = 31\r\n      }\r\n      stream.metadata['encoder'] = await ioReader.readString(len)\r\n      if (len < 31) {\r\n        await ioReader.skip(31 - len)\r\n      }\r\n\r\n      // depth uin16\r\n      await ioReader.skip(2)\r\n\r\n      // Reserved\r\n      await ioReader.skip(2)\r\n\r\n      while (ioReader.getPos() < endPos) {\r\n        const size = await ioReader.readUint32()\r\n        const type = await ioReader.readUint32()\r\n\r\n        if (size === 0) {\r\n          logger.warn('stsd video invalid box size 0, skip')\r\n          await ioReader.skip(Number(endPos - ioReader.getPos()))\r\n          continue\r\n        }\r\n\r\n        if (type === mktag(BoxType.AVCC)) {\r\n          await avcc(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.HVCC)) {\r\n          await hvcc(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.VVCC)) {\r\n          await vvcc(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.AV1C)) {\r\n          await av1c(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.VPCC)) {\r\n          await vpcc(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.ESDS)) {\r\n          await esds(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.WAVE)) {\r\n          await wave(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.COLR)) {\r\n          await colr(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else {\r\n          await ioReader.skip(Math.min(size - 8, Number(endPos - ioReader.getPos())))\r\n        }\r\n      }\r\n    }\r\n    else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      // SoundDescription Version\r\n      const subVersion = await ioReader.readUint16()\r\n\r\n      // Revision level\r\n      await ioReader.skip(2)\r\n\r\n      stream.metadata['vendorId'] = await ioReader.readString(4)\r\n\r\n      stream.codecpar.chLayout.nbChannels = await ioReader.readUint16()\r\n      stream.codecpar.bitsPerCodedSample = await ioReader.readUint16()\r\n\r\n      streamContext.audioCid = await ioReader.readUint16()\r\n\r\n      // packet size = 0 \r\n      await ioReader.skip(2)\r\n\r\n      stream.codecpar.sampleRate = (await ioReader.readUint32()) >>> 16\r\n\r\n      if (!movContext.isom || (version === 0 && subVersion > 0)) {\r\n        if (subVersion === 1) {\r\n          streamContext.samplesPerFrame = await ioReader.readUint32()\r\n          // bytes per packet\r\n          await ioReader.skip(4)\r\n\r\n          streamContext.bytesPerFrame = await ioReader.readUint32()\r\n          // bytes per sample\r\n          await ioReader.skip(4)\r\n        }\r\n        else if (subVersion === 2) {\r\n          // sizeof struct only\r\n          await ioReader.skip(4)\r\n          stream.codecpar.sampleRate = Number(await ioReader.readUint64())\r\n          stream.codecpar.chLayout.nbChannels = await ioReader.readUint32()\r\n          // always 0x7F000000\r\n          await ioReader.skip(4)\r\n          stream.codecpar.bitsPerCodedSample = await ioReader.readUint32()\r\n          // lpcm format specific flag\r\n          await ioReader.skip(4)\r\n          streamContext.bytesPerFrame = await ioReader.readUint32()\r\n          streamContext.samplesPerFrame = await ioReader.readUint32()\r\n        }\r\n      }\r\n\r\n      while (ioReader.getPos() < endPos) {\r\n        const size = await ioReader.readUint32()\r\n        const type = await ioReader.readUint32()\r\n\r\n        if (size === 0) {\r\n          logger.warn('stsd audio invalid box size 0, skip')\r\n          await ioReader.skip(Number(endPos - ioReader.getPos()))\r\n          continue\r\n        }\r\n\r\n        if (type === mktag(BoxType.ESDS)) {\r\n          await esds(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.DFLA)) {\r\n          await dfla(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.DOPS)) {\r\n          await dops(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.WAVE)) {\r\n          await wave(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.DAC3)) {\r\n          await ac3(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else if (type === mktag(BoxType.DEC3)) {\r\n          await eac3(\r\n            ioReader,\r\n            stream,\r\n            {\r\n              type,\r\n              size: size - 8\r\n            },\r\n            movContext\r\n          )\r\n        }\r\n        else {\r\n          await ioReader.skip(Math.min(size - 8, Number(endPos - ioReader.getPos())))\r\n        }\r\n      }\r\n    }\r\n    else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_SUBTITLE) {\r\n      if (type === mktag(BoxType.STPP)) {\r\n        stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_TTML\r\n      }\r\n      else if (type === mktag(BoxType.WVTT)) {\r\n        stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_WEBVTT\r\n      }\r\n      else if (type === mktag(BoxType.TX3G) || type === mktag(BoxType.TEXT)) {\r\n        stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_MOV_TEXT\r\n      }\r\n      else if (type === mktag(BoxType.C608)) {\r\n        stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_EIA_608\r\n      }\r\n      await ioReader.skip(Math.min(size - 8, Number(endPos - ioReader.getPos())))\r\n    }\r\n    else {\r\n      await ioReader.skip(Math.min(size - 8, Number(endPos - ioReader.getPos())))\r\n    }\r\n  }\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read stsd error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stss box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const sampleNumbers: Map<number, true> = new Map()\r\n\r\n  const entryCount = await ioReader.readUint32()\r\n\r\n  if (version === 0) {\r\n    for (let i = 0; i < entryCount; i++) {\r\n      sampleNumbers.set(await ioReader.readUint32(), true)\r\n    }\r\n  }\r\n\r\n  (stream.privData as MOVStreamContext).stssSampleNumbersMap = sampleNumbers\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read stss error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stsz box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const sampleSizes: number[] = []\r\n  let sampleSize = 0\r\n  let sampleCount = 0\r\n\r\n  if (version === 0) {\r\n    sampleSize = await ioReader.readUint32()\r\n    sampleCount = await ioReader.readUint32()\r\n\r\n    for (let i = 0; i < sampleCount; i++) {\r\n      if (sampleSize === 0) {\r\n        sampleSizes.push(await ioReader.readUint32())\r\n      }\r\n      else {\r\n        sampleSizes[i] = sampleSize\r\n      }\r\n    }\r\n  }\r\n\r\n  (stream.privData as MOVStreamContext).sampleSizes = sampleSizes\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read stsz error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stts box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  const sampleCounts: number[] = []\r\n  const sampleDeltas: number[] = []\r\n\r\n  const entryCount = await ioReader.readUint32()\r\n  let delta = 1\r\n\r\n  if (version === 0) {\r\n    for (let i = 0; i < entryCount; i++) {\r\n      sampleCounts.push(await ioReader.readUint32())\r\n      delta = await ioReader.readInt32()\r\n      if (delta < 0) {\r\n        logger.warn('File uses negative stts sample delta, using value 1 instead, sync may be lost!')\r\n      }\r\n      sampleDeltas.push(delta)\r\n    }\r\n  }\r\n\r\n  streamContext.sttsSampleCounts = sampleCounts\r\n  streamContext.sttsSampleDeltas = sampleDeltas\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read stts error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stz2 box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const sampleSizes: number[] = []\r\n  let sampleCount = 0\r\n  let fieldSize = 0\r\n\r\n  if (version === 0) {\r\n    await ioReader.skip(3)\r\n    fieldSize = await ioReader.readUint8()\r\n    sampleCount = await ioReader.readUint32()\r\n\r\n    if (fieldSize === 4) {\r\n      for (let i = 0; i < sampleCount; i += 2) {\r\n        const tmp = await ioReader.readUint8()\r\n        sampleSizes[i] = (tmp >> 4) & 0xF\r\n        sampleSizes[i + 1] = tmp & 0xF\r\n      }\r\n    }\r\n    else if (fieldSize === 8) {\r\n      for (let i = 0; i < sampleCount; i++) {\r\n        sampleSizes[i] = await ioReader.readUint8()\r\n      }\r\n    }\r\n    else if (fieldSize === 16) {\r\n      for (let i = 0; i < sampleCount; i++) {\r\n        sampleSizes[i] = await ioReader.readUint16()\r\n      }\r\n    }\r\n    else {\r\n      logger.error('Error in length field in stz2 box')\r\n    }\r\n  }\r\n\r\n  (stream.privData as MOVStreamContext).sampleSizes = sampleSizes\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read stz2 error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 tfdt box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n\r\n  await ioReader.skip(3)\r\n\r\n  const track = movContext.currentFragment.currentTrack\r\n\r\n  if (track) {\r\n    if (version === 1) {\r\n      track.baseMediaDecodeTime = await ioReader.readUint64()\r\n    }\r\n    else {\r\n      track.baseMediaDecodeTime = static_cast<int64>(await ioReader.readUint32())\r\n    }\r\n  }\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 tfhd box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { TFHDFlags } from '../boxType'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n\r\n  const flags = await ioReader.readUint24()\r\n\r\n  const trackId = await ioReader.readUint32()\r\n\r\n  const track = movContext.currentFragment.currentTrack\r\n  track.trackId = trackId\r\n\r\n  if (track) {\r\n    if (flags & TFHDFlags.BASE_DATA_OFFSET) {\r\n      track.baseDataOffset = await ioReader.readUint64()\r\n    }\r\n    if (flags & TFHDFlags.SAMPLE_DESCRIPTION) {\r\n      await ioReader.skip(4)\r\n    }\r\n    if (flags & TFHDFlags.SAMPLE_DURATION) {\r\n      track.defaultSampleDuration = await ioReader.readUint32()\r\n    }\r\n    if (flags & TFHDFlags.SAMPLE_SIZE) {\r\n      track.defaultSampleSize = await ioReader.readUint32()\r\n    }\r\n    if (flags & TFHDFlags.SAMPLE_FLAGS) {\r\n      track.defaultSampleFlags = await ioReader.readUint32()\r\n    }\r\n\r\n    if (flags & TFHDFlags.DEFAULT_BASE_IS_MOOF) {\r\n      track.baseIsMoof = true\r\n    }\r\n  }\r\n\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 tkhd box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream, { AVDisposition } from '../../../AVStream'\r\nimport { Atom, MOVContext, MOVStreamContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { TKHDFlags } from '../boxType'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  streamContext.flags = await ioReader.readUint24()\r\n\r\n  if (streamContext.flags & TKHDFlags.ENABLED) {\r\n    stream.disposition |= AVDisposition.DEFAULT\r\n  }\r\n\r\n  if (version === 1) {\r\n    stream.metadata['creationTime'] = await ioReader.readUint64()\r\n    stream.metadata['modificationTime'] = await ioReader.readUint64()\r\n    streamContext.trackId = await ioReader.readUint32()\r\n    await ioReader.skip(4)\r\n    streamContext.duration = await ioReader.readUint64()\r\n  }\r\n  else {\r\n    stream.metadata['creationTime'] = static_cast<int64>(await ioReader.readUint32())\r\n    stream.metadata['modificationTime'] = static_cast<int64>(await ioReader.readUint32())\r\n    streamContext.trackId = await ioReader.readUint32()\r\n    await ioReader.skip(4)\r\n    streamContext.duration = static_cast<int64>(await ioReader.readUint32())\r\n  }\r\n\r\n  await ioReader.skip(4 * 2)\r\n\r\n  streamContext.layer = await ioReader.readInt16()\r\n  streamContext.alternateGroup = await ioReader.readInt16()\r\n  streamContext.volume = await ioReader.readInt16() >> 8\r\n\r\n  await ioReader.skip(2)\r\n\r\n  streamContext.matrix = new Uint32Array(9)\r\n  for (let i = 0; i < 9; i++) {\r\n    streamContext.matrix[i] = await ioReader.readUint32()\r\n  }\r\n  streamContext.width = (await ioReader.readUint32()) >> 16\r\n  streamContext.height = (await ioReader.readUint32()) >> 16\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read tkhd error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 trex box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  const trackId = await ioReader.readUint32()\r\n  // default_sample_description_index\r\n  await ioReader.skip(4)\r\n  const duration = await ioReader.readUint32()\r\n  const size = await ioReader.readUint32()\r\n  const flags = await ioReader.readUint32()\r\n\r\n  movContext.trexs.push({\r\n    trackId,\r\n    duration,\r\n    size,\r\n    flags\r\n  })\r\n\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read trex error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 trun box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport { TRUNFlags } from '../boxType'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n\r\n  const flags = await ioReader.readUint24()\r\n\r\n  const track = movContext.currentFragment.currentTrack\r\n\r\n  if (track) {\r\n    track.sampleCount = await ioReader.readUint32()\r\n    if (flags & TRUNFlags.DATA_OFFSET) {\r\n      track.dataOffset = await ioReader.readInt32()\r\n    }\r\n    if (flags & TRUNFlags.FIRST_FLAG) {\r\n      track.firstSampleFlags = await ioReader.readUint32()\r\n    }\r\n    for (let i = 0; i < track.sampleCount; i++) {\r\n      if (flags & TRUNFlags.DURATION) {\r\n        track.sampleDurations.push(await ioReader.readUint32())\r\n      }\r\n      if (flags & TRUNFlags.SIZE) {\r\n        track.sampleSizes.push(await ioReader.readUint32())\r\n      }\r\n      if (flags & TRUNFlags.FLAGS) {\r\n        track.sampleFlags.push(await ioReader.readUint32())\r\n      }\r\n      if (flags & TRUNFlags.CTS_OFFSET) {\r\n        if (version === 0) {\r\n          track.sampleCompositionTimeOffset.push(await ioReader.readUint32())\r\n        }\r\n        else {\r\n          track.sampleCompositionTimeOffset.push(await ioReader.readInt32())\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 vpcc box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as vp9 from '../../../codecs/vp9'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_VP9\r\n\r\n  if ((atom.size - 4) <= 0) {\r\n    return\r\n  }\r\n\r\n  const data = avMalloc(atom.size - 4)\r\n  const extradata = await ioReader.readBuffer(atom.size - 4, mapSafeUint8Array(data, atom.size - 4))\r\n\r\n  if (movContext.foundMoov) {\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n    avFree(data)\r\n  }\r\n  else {\r\n    stream.codecpar.extradata = data\r\n    stream.codecpar.extradataSize = atom.size - 4\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n  }\r\n\r\n  vp9.parseAVCodecParameters(stream, stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 hvcc box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as vvc from '../../../codecs/vvc'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const version = await ioReader.readUint8()\r\n  // flags\r\n  await ioReader.skip(3)\r\n\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_VVC\r\n\r\n  if ((atom.size - 4) <= 0) {\r\n    return\r\n  }\r\n\r\n  const data = avMalloc(atom.size - 4)\r\n  const extradata = await ioReader.readBuffer(atom.size - 4, mapSafeUint8Array(data, atom.size - 4))\r\n\r\n  if (movContext.foundMoov) {\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n    avFree(data)\r\n  }\r\n  else {\r\n    stream.codecpar.extradata = data\r\n    stream.codecpar.extradataSize = atom.size - 4\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = extradata.slice()\r\n  }\r\n\r\n  vvc.parseAVCodecParameters(stream, stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vvcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia wave av1c box parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport Stream from '../../../AVStream'\r\nimport { Atom, MOVContext } from '../type'\r\nimport * as logger from 'common/util/logger'\r\nimport mktag from '../../../function/mktag'\r\nimport { BoxType } from '../boxType'\r\nimport esds from './esds'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function read(ioReader: IOReader, stream: Stream, atom: Atom, movContext: MOVContext) {\r\n\r\n  const now = ioReader.getPos()\r\n\r\n  const endPos = now + static_cast<int64>(atom.size)\r\n\r\n  while (ioReader.getPos() < endPos) {\r\n    const size = await ioReader.readUint32()\r\n    const type = await ioReader.readUint32()\r\n\r\n    if (size === 0) {\r\n      logger.warn('wave invalid box size 0, skip')\r\n      await ioReader.skip(Number(endPos - ioReader.getPos()))\r\n      continue\r\n    }\r\n\r\n    if (type === mktag(BoxType.ESDS)) {\r\n      await esds(\r\n        ioReader,\r\n        stream,\r\n        {\r\n          type,\r\n          size: size - 8\r\n        },\r\n        movContext\r\n      )\r\n    }\r\n    else {\r\n      await ioReader.skip(Math.min(size - 8, Number(endPos - ioReader.getPos())))\r\n    }\r\n  }\r\n\r\n  const remainingLength = atom.size - Number(ioReader.getPos() - now)\r\n  if (remainingLength > 0) {\r\n    await ioReader.skip(remainingLength)\r\n  }\r\n  else if (remainingLength < 0) {\r\n    logger.error(`read vpcc error, size: ${atom.size}, read: ${atom.size - remainingLength}`)\r\n  }\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in big end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktag(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 0; i < 4; i++) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia av1 syntax util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\n\r\nexport function f(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function uvlc(bitReader: BitReader) {\r\n  let leadingZeros = 0\r\n  while (true) {\r\n    let done = f(bitReader, 1)\r\n    if (done) {\r\n      break\r\n    }\r\n    leadingZeros++\r\n  }\r\n  if (leadingZeros >= 32) {\r\n    return (1 << 32) - 1\r\n  }\r\n  const value =\tf(bitReader, leadingZeros)\r\n  return value + (1 << leadingZeros) - 1\r\n}\r\n\r\nexport function le(bitReader: BitReader, n: number) {\r\n  let t = 0\r\n  for (let i = 0; i < n; i++) {\r\n    let byte = f(bitReader, 8)\r\n    t += (byte << (i * 8))\r\n  }\r\n  return t\r\n}\r\n\r\nexport function leb128(bitReader: BitReader) {\r\n  let value = 0\r\n  let Leb128Bytes = 0\r\n  for (let i = 0; i < 8; i++ ) {\r\n    let leb128Byte_ = f(bitReader, 8)\r\n    value |= ((leb128Byte_ & 0x7f) << (i * 7))\r\n    Leb128Bytes += 1\r\n    if (!(leb128Byte_ & 0x80)) {\r\n      break\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\nexport function su(bitReader: BitReader, n: number) {\r\n  let value = f(bitReader, n)\r\n  let signMask = 1 << (n - 1)\r\n  if (value & signMask) {\r\n    value = value - 2 * signMask\r\n  }\r\n  return value\r\n}\r\n\r\nexport function ns(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tf(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit =\tf(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n\r\nexport function L(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0 ; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function NS(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tL(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit = L(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n","/*\r\n * libmedia expgolomb util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\nimport BitWriter from 'common/io/BitWriter'\r\n\r\nconst UESizeTable = [\r\n  // 0 的二进制所需的比特个数\r\n  1,\r\n  // 1 的二进制所需的比特个数    \r\n  1,\r\n  // 2~3 的二进制所需的比特个数   \r\n  2, 2,\r\n  // 4~7 的二进制所需的比特个数\r\n  3, 3, 3, 3,\r\n  // 8~15 的二进制所需的比特个数\r\n  4, 4, 4, 4, 4, 4, 4, 4,\r\n  // 16~31 的二进制所需的比特个数\r\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\r\n  // 32~63 的二进制所需的比特个数\r\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\r\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\r\n  // 64~127 的二进制所需的比特个数\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  // 128~255 的二进制所需的比特个数\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\r\n]\r\n\r\n/**\r\n * ue(v) 指数哥伦布解码\r\n */\r\nexport function readUE(bitReader: BitReader) {\r\n  let result = 0\r\n  // leadingZeroBits\r\n  let i = 0\r\n\r\n  while (i < 32 && bitReader.readU1() === 0) {\r\n    i++\r\n  }\r\n  // 计算 read_bits ( leadingZeroBits )\r\n  result = bitReader.readU(i)\r\n  // 计算 codeNum，1 << i 即为 2 的 i 次幂\r\n  result += (1 << i) - 1\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * se(v) 有符号指数哥伦布解码\r\n */\r\nexport function readSE(bitReader: BitReader) {\r\n  let result = readUE(bitReader)\r\n\r\n  // 判断 result 的奇偶性\r\n  if (result & 0x01) {\r\n    // 如果为奇数，说明编码前 > 0\r\n    result = (result + 1) / 2\r\n  }\r\n  else {\r\n    // 如果为偶数，说明编码前 <= 0\r\n    result = -result / 2\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * te(v) 截断指数哥伦布解码\r\n */\r\nexport function readTE(bitReader: BitReader, x: number) {\r\n  let result = 0\r\n  // 判断取值上限\r\n  if (x === 1) {\r\n    // 如果为 1 则将读取到的比特值取反\r\n    result = 1 - bitReader.readU1()\r\n  }\r\n  else if (x > 1) {\r\n    // 否则按照 ue(v) 进行解码\r\n    result = readUE(bitReader)\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * ue(v) 指数哥伦布编码\r\n */\r\nexport function writeUE(bitWriter: BitWriter, value: number) {\r\n  let size = 0\r\n\r\n  if (value === 0) {\r\n    // 0 直接编码为 1\r\n    bitWriter.writeU1(1)\r\n  }\r\n  else {\r\n    let tmp = ++value\r\n    // 判断所需比特个数是否大于 16 位\r\n    if ( tmp >= 0x00010000 ) {\r\n      size += 16\r\n      tmp >>= 16\r\n    }\r\n\r\n    // 判断此时所需比特个数是否大于 8 位\r\n    if ( tmp >= 0x100 ) {\r\n      size += 8\r\n      tmp >>= 8\r\n    }\r\n    // 最终 tmp 移位至 8 位以内，去查表\r\n    size += UESizeTable[tmp]\r\n\r\n    // 最终得出编码 value 所需的总比特数：2 * size - 1\r\n    bitWriter.writeU(2 * size - 1, value)\r\n  }\r\n}\r\n\r\n/**\r\n * se(v) 有符号指数哥伦布编码\r\n */\r\nexport function writeSE(bitWriter: BitWriter, value: number) {\r\n  if (value <= 0) {\r\n    writeUE(bitWriter, -value * 2)\r\n  }\r\n  else {\r\n    writeUE(bitWriter, value * 2 - 1)\r\n  }\r\n}\r\n\r\n/**\r\n * te(v) 截断指数哥伦布编码\r\n */\r\nexport function writeTE(bitWriter: BitWriter, x: number, value: number) {\r\n  if (x === 1) {\r\n    bitWriter.writeU1(1 & ~value)\r\n  }\r\n  else if (x > 1) {\r\n    writeUE(bitWriter, value)\r\n  }\r\n}\r\n","/*\r\n * libmedia int read util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport function r8(p: pointer<void>): uint8 {\r\n  return accessof(reinterpret_cast<pointer<uint8>>(p))\r\n}\r\n\r\nexport function rl16(p: pointer<void>): uint16 {\r\n  return (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) | r8(p)\r\n}\r\n\r\nexport function rb16(p: pointer<void>): uint16 {\r\n  return (r8(p) << 8) | r8(reinterpret_cast<pointer<uint8>>(p + 1))\r\n}\r\n\r\nexport function rl24(p: pointer<void>): int32 {\r\n  return (r8(reinterpret_cast<pointer<uint8>>(p + 2)) << 16) | (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) + r8(p)\r\n}\r\n\r\nexport function rb24(p: pointer<void>): int32 {\r\n  return (r8(p) << 16) | (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) | r8(reinterpret_cast<pointer<uint8>>(p + 2))\r\n}\r\n\r\nexport function rl32(p: pointer<void>): int32 {\r\n  return (rl16(reinterpret_cast<pointer<uint8>>(p + 2)) << 16) | rl16(p)\r\n}\r\n\r\nexport function rb32(p: pointer<void>): int32 {\r\n  return (rb16(p) << 16) | rb16(reinterpret_cast<pointer<uint8>>(p + 2))\r\n}\r\n\r\nexport function rl64(p: pointer<void>): int64 {\r\n  return (BigInt(rl32(reinterpret_cast<pointer<uint8>>(p + 4))) << 32n) | BigInt(rl32(p))\r\n}\r\n\r\nexport function rb64(p: pointer<void>): int64 {\r\n  return (BigInt(rb32(p)) << 32n) | BigInt(rb32(reinterpret_cast<pointer<uint8>>(p + 4)))\r\n}\r\n","/*\r\n * libmedia nalu util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport * as array from 'common/util/array'\r\n\r\nexport function isAnnexb(data: Uint8ArrayInterface) {\r\n  return data.length > 4\r\n  && data[0] === 0\r\n  && data[1] === 0\r\n  && (\r\n    data[2] === 1\r\n    || data[2] === 0 && data[3] === 1\r\n  )\r\n}\r\n\r\nexport function getNextNaluStart(data: Uint8ArrayInterface, offset: number) {\r\n  let t = 0\r\n  for (let i = offset; i < data.length; i++) {\r\n    switch (data[i]) {\r\n      case 0:\r\n        t++\r\n        break\r\n      case 1:\r\n        if (t >= 2) {\r\n          return {\r\n            offset: i - Math.min(t, 3),\r\n            startCode: Math.min(t + 1, 4)\r\n          }\r\n        }\r\n        t = 0\r\n        break\r\n      default:\r\n        t = 0\r\n    }\r\n  }\r\n  return {\r\n    offset: -1,\r\n    startCode: 0\r\n  }\r\n}\r\n\r\nexport function splitNaluByStartCode<T extends Uint8ArrayInterface>(buffer: T): T[] {\r\n  const list = []\r\n  let offset = 0\r\n  let current = getNextNaluStart(buffer, offset)\r\n  let next = {\r\n    offset: -1,\r\n    startCode: 0\r\n  }\r\n  while (next = getNextNaluStart(buffer, current.offset + current.startCode), next.offset > -1) {\r\n    list.push(buffer.subarray(current.offset + current.startCode, next.offset, true))\r\n    current = next\r\n  }\r\n  list.push(buffer.subarray(current.offset + current.startCode, undefined, true))\r\n\r\n  return list\r\n}\r\n\r\nexport function splitNaluByLength<T extends Uint8ArrayInterface>(buffer: T, naluLengthSizeMinusOne: int32): T[] {\r\n  const list = []\r\n  const bufferReader = new BufferReader(buffer)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    const nalu = buffer.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length, true)\r\n    bufferReader.skip(length)\r\n    list.push(nalu)\r\n  }\r\n  return list\r\n}\r\n\r\nexport function joinNaluByStartCode(nalus: Uint8ArrayInterface[], output?: Uint8Array, slice: boolean = false): Uint8Array {\r\n  if (!output) {\r\n    let length = nalus.reduce((prev, nalu, index) => {\r\n      return prev + ((index && slice) ? 3 : 4) + nalu.length\r\n    }, 0)\r\n    output = new Uint8Array(length)\r\n  }\r\n\r\n  const bufferWriter = new BufferWriter(output)\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index && slice) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n  })\r\n\r\n  return output\r\n}\r\n\r\nexport function joinNaluByLength(nalus: Uint8Array[], naluLengthSizeMinusOne: int32, output?: Uint8Array): Uint8Array {\r\n  if (!output) {\r\n    const length = nalus.reduce((prev, nalu) => {\r\n      return prev + naluLengthSizeMinusOne + 1 + nalu.length\r\n    }, 0)\r\n    output = new Uint8Array(length)\r\n  }\r\n  const bufferWriter = new BufferWriter(output)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu)\r\n  })\r\n  return output\r\n}\r\n\r\nexport function naluUnescape(data: Uint8Array, start = 0, end?: number) {\r\n\r\n  if (!end) {\r\n    end = data.length\r\n  }\r\n\r\n  const buffer = new Uint8Array(data.length)\r\n\r\n  let zeroCount = 0\r\n  let pos = 0\r\n  for (let i = 0; i < data.length; i++) {\r\n    if (i >= start && i < end) {\r\n      if (data[i] === 0) {\r\n        zeroCount++\r\n      }\r\n      else {\r\n        if (data[i] === 3 && zeroCount === 2 && i + 1 < data.length && data[i + 1] <= 3) {\r\n          i++\r\n          if (i === data.length) {\r\n            break\r\n          }\r\n          else {\r\n            if (data[i] === 0) {\r\n              zeroCount = 1\r\n            }\r\n            else {\r\n              zeroCount = 0\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          zeroCount = 0\r\n        }\r\n      }\r\n    }\r\n    buffer[pos++] = data[i]\r\n  }\r\n\r\n  return buffer.slice(0, pos)\r\n}\r\n\r\nexport function naluEscape(data: Uint8Array, start: number = 0, end?: number) {\r\n  if (!end) {\r\n    end = data.length\r\n  }\r\n\r\n  const indexes = []\r\n  let zeroCount = 0\r\n  for (let i = start; i < end; i++) {\r\n\r\n    if (i >= end) {\r\n      break\r\n    }\r\n\r\n    if (data[i] === 0) {\r\n      zeroCount++\r\n    }\r\n    else {\r\n      if (data[i] <= 3 && zeroCount === 2) {\r\n        indexes.push(i)\r\n      }\r\n      zeroCount = 0\r\n    }\r\n  }\r\n\r\n  if (indexes.length) {\r\n    const buffer = new Uint8Array(data.length + indexes.length)\r\n    let pos = 0\r\n    let subData = data.subarray(0, indexes[0])\r\n    buffer.set(subData, pos)\r\n    pos += subData.length\r\n\r\n    buffer[pos++] = 3\r\n\r\n    for (let i = 1; i < indexes.length; i++) {\r\n      subData = data.subarray(indexes[i - 1], indexes[i])\r\n      buffer.set(subData, pos)\r\n      pos += subData.length\r\n      buffer[pos++] = 3\r\n    }\r\n\r\n    subData = data.subarray(indexes[indexes.length - 1], data.length)\r\n    buffer.set(subData, pos)\r\n    pos += subData.length\r\n\r\n    return buffer\r\n  }\r\n  else {\r\n    return data\r\n  }\r\n}\r\n","/**\r\n * bit 读取器\r\n */\r\n\r\nimport { IOError } from './error'\r\nimport * as logger from '../util/logger'\r\nimport { Uint8ArrayInterface } from './interface'\r\n\r\nexport default class BitReader {\r\n\r\n  private buffer: Uint8Array\r\n\r\n  private pointer: number\r\n\r\n  private bitsLeft: number\r\n\r\n  private size: number\r\n\r\n  private endPointer: number\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array) => number\r\n\r\n  /**\r\n   * @param data 待读取的字节\r\n   * @param bigEndian 是否按大端字节序读取，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024) {\r\n    this.pointer = 0\r\n    this.bitsLeft = 8\r\n\r\n    this.size = size\r\n    this.endPointer = 0\r\n    this.error = 0\r\n\r\n    this.buffer = new Uint8Array(this.size)\r\n  }\r\n\r\n  /**\r\n   * 不影响原读取操作的情况下，读取 1 个比特\r\n   */\r\n  public peekU1() {\r\n    let result = 0\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitsLeft === 0) {\r\n      this.flush()\r\n    }\r\n\r\n    let pointer = this.pointer\r\n    let bitsLeft = this.bitsLeft\r\n\r\n    if (bitsLeft === 0) {\r\n      pointer++\r\n      bitsLeft = 8\r\n    }\r\n\r\n    result = (this.buffer[pointer] >> (bitsLeft - 1)) & 0x01\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 读取 1 个比特\r\n   */\r\n  public readU1() {\r\n    let result = 0\r\n\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitsLeft === 0) {\r\n      this.flush()\r\n    }\r\n\r\n    this.bitsLeft--\r\n\r\n    result = (this.buffer[this.pointer] >> this.bitsLeft) & 0x01\r\n\r\n    if (this.bitsLeft === 0) {\r\n      this.pointer++\r\n      this.bitsLeft = 8\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 读取 n 个比特\r\n   * \r\n   * @param n\r\n   */\r\n  public readU(n: number) {\r\n    let result = 0\r\n    for (let i = 0; i < n; i++) {\r\n      result |= (this.readU1() << (n - i - 1))\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可读字节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.endPointer - this.pointer\r\n  }\r\n\r\n  public getPos() {\r\n    return this.pointer\r\n  }\r\n\r\n  public skip(n: number) {\r\n    const byte = (n - (n % 8)) / 8\r\n\r\n    this.pointer += byte\r\n\r\n    const bitsLeft = n % 8\r\n\r\n    if (this.bitsLeft <= bitsLeft) {\r\n      this.pointer++\r\n      this.bitsLeft = 8 - (bitsLeft - this.bitsLeft)\r\n    }\r\n    else {\r\n      this.bitsLeft -= bitsLeft\r\n    }\r\n  }\r\n\r\n  public flush() {\r\n\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOReader error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.bitsLeft === 0) {\r\n      this.pointer++\r\n    }\r\n\r\n    if (this.size - this.remainingLength() <= 0) {\r\n      return\r\n    }\r\n\r\n    if (this.pointer < this.endPointer) {\r\n      this.buffer.set(this.buffer.subarray(this.pointer, this.endPointer), 0)\r\n\r\n      const len = this.onFlush(this.buffer.subarray(this.endPointer - this.pointer, this.size))\r\n\r\n      if (len < 0) {\r\n        this.error = len\r\n        throw Error('IOReader error, flush failed')\r\n      }\r\n\r\n      this.endPointer = this.endPointer - this.pointer + len\r\n      this.pointer = 0\r\n    }\r\n    else {\r\n      const len = this.onFlush(this.buffer)\r\n\r\n      this.endPointer = len\r\n      this.pointer = 0\r\n      this.bitsLeft = 8\r\n\r\n      if (len < 0) {\r\n        this.error = len\r\n        throw Error('IOReader error, flush failed')\r\n      }\r\n    }\r\n  }\r\n\r\n  public getBuffer() {\r\n    return this.buffer\r\n  }\r\n\r\n  public appendBuffer(buffer: Uint8ArrayInterface) {\r\n    if (this.size - this.endPointer >= buffer.length) {\r\n      this.buffer.set(buffer, this.endPointer)\r\n      this.endPointer += buffer.length\r\n    }\r\n    else {\r\n      this.buffer.set(this.buffer.subarray(this.pointer, this.endPointer), 0)\r\n      this.endPointer = this.endPointer - this.pointer\r\n      this.pointer = 0\r\n\r\n      if (this.size - this.endPointer >= buffer.length) {\r\n        this.buffer.set(buffer, this.endPointer)\r\n        this.endPointer += buffer.length\r\n      }\r\n      else {\r\n        const len = Math.min(this.size - this.endPointer, buffer.length)\r\n        this.buffer.set(buffer.subarray(0, len), this.endPointer)\r\n        this.endPointer += len\r\n\r\n        logger.warn('BSReader, call appendBuffer but the buffer\\'s size is lagger then the remaining size')\r\n      }\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    this.pointer = this.endPointer = 0\r\n    this.bitsLeft = 8\r\n    this.error = 0\r\n  }\r\n\r\n  public skipPadding() {\r\n    if (this.bitsLeft < 8) {\r\n      this.bitsLeft = 8\r\n      this.pointer++\r\n    }\r\n  }\r\n}\r\n","/**\r\n * bit 写存器\r\n */\r\n\r\nimport { IOError } from './error'\r\n\r\n/**\r\n * 写字节流工具\r\n */\r\n\r\nexport default class BitWriter {\r\n\r\n  private buffer: Uint8Array\r\n\r\n  private pointer: number\r\n\r\n  private bitPointer: number\r\n\r\n  private size: number\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array, pos?: number) => number\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024) {\r\n    this.pointer = 0\r\n    this.bitPointer = 0\r\n    this.size = size\r\n    this.error = 0\r\n\r\n    this.buffer = new Uint8Array(this.size)\r\n  }\r\n\r\n  /**\r\n   * 写一个 bit\r\n   * \r\n   * @param bit \r\n   */\r\n  public writeU1(bit: number) {\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitPointer >= 8) {\r\n      this.flush()\r\n    }\r\n\r\n    if (bit & 0x01) {\r\n      this.buffer[this.pointer] |= (1 << (7 - this.bitPointer))\r\n    }\r\n    else {\r\n      this.buffer[this.pointer] &= ~(1 << (7 - this.bitPointer))\r\n    }\r\n\r\n\r\n    this.bitPointer++\r\n\r\n    if (this.bitPointer === 8) {\r\n      this.pointer++\r\n      this.bitPointer = 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 n 个比特\r\n   * \r\n   * @param n\r\n   */\r\n  public writeU(n: number, v: number) {\r\n    for (let i = 0; i < n; i++) {\r\n      this.writeU1(v >> (n - i - 1 ) & 0x01)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.size - this.pointer\r\n  }\r\n\r\n  public flush() {\r\n\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('BSWriter error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.pointer) {\r\n      if (this.bitPointer && this.pointer > 1) {\r\n        const ret = this.onFlush(this.buffer.subarray(0, this.pointer - 1))\r\n        if (ret !== 0) {\r\n          this.error = ret\r\n          throw Error('BSWriter error, flush failed')\r\n        }\r\n        this.buffer[0] = this.buffer[this.pointer]\r\n      }\r\n      else if (this.bitPointer === 0) {\r\n        const ret = this.onFlush(this.buffer.subarray(0, this.pointer))\r\n        if (ret !== 0) {\r\n          this.error = ret\r\n          throw Error('BSWriter error, flush failed')\r\n        }\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  public padding() {\r\n    while (this.bitPointer !== 0) {\r\n      this.writeU1(0)\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    this.pointer = 0\r\n    this.bitPointer = 0\r\n    this.error = 0\r\n  }\r\n\r\n  public getBuffer() {\r\n    return this.buffer\r\n  }\r\n\r\n  public getPointer() {\r\n    return this.pointer\r\n  }\r\n}\r\n","/**\r\n * 写字节流工具\r\n */\r\n\r\nimport * as logger from '../util/logger'\r\nimport { Uint8ArrayInterface, BytesWriterSync } from './interface'\r\nimport * as text from '../util/text'\r\n\r\nexport default class BufferWriter implements BytesWriterSync {\r\n\r\n  private data: DataView\r\n\r\n  private buffer: Uint8ArrayInterface\r\n\r\n  private byteStart: number\r\n\r\n  private pos: number\r\n\r\n  private size: number\r\n\r\n  private littleEndian: boolean\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   * @param bigEndian 是否按大端字节序写，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(data: Uint8ArrayInterface, bigEndian: boolean = true) {\r\n    this.buffer = data\r\n    this.data = data instanceof Uint8Array ? new DataView(data.buffer) : data.view\r\n    this.byteStart = data instanceof Uint8Array ? data.byteOffset : 0\r\n    this.pos = 0\r\n    this.size = data.byteLength\r\n    this.littleEndian = !bigEndian\r\n  }\r\n\r\n  /**\r\n   * 写 8 位无符号整数\r\n   */\r\n  public writeUint8(value: number) {\r\n    this.data.setUint8(this.pos++ + this.byteStart, value)\r\n  }\r\n\r\n  /**\r\n   * 读取 16 位无符号整数\r\n   */\r\n  public writeUint16(value: number) {\r\n    this.data.setUint16(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 2\r\n  }\r\n\r\n  /**\r\n   * 写 24 位无符号整数\r\n   */\r\n  public writeUint24(value: number) {\r\n    const high = value & 0xf00\r\n    const middle = value & 0x0f0\r\n    const low = value & 0x00f\r\n    if (this.littleEndian) {\r\n      this.writeUint8(low)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(high)\r\n    }\r\n    else {\r\n      this.writeUint8(high)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(low)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 32 位无符号整数\r\n   */\r\n  public writeUint32(value: number) {\r\n    this.data.setUint32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写 64 位无符号整数\r\n   */\r\n  public writeUint64(value: bigint) {\r\n    const low = value & 0xffffffffn\r\n    const high = (value & (0xffffffffn << 32n)) >> 32n\r\n    if (this.littleEndian) {\r\n      this.writeUint32(Number(low))\r\n      this.writeUint32(Number(high))\r\n    }\r\n    else {\r\n      this.writeUint32(Number(high))\r\n      this.writeUint32(Number(low))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 8 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeInt8(value: number) {\r\n    this.data.setInt8(this.pos++ + this.byteStart, value)\r\n  }\r\n\r\n  /**\r\n   * 写 16 位有符号整数\r\n   */\r\n  public writeInt16(value: number) {\r\n    this.data.setInt16(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 2\r\n  }\r\n\r\n  /**\r\n   * 写 32 位有符号整数\r\n   */\r\n  public writeInt32(value: number) {\r\n    this.data.setInt32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写 64 位有符号整数\r\n   */\r\n  public writeInt64(value: bigint) {\r\n    const low = value & BigInt(0xffffffff)\r\n    const high = (value & (BigInt(0xffffffff) << 32n)) >> 32n\r\n    if (this.littleEndian) {\r\n      this.writeInt32(Number(low))\r\n      this.writeInt32(Number(high))\r\n    }\r\n    else {\r\n      this.writeInt32(Number(high))\r\n      this.writeInt32(Number(low))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写单精度浮点数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeFloat(value: number) {\r\n    this.data.setFloat32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写双精度浮点数\r\n   */\r\n  public writeDouble(value: number) {\r\n    this.data.setFloat64(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 8\r\n  }\r\n\r\n  /**\r\n   * 获取当前写指针\r\n   * \r\n   * @returns \r\n   */\r\n  public getPos() {\r\n    return this.pos\r\n  }\r\n\r\n  /**\r\n   * seek 写指针\r\n   * \r\n   * @param pos \r\n   */\r\n  public seek(pos: number) {\r\n    if (pos > this.size) {\r\n      pos = this.size\r\n    }\r\n    this.pos = Math.max(0, pos)\r\n  }\r\n\r\n  /**\r\n   * 跳过指定字节长度\r\n   * \r\n   * @param length \r\n   */\r\n  public skip(length: number) {\r\n    this.seek(this.pos + length)\r\n  }\r\n\r\n  /**\r\n   * 返回指定字节长度\r\n   * \r\n   * @param length \r\n   */\r\n  public back(length: number) {\r\n    this.seek(this.pos - length)\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingSize() {\r\n    return this.size - this.pos\r\n  }\r\n\r\n  /**\r\n   * 写指定长度的二进制 buffer 数据\r\n   * \r\n   * @param length \r\n   * @returns \r\n   */\r\n  public writeBuffer(buffer: Uint8ArrayInterface) {\r\n    let length = buffer.length\r\n    if (this.remainingSize() < length) {\r\n      length = this.remainingSize()\r\n      logger.warn(`the remaining buffer size is smaller then the wrote buffer, hope set ${buffer.length}, but set ${length}`)\r\n    }\r\n    this.buffer.set(buffer, this.pos)\r\n    this.pos += buffer.length\r\n  }\r\n\r\n  /**\r\n   * 写一个字符串\r\n   */\r\n  public writeString(str: string) {\r\n    const buffer = text.encode(str)\r\n    this.writeBuffer(buffer)\r\n    return buffer.length\r\n  }\r\n\r\n  public getWroteBuffer() {\r\n    return this.buffer.subarray(0, this.pos)\r\n  }\r\n\r\n  public resetBuffer(data: Uint8ArrayInterface, bigEndian: boolean = true) {\r\n    this.buffer = data\r\n    this.data = data instanceof Uint8Array ? new DataView(data.buffer) : data.view\r\n    this.byteStart = data instanceof Uint8Array ? data.byteOffset : 0\r\n\r\n    this.pos = 0\r\n    this.size = data.byteLength\r\n    this.littleEndian = !bigEndian\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}