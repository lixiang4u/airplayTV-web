{"version":3,"file":"src_avformat_formats_IMp3Format_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/codecs/mp3.ts","webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/IMp3Format.ts","webpack://AVPlayer/./src/avformat/formats/mp3/frameHeader.ts","webpack://AVPlayer/./src/avformat/formats/mp3/id3v2.ts","webpack://AVPlayer/./src/avformat/formats/mp3/mp3.ts"],"sourcesContent":["/*\r\n * libmedia mp3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVStream from '../AVStream'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\n\r\nconst MpegAudioV10SampleRateTable = [44100, 48000, 32000, 0]\r\n\r\nconst MpegAudioV20SampleRateTable = [22050, 24000, 16000, 0]\r\n\r\nconst MpegAudioV25SampleRateTable = [11025, 12000, 8000, 0]\r\n\r\nconst MpegAudioV10FrameSizeTable = [0, 1152, 1152, 384]\r\n\r\nconst MpegAudioV20FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV25FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV1L1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1]\r\n\r\nconst MpegAudioV1L2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1]\r\n\r\nconst MpegAudioV1L3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1]\r\n\r\nconst MpegAudioV2L1BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, -1]\r\n\r\nconst MpegAudioV2L2L3BitRateTable = [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1]\r\n\r\nexport function getSampleRateByVersionIndex(version: number, samplingFreqIndex: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25SampleRateTable[samplingFreqIndex]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20SampleRateTable[samplingFreqIndex]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10SampleRateTable[samplingFreqIndex]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getFrameSizeByVersionLayer(version: number, layer: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25FrameSizeTable[layer]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20FrameSizeTable[layer]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10FrameSizeTable[layer]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getBitRateByVersionLayerIndex(version: number, layer: number, index: number) {\r\n\r\n  switch (layer) {\r\n    // layer3\r\n    case 1:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L3BitRateTable[index]\r\n      }\r\n      break\r\n    // layer2\r\n    case 2:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L2BitRateTable[index]\r\n      }\r\n    // layer1\r\n    case 3:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L1BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L1BitRateTable[index]\r\n      }\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getProfileByLayer(layer: number) {\r\n  switch (layer) {\r\n    case 1:\r\n      // Layer 3\r\n      return 34\r\n    case 2:\r\n      // Layer 2\r\n      return 33\r\n    case 3:\r\n      // Layer 1\r\n      return 32\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport const enum MP3Profile {\r\n  Layer1 = 32,\r\n  Layer2 = 33,\r\n  Layer3 = 34\r\n}\r\n\r\nexport const MP3Profile2Name: Record<MP3Profile, string> = {\r\n  [MP3Profile.Layer1]: 'Layer1',\r\n  [MP3Profile.Layer2]: 'Layer2',\r\n  [MP3Profile.Layer3]: 'Layer3'\r\n}\r\n\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, buffer: Uint8ArrayInterface) {\r\n  if (buffer && buffer.length >= 4) {\r\n    const ver = (buffer[1] >>> 3) & 0x03\r\n    const layer = (buffer[1] & 0x06) >> 1\r\n    // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n    const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n    const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n    const channelCount = channelMode !== 3 ? 2 : 1\r\n    const profile = getProfileByLayer(layer)\r\n    const sampleRate = getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channelCount\r\n  }\r\n}\r\n","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from '../avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n  \r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public destroy(formatContext: AVIFormatContext): void {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia mp3 format decode\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat } from '../avformat'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData } from 'avutil/util/avpacket'\r\nimport AVStream from '../AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport * as text from 'common/util/text'\r\nimport { IOFlags } from 'common/io/flags'\r\nimport * as mp3 from '../codecs/mp3'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { ID3V2, Mp3MetaData, Mp3StreamContext } from './mp3/type'\r\nimport { ID3V1_SIZE, XING_TOC_COUNT, XingFlag } from './mp3/mp3'\r\nimport * as bigint from 'common/util/bigint'\r\nimport * as array from 'common/util/array'\r\nimport * as id3v2 from './mp3/id3v2'\r\nimport * as frameHeader from './mp3/frameHeader'\r\nimport { IOError } from 'common/io/error'\r\nimport { FrameHeader } from './mp3/frameHeader'\r\n\r\ninterface Mp3Context {\r\n  firstFramePos: int64\r\n  isVBR: boolean\r\n  hasID3v1: boolean\r\n  id3v2: ID3V2\r\n  fileSize: int64\r\n}\r\n\r\nexport default class IMp3Format extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.MP3\r\n\r\n  private context: Mp3Context\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n    this.context = {\r\n      firstFramePos: NOPTS_VALUE_BIGINT,\r\n      isVBR: false,\r\n      hasID3v1: false,\r\n      id3v2: {\r\n        version: NOPTS_VALUE,\r\n        revision: NOPTS_VALUE,\r\n        flags: NOPTS_VALUE\r\n      },\r\n      fileSize: 0n\r\n    }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    const stream = formatContext.createStream()\r\n\r\n    stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_MP3\r\n    stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n    stream.startTime = 0n\r\n    stream.firstDTS = 0n\r\n\r\n    const mp3Context: Mp3StreamContext = {\r\n      frameHeader: new FrameHeader(),\r\n      nbFrame: 0n,\r\n      tocIndexes: [],\r\n      nextDTS: 0n,\r\n      frameLength: 0\r\n    }\r\n\r\n    stream.privData = mp3Context\r\n\r\n    const metadata: Mp3MetaData = stream.metadata = {}\r\n\r\n    const fileSize = await formatContext.ioReader.fileSize()\r\n\r\n    if (formatContext.ioReader.flags & IOFlags.SEEKABLE) {\r\n      if (fileSize > ID3V1_SIZE) {\r\n        await formatContext.ioReader.seek(fileSize - static_cast<int64>(ID3V1_SIZE))\r\n\r\n        const isID3V1 = (await formatContext.ioReader.readString(3)) === 'TAG'\r\n\r\n        if (isID3V1) {\r\n          let buffer = await formatContext.ioReader.readBuffer(30)\r\n          metadata.title = text.decode(buffer).replace(/\\s/g, '')\r\n\r\n          buffer = await formatContext.ioReader.readBuffer(30)\r\n          metadata.artist = text.decode(buffer).replace(/\\s/g, '')\r\n\r\n          buffer = await formatContext.ioReader.readBuffer(30)\r\n          metadata.album = text.decode(buffer).replace(/\\s/g, '')\r\n\r\n          buffer = await formatContext.ioReader.readBuffer(4)\r\n          metadata.date = text.decode(buffer).replace(/\\s/g, '')\r\n\r\n          buffer = await formatContext.ioReader.readBuffer(30)\r\n          metadata.comment = text.decode(buffer).replace(/\\s/g, '')\r\n\r\n          if (buffer[28] === 0 && buffer[29] !== 0) {\r\n            metadata.track = buffer[29] + ''\r\n          }\r\n\r\n          metadata.genre = await formatContext.ioReader.readUint8()\r\n\r\n          this.context.hasID3v1 = true\r\n        }\r\n      }\r\n    }\r\n\r\n    await formatContext.ioReader.seek(0n)\r\n\r\n    const hasID3 = (await formatContext.ioReader.peekString(3)) === 'ID3'\r\n\r\n    if (hasID3) {\r\n      await formatContext.ioReader.skip(3)\r\n\r\n      this.context.id3v2.version = await formatContext.ioReader.readUint8()\r\n      this.context.id3v2.revision = await formatContext.ioReader.readUint8()\r\n      this.context.id3v2.flags = await formatContext.ioReader.readUint8()\r\n\r\n      const len = (((await formatContext.ioReader.readUint8()) & 0x7F) << 21)\r\n        | (((await formatContext.ioReader.readUint8()) & 0x7F) << 14)\r\n        | (((await formatContext.ioReader.readUint8()) & 0x7F) << 7)\r\n        | ((await formatContext.ioReader.readUint8()) & 0x7F)\r\n\r\n      await id3v2.parse(formatContext.ioReader, len, this.context.id3v2, metadata)\r\n    }\r\n\r\n    this.context.firstFramePos = formatContext.ioReader.getPos()\r\n\r\n    while (true) {\r\n      const word = await formatContext.ioReader.peekUint16()\r\n      if ((word & 0xffe0) === 0xffe0) {\r\n        break\r\n      }\r\n      await formatContext.ioReader.skip(1)\r\n    }\r\n\r\n    if (this.context.firstFramePos !== formatContext.ioReader.getPos()) {\r\n      logger.warn(`skipping ${formatContext.ioReader.getPos() - this.context.firstFramePos} bytes of junk at ${this.context.firstFramePos}`)\r\n      this.context.firstFramePos = formatContext.ioReader.getPos()\r\n    }\r\n\r\n    stream.codecpar.extradataSize = 4\r\n    stream.codecpar.extradata = avMalloc(stream.codecpar.extradataSize)\r\n    await formatContext.ioReader.peekBuffer(\r\n      stream.codecpar.extradataSize,\r\n      mapSafeUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize)\r\n    )\r\n    frameHeader.parse(mp3Context.frameHeader, await formatContext.ioReader.readUint32())\r\n\r\n    stream.codecpar.profile = mp3.getProfileByLayer(mp3Context.frameHeader.layer)\r\n    stream.codecpar.frameSize = mp3.getFrameSizeByVersionLayer(mp3Context.frameHeader.version, mp3Context.frameHeader.layer)\r\n    stream.codecpar.sampleRate = mp3.getSampleRateByVersionIndex(mp3Context.frameHeader.version, mp3Context.frameHeader.samplingFrequency)\r\n    stream.timeBase.num = 1\r\n    stream.timeBase.den = stream.codecpar.sampleRate\r\n\r\n    const channels = mp3Context.frameHeader.mode === 3 ? 1 : 2\r\n\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n\r\n    const bitRate = static_cast<int64>(mp3.getBitRateByVersionLayerIndex(\r\n      mp3Context.frameHeader.version,\r\n      mp3Context.frameHeader.layer,\r\n      mp3Context.frameHeader.bitrateIndex\r\n    ))\r\n\r\n    const frameLength = frameHeader.getFrameLength(mp3Context.frameHeader, stream.codecpar.sampleRate)\r\n\r\n    const pos = formatContext.ioReader.getPos()\r\n\r\n    const xingOffsetTable: number[][] = [[0, 9, 17], [0, 0, 0], [0, 9, 17], [0, 17, 32]]\r\n\r\n    await formatContext.ioReader.skip(xingOffsetTable[mp3Context.frameHeader.version][stream.codecpar.chLayout.nbChannels])\r\n\r\n    const tag = await formatContext.ioReader.readString(4)\r\n    if (tag === 'Xing' || tag === 'Info') {\r\n      this.context.isVBR = true\r\n      const flags = await formatContext.ioReader.readUint32()\r\n      if (flags & XingFlag.FRAMES) {\r\n        mp3Context.nbFrame = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n      }\r\n      if (flags & XingFlag.SIZE) {\r\n        this.context.fileSize = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n      }\r\n      const fSize = fileSize >= pos ? fileSize - pos : 0n\r\n\r\n      if (fSize && this.context.fileSize) {\r\n        const min = bigint.min(fSize, this.context.fileSize)\r\n        const delta = bigint.max(fSize, this.context.fileSize) - min\r\n        if (fSize > this.context.fileSize && delta > min >> 4n) {\r\n          mp3Context.nbFrame = 0n\r\n          logger.warn('invalid concatenated file detected - using bitrate for duration')\r\n        }\r\n        else if (delta > min >> 4n) {\r\n          logger.warn('filesize and duration do not match (growing file?)')\r\n        }\r\n      }\r\n\r\n      stream.duration = (mp3Context.nbFrame * static_cast<int64>(stream.codecpar.frameSize))\r\n      if (flags & XingFlag.TOC) {\r\n        for (let i = 0; i < XING_TOC_COUNT; i++) {\r\n          const b = await formatContext.ioReader.readUint8()\r\n          const pos = this.context.fileSize * static_cast<int64>(b) / 256n\r\n          const dts = stream.duration / static_cast<int64>(XING_TOC_COUNT) * static_cast<int64>(i)\r\n          const sample = {\r\n            dts,\r\n            pos,\r\n          }\r\n          mp3Context.tocIndexes.push(sample)\r\n        }\r\n      }\r\n\r\n      if (flags & XingFlag.QSCALE) {\r\n        await formatContext.ioReader.skip(4)\r\n      }\r\n      metadata.encoder = await formatContext.ioReader.readString(9)\r\n\r\n      this.context.firstFramePos += static_cast<int64>(frameLength)\r\n    }\r\n    else {\r\n      await formatContext.ioReader.seek(pos)\r\n      const tag = await formatContext.ioReader.readString(4)\r\n      if (tag === 'VBRI') {\r\n        // check tag version\r\n        if ((await formatContext.ioReader.readUint16()) === 1) {\r\n          // skip delay and quality\r\n          await formatContext.ioReader.skip(4)\r\n          this.context.fileSize = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n          mp3Context.nbFrame = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n          stream.duration = (mp3Context.nbFrame * static_cast<int64>(stream.codecpar.frameSize))\r\n        }\r\n        this.context.firstFramePos += static_cast<int64>(frameLength)\r\n      }\r\n      else {\r\n        this.context.isVBR = false\r\n        stream.codecpar.bitRate = bitRate * 1000n\r\n        mp3Context.nbFrame = (fileSize - this.context.firstFramePos - static_cast<int64>(ID3V1_SIZE)) / static_cast<int64>(frameLength)\r\n        stream.duration = (mp3Context.nbFrame * static_cast<int64>(stream.codecpar.frameSize))\r\n        mp3Context.frameLength = frameLength\r\n        this.context.fileSize = fileSize\r\n      }\r\n    }\r\n\r\n    await formatContext.ioReader.seek(this.context.firstFramePos)\r\n\r\n    while (true) {\r\n      const word = await formatContext.ioReader.peekUint16()\r\n      if ((word & 0xffe0) === 0xffe0) {\r\n        break\r\n      }\r\n      await formatContext.ioReader.skip(1)\r\n    }\r\n\r\n    if (this.context.firstFramePos !== formatContext.ioReader.getPos()) {\r\n      logger.warn(`skipping ${formatContext.ioReader.getPos() - this.context.firstFramePos} bytes of junk at ${this.context.firstFramePos}`)\r\n      this.context.firstFramePos = formatContext.ioReader.getPos()\r\n    }\r\n\r\n    if (mp3Context.tocIndexes.length) {\r\n      for (let i = 0; i < XING_TOC_COUNT; i++) {\r\n        mp3Context.tocIndexes[i].pos += this.context.firstFramePos\r\n      }\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const stream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n\r\n    const mp3Context = stream.privData as Mp3StreamContext\r\n\r\n    const pos = formatContext.ioReader.getPos()\r\n\r\n    if (this.context.hasID3v1 && (pos >= this.context.fileSize - static_cast<int64>(ID3V1_SIZE))) {\r\n      return IOError.END\r\n    }\r\n\r\n    try {\r\n      frameHeader.parse(mp3Context.frameHeader, await formatContext.ioReader.peekUint32())\r\n\r\n      let frameLength = this.context.isVBR ? frameHeader.getFrameLength(mp3Context.frameHeader, stream.codecpar.sampleRate) : mp3Context.frameLength\r\n\r\n      avpacket.size = frameLength\r\n      avpacket.pos = pos\r\n      avpacket.streamIndex = stream.index\r\n      avpacket.timeBase = stream.timeBase\r\n      avpacket.duration = static_cast<int64>(stream.codecpar.frameSize)\r\n      avpacket.dts = avpacket.pts = mp3Context.nextDTS\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n\r\n      mp3Context.nextDTS += static_cast<int64>(stream.codecpar.frameSize)\r\n\r\n      const data = avMalloc(frameLength)\r\n      addAVPacketData(avpacket, data, frameLength)\r\n      await formatContext.ioReader.readBuffer(frameLength, mapSafeUint8Array(data, frameLength))\r\n      return 0\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END) {\r\n        logger.error(error.message)\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async syncToFrame(formatContext: AVIFormatContext) {\r\n\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    const analyzeCount = 3\r\n\r\n    const stream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n    const mp3Context = stream.privData as Mp3StreamContext\r\n\r\n    while (true) {\r\n      try {\r\n        const word = await formatContext.ioReader.peekUint16()\r\n        if ((word & 0xffe0) === 0xffe0) {\r\n          pos = formatContext.ioReader.getPos()\r\n\r\n          frameHeader.parse(mp3Context.frameHeader, await formatContext.ioReader.peekUint32())\r\n\r\n          let frameLength = this.context.isVBR\r\n            ? frameHeader.getFrameLength(mp3Context.frameHeader, stream.codecpar.sampleRate)\r\n            : mp3Context.frameLength\r\n\r\n          if (frameLength > 500 * 1024) {\r\n            await formatContext.ioReader.skip(1)\r\n            continue\r\n          }\r\n\r\n          await formatContext.ioReader.skip(frameLength)\r\n\r\n          let count = 0\r\n          while (count <= analyzeCount) {\r\n            const word = await formatContext.ioReader.peekUint16()\r\n            if ((word & 0xffe0) === 0xffe0) {\r\n              frameHeader.parse(mp3Context.frameHeader, await formatContext.ioReader.peekUint32())\r\n              let frameLength = this.context.isVBR\r\n                ? frameHeader.getFrameLength(mp3Context.frameHeader, stream.codecpar.sampleRate)\r\n                : mp3Context.frameLength\r\n              await formatContext.ioReader.skip(frameLength)\r\n              count++\r\n            }\r\n            else {\r\n              break\r\n            }\r\n          }\r\n          if (count < analyzeCount) {\r\n            await formatContext.ioReader.seek(pos + 1n)\r\n            pos = NOPTS_VALUE_BIGINT\r\n          }\r\n          else {\r\n            break\r\n          }\r\n        }\r\n        await formatContext.ioReader.skip(1)\r\n      }\r\n      catch (error) {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n    }\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n\r\n    const now = formatContext.ioReader.getPos()\r\n    const mp3Context = stream.privData as Mp3StreamContext\r\n\r\n    if (stream.sampleIndexes.length) {\r\n      let index = array.binarySearch(stream.sampleIndexes, (item) => {\r\n        if (item.pts > timestamp) {\r\n          return -1\r\n        }\r\n        return 1\r\n      })\r\n      if (index > 0 && avRescaleQ(timestamp - stream.sampleIndexes[index - 1].pts, stream.timeBase, AV_MILLI_TIME_BASE_Q) < 10000n) {\r\n        logger.debug(`seek in sampleIndexes, found index: ${index}, pts: ${stream.sampleIndexes[index - 1].pts}, pos: ${stream.sampleIndexes[index - 1].pos}`)\r\n        await formatContext.ioReader.seek(stream.sampleIndexes[index - 1].pos)\r\n        mp3Context.nextDTS = stream.sampleIndexes[index - 1].dts\r\n        return now\r\n      }\r\n    }\r\n\r\n    if (timestamp === 0n) {\r\n      await formatContext.ioReader.seek(this.context.firstFramePos)\r\n      return now\r\n    }\r\n\r\n    if (this.context.isVBR) {\r\n      if (mp3Context.tocIndexes.length) {\r\n        const sample = mp3Context.tocIndexes[static_cast<int32>(timestamp / (stream.duration / static_cast<int64>(XING_TOC_COUNT)))]\r\n        if (sample) {\r\n          logger.debug(`seek in xing toc indexes, pts: ${sample.dts}, pos: ${sample.pos}`)\r\n          await formatContext.ioReader.seek(sample.pos)\r\n          mp3Context.nextDTS = sample.dts\r\n        }\r\n        else {\r\n          logger.debug('not found any keyframe index, try to seek in bytes')\r\n          const frameLength = frameHeader.getFrameLength(mp3Context.frameHeader, stream.codecpar.sampleRate)\r\n          const frame = timestamp / static_cast<int64>(stream.codecpar.frameSize)\r\n          const pos = frame * static_cast<int64>(frameLength) + this.context.firstFramePos\r\n          mp3Context.nextDTS = frame * static_cast<int64>(stream.codecpar.frameSize)\r\n          await formatContext.ioReader.seek(pos)\r\n        }\r\n      }\r\n      else {\r\n        logger.debug('not found any keyframe index, try to seek in bytes')\r\n        const frameLength = frameHeader.getFrameLength(mp3Context.frameHeader, stream.codecpar.sampleRate)\r\n        const frame = timestamp / static_cast<int64>(stream.codecpar.frameSize)\r\n        const pos = frame * static_cast<int64>(frameLength) + this.context.firstFramePos\r\n        mp3Context.nextDTS = frame * static_cast<int64>(stream.codecpar.frameSize)\r\n        await formatContext.ioReader.seek(pos)\r\n      }\r\n    }\r\n    else {\r\n      const frame = timestamp / static_cast<int64>(stream.codecpar.frameSize)\r\n      const pos = frame * static_cast<int64>(mp3Context.frameLength) + this.context.firstFramePos\r\n      mp3Context.nextDTS = frame * static_cast<int64>(stream.codecpar.frameSize)\r\n      await formatContext.ioReader.seek(pos)\r\n    }\r\n\r\n    await this.syncToFrame(formatContext)\r\n\r\n    return now\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return 1\r\n  }\r\n}\r\n","/*\r\n * libmedia mp3 FrameHeader utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mp3 from '../../codecs/mp3'\r\n\r\nexport class FrameHeader {\r\n  version: uint32\r\n  layer: uint32\r\n  protection: uint32\r\n  bitrateIndex: uint32\r\n  samplingFrequency: uint32\r\n  padding: uint32\r\n  private: uint32\r\n  mode: uint32\r\n  modeExtension: uint32\r\n  copyright: uint32\r\n  original: uint32\r\n  emphasis: uint32\r\n}\r\n\r\nexport function parse(header: FrameHeader, value: uint32) {\r\n  header.version = (value >> 19) & 3\r\n  header.layer = (value >> 17) & 3\r\n  header.protection = (value >> 16) & 1\r\n  header.bitrateIndex = (value >> 12) & 0x0f\r\n  header.samplingFrequency = (value >> 10) & 3\r\n  header.padding = (value >> 9) & 1\r\n  header.mode = (value >> 6) & 3\r\n  header.modeExtension = (value >> 4) & 3\r\n  header.copyright = (value >> 3) & 1\r\n  header.original = (value >> 2) & 1\r\n  header.emphasis = value & 3\r\n}\r\n\r\nexport function getFrameLength(header: FrameHeader, sampleRate: int32) {\r\n\r\n  let frameSize = mp3.getBitRateByVersionLayerIndex(\r\n    header.version,\r\n    header.layer,\r\n    header.bitrateIndex\r\n  )\r\n\r\n  switch (header.layer) {\r\n    case 1:\r\n    default:\r\n      // Layer 3\r\n      frameSize = ((frameSize * 144000) / (sampleRate << ((header.version === 3) ? 0 : 1))) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 2:\r\n      // Layer 2\r\n      frameSize = ((frameSize * 144000) / sampleRate) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 3:\r\n      // Layer 1\r\n      frameSize = ((frameSize * 12000) / sampleRate) >>> 0\r\n      frameSize = (frameSize + header.padding) * 4\r\n      break\r\n  }\r\n\r\n  return frameSize\r\n}\r\n","/*\r\n * libmedia mp3 id3v2 utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { ID3V2, Mp3MetaData } from './type'\r\nimport * as logger from 'common/util/logger'\r\nimport * as text from 'common/util/text'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nconst enum ID3v2Encoding {\r\n  ISO8859,\r\n  UTF16BOM,\r\n  UTF16BE,\r\n  UTF8\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nasync function getSize(ioReader: IOReader, len: number) {\r\n  let v = 0\r\n  while (len--) {\r\n    v = (v << 7) + ((await ioReader.readUint8()) & 0x7F)\r\n  }\r\n  return v\r\n}\r\n\r\nfunction putSize(ioWriter: IOWriterSync, size: number) {\r\n  ioWriter.writeUint8(size >> 21 & 0x7f)\r\n  ioWriter.writeUint8(size >> 14 & 0x7f)\r\n  ioWriter.writeUint8(size >> 7 & 0x7f)\r\n  ioWriter.writeUint8(size & 0x7f)\r\n}\r\n\r\nfunction decodeString(encoding: ID3v2Encoding, buffer: Uint8Array) {\r\n  let label: string = 'utf-8'\r\n\r\n  if (encoding === ID3v2Encoding.ISO8859) {\r\n    label = 'iso-8859-1'\r\n  }\r\n  else if (encoding === ID3v2Encoding.UTF16BOM) {\r\n    label = 'utf-16'\r\n  }\r\n  else if (encoding === ID3v2Encoding.UTF16BE) {\r\n    label = 'utf-16be'\r\n  }\r\n\r\n  const decoder = new TextDecoder(label)\r\n  return decoder.decode(buffer)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function parse(ioReader: IOReader, len: int32, id3v2: ID3V2, metadata: Mp3MetaData) {\r\n  const isV34 = id3v2.version !== 2\r\n  const tagHeaderLen = isV34 ? 10 : 6\r\n\r\n  let end = ioReader.getPos() + static_cast<int64>(len)\r\n\r\n  async function error() {\r\n    await ioReader.seek(end)\r\n  }\r\n\r\n  if (isV34 && (id3v2.flags & 0x40)) {\r\n    let extLen = await getSize(ioReader, 4)\r\n    if (id3v2.version === 4) {\r\n      // in v2.4 the length includes the length field we just read.\r\n      extLen -= 4\r\n    }\r\n    if (extLen < 0) {\r\n      logger.error('invalid extended header length')\r\n      return await error()\r\n    }\r\n    await ioReader.skip(extLen)\r\n    len -= extLen + 4\r\n    if (len < 0) {\r\n      logger.error('extended header too long')\r\n      await ioReader.seek(end)\r\n      return await error()\r\n    }\r\n  }\r\n\r\n  while (len > tagHeaderLen) {\r\n    let type: string\r\n    let size: number\r\n    if (isV34) {\r\n      type = await ioReader.readString(4)\r\n      size = await ioReader.readUint32()\r\n\r\n      if (!size) {\r\n        logger.error('invalid frame size')\r\n        break\r\n      }\r\n\r\n      // flags\r\n      await ioReader.readUint16()\r\n    }\r\n    else {\r\n      type = await ioReader.readString(3)\r\n      size = await ioReader.readUint24()\r\n    }\r\n\r\n    if (type === 'APIC') {\r\n      metadata.poster = await ioReader.readBuffer(size)\r\n    }\r\n    else if (type === 'USLT') {\r\n      const encoding = await ioReader.readUint8()\r\n      const language = await ioReader.readString(3)\r\n      const buffer = await ioReader.readBuffer(size - 4)\r\n      metadata.lyrics = `${language} ${decodeString(encoding, buffer)}`\r\n    }\r\n    else if (type === 'COMM' || type === 'COM') {\r\n      const encoding = await ioReader.readUint8()\r\n      const language = await ioReader.readString(3)\r\n      const buffer = await ioReader.readBuffer(size - 4)\r\n      metadata.comment = `${language} ${decodeString(encoding, buffer)}`\r\n    }\r\n    else {\r\n      let content: string\r\n      if (type[0] === 'T') {\r\n        const encoding = await ioReader.readUint8()\r\n        const buffer = await ioReader.readBuffer(size - 1)\r\n        content = decodeString(encoding, buffer)\r\n      }\r\n      else {\r\n        // @ts-ignore\r\n        content = await ioReader.readBuffer(size)\r\n      }\r\n\r\n      switch (type) {\r\n        case 'TIT2':\r\n        case 'TT2':\r\n          metadata.title = content\r\n          break\r\n        case 'TPE1':\r\n        case 'TP1':\r\n          metadata.artist = content\r\n          break\r\n        case 'TPE2':\r\n        case 'TP2':\r\n          metadata.albumArtist = content\r\n          break\r\n        case 'TPOS':\r\n          metadata.disc = content\r\n          break\r\n        case 'TCOP':\r\n          metadata.copyright = content\r\n          break\r\n        case 'TALB':\r\n        case 'TAL':\r\n          metadata.album = content\r\n          break\r\n        case 'TRCK':\r\n        case 'TRK':\r\n          metadata.track = content\r\n          break\r\n        case 'TYER':\r\n        case 'TDRL':\r\n        case 'TDRC':\r\n          metadata.date = content\r\n          break\r\n        case 'COMM':\r\n        case 'COM':\r\n          metadata.comment = content\r\n          break\r\n        case 'TCON':\r\n        case 'TCO':\r\n          metadata.genre = content\r\n          break\r\n        case 'TSSE':\r\n        case 'TEN':\r\n          metadata.encoder = content\r\n          break\r\n        case 'TCOM':\r\n          metadata.composer = content\r\n          break\r\n        case 'TENC':\r\n          metadata.encodedBy = content\r\n          break\r\n        case 'TLAN':\r\n          metadata.language = content\r\n          break\r\n        case 'TPE3':\r\n        case 'TP3':\r\n          metadata.performer = content\r\n          break\r\n        case 'TPUB':\r\n          metadata.publisher = content\r\n          break\r\n        case 'TCMP':\r\n        case 'TCP':\r\n          metadata.compilation = content\r\n          break\r\n        case 'TDEN':\r\n          metadata.creationTime = content\r\n          break\r\n        case 'TSOA':\r\n          metadata.albumSort = content\r\n          break\r\n        case 'TSOP':\r\n          metadata.artistSort = content\r\n          break\r\n        case 'TSOT':\r\n          metadata.titleSort = content\r\n          break\r\n        case 'TIT1':\r\n          metadata.grouping = content\r\n          break\r\n        default:\r\n          metadata[type] = content\r\n          break\r\n      }\r\n    }\r\n\r\n    len -= size + tagHeaderLen\r\n  }\r\n\r\n  // footer preset, always 10 bytes, skip over it\r\n  if (id3v2.version == 4 && id3v2.flags & 0x10) {\r\n    end += 10n\r\n  }\r\n\r\n  await ioReader.seek(end)\r\n\r\n}\r\n\r\nexport function write(ioWriter: IOWriterSync, version: number, padding: int32, metadata: Mp3MetaData) {\r\n  let now = ioWriter.getPos()\r\n  ioWriter.writeString('ID3')\r\n  ioWriter.writeUint8(version)\r\n  ioWriter.writeUint16(0)\r\n  const sizePos = ioWriter.getPos()\r\n  ioWriter.writeUint32(0)\r\n\r\n  const enc = ID3v2Encoding.UTF8\r\n\r\n  function writeText(key: string, str: string) {\r\n    const buffer = text.encode(str)\r\n\r\n    ioWriter.writeString(key)\r\n    ioWriter.writeUint32(buffer.length + 1)\r\n    // flags\r\n    ioWriter.writeUint16(0)\r\n\r\n    ioWriter.writeUint8(enc)\r\n    ioWriter.writeBuffer(buffer)\r\n  }\r\n\r\n  function writeBuffer(key: string, buffer: Uint8Array) {\r\n    ioWriter.writeString(key)\r\n    ioWriter.writeUint32(buffer.length)\r\n    // flags\r\n    ioWriter.writeUint16(0)\r\n\r\n    ioWriter.writeBuffer(buffer)\r\n  }\r\n\r\n  if (metadata.poster) {\r\n    writeBuffer('APIC', metadata.poster)\r\n  }\r\n\r\n  if (metadata.title) {\r\n    writeText('TIT2', metadata.title)\r\n  }\r\n\r\n  if (metadata.artist) {\r\n    writeText('TPE1', metadata.artist)\r\n  }\r\n\r\n  if (metadata.albumArtist) {\r\n    writeText('TPE2', metadata.albumArtist)\r\n  }\r\n\r\n  if (metadata.disc) {\r\n    writeText('TPOS', metadata.disc)\r\n  }\r\n  if (metadata.copyright) {\r\n    writeText('TCOP', metadata.copyright)\r\n  }\r\n\r\n  if (metadata.album) {\r\n    writeText('TALB', metadata.album)\r\n  }\r\n\r\n  if (metadata.track) {\r\n    writeText('TRCK', metadata.track)\r\n  }\r\n\r\n  if (metadata.date) {\r\n    writeText('TDRC', metadata.date)\r\n  }\r\n\r\n  if (metadata.comment) {\r\n    let comment = metadata.comment\r\n    if (comment[3] === ' ') {\r\n      comment = comment.slice(0, 3) + comment.slice(4)\r\n    }\r\n    writeText('COMM', comment)\r\n  }\r\n\r\n  if (metadata.lyrics) {\r\n    let lyrics = metadata.lyrics\r\n    if (lyrics[3] === ' ') {\r\n      lyrics = lyrics.slice(0, 3) + lyrics.slice(4)\r\n    }\r\n    writeText('USLT', lyrics)\r\n  }\r\n\r\n  if (metadata.genre) {\r\n    writeText('TCON', metadata.genre + '')\r\n  }\r\n\r\n  if (metadata.encoder) {\r\n    writeText('TSSE', metadata.encoder)\r\n  }\r\n\r\n  if (metadata.composer) {\r\n    writeText('TCOM', metadata.composer)\r\n  }\r\n\r\n  if (metadata.encodedBy) {\r\n    writeText('TENC', metadata.encodedBy)\r\n  }\r\n\r\n  if (metadata.language) {\r\n    writeText('TLAN', metadata.language)\r\n  }\r\n\r\n  if (metadata.performer) {\r\n    writeText('TPE3', metadata.performer)\r\n  }\r\n\r\n  if (metadata.publisher) {\r\n    writeText('TPUB', metadata.publisher)\r\n  }\r\n\r\n  if (metadata.compilation) {\r\n    writeText('TCMP', metadata.compilation)\r\n  }\r\n\r\n  if (metadata.creationTime) {\r\n    writeText('TDEN', metadata.creationTime)\r\n  }\r\n\r\n  if (metadata.albumSort) {\r\n    writeText('TSOA', metadata.albumSort)\r\n  }\r\n\r\n  if (metadata.artistSort) {\r\n    writeText('TSOP', metadata.artistSort)\r\n  }\r\n\r\n  if (metadata.titleSort) {\r\n    writeText('TSOT', metadata.titleSort)\r\n  }\r\n\r\n  if (metadata.grouping) {\r\n    writeText('TIT1', metadata.grouping)\r\n  }\r\n\r\n  if (padding < 10) {\r\n    padding = 10\r\n  }\r\n\r\n  const len = static_cast<int32>(ioWriter.getPos() - now)\r\n\r\n  if (padding > 268435455 - len) {\r\n    padding = 268435455 - len\r\n  }\r\n\r\n  ioWriter.writeBuffer(new Uint8Array(padding).fill(0))\r\n\r\n  now = ioWriter.getPos()\r\n\r\n  ioWriter.seek(sizePos)\r\n  putSize(ioWriter, len)\r\n  ioWriter.seek(now)\r\n}\r\n","/*\r\n * libmedia mp3 utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport const enum XingFlag {\r\n  FRAMES = 0x01,\r\n  SIZE = 0x02,\r\n  TOC = 0x04,\r\n  QSCALE = 0x08\r\n}\r\n\r\nexport const XING_TOC_COUNT = 100\r\n\r\nexport const ID3V1_SIZE = 128\r\n\r\nexport const XING_SIZE = 156\r\n"],"names":[],"sourceRoot":""}