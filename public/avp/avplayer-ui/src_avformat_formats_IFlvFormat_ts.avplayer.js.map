{"version":3,"file":"src_avformat_formats_IFlvFormat_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/codecs/aac.ts","webpack://AVPlayer/./src/avformat/codecs/av1.ts","webpack://AVPlayer/./src/avformat/codecs/vp9.ts","webpack://AVPlayer/./src/avformat/formats/IFlvFormat.ts","webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/flv/FlvHeader.ts","webpack://AVPlayer/./src/avformat/formats/flv/FlvScriptTag.ts","webpack://AVPlayer/./src/avformat/formats/flv/flv.ts","webpack://AVPlayer/./src/avformat/formats/flv/oflv.ts","webpack://AVPlayer/./src/avformat/function/getBytesByDuration.ts","webpack://AVPlayer/./src/avformat/function/mktag.ts","webpack://AVPlayer/./src/avformat/function/seekInBytes.ts","webpack://AVPlayer/./src/avutil/util/av1syntax.ts","webpack://AVPlayer/./src/common/io/IOWriterSync.ts"],"sourcesContent":["/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'HE'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)] ?? 48000\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f] ?? 2\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((codecpar.profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n\r\nexport interface AACADTSHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  aacFrameLength: number\r\n  numberOfRawDataBlocksInFrame: number\r\n  headerLength: number\r\n  framePayloadLength: number\r\n}\r\n\r\nexport interface AACLATMHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  useSameStreamMux: boolean\r\n  headerLength: number\r\n  framePayloadLength: number\r\n  muxLengthBytes: number\r\n}\r\n\r\n/**\r\n * \r\n * adts 封装转 raw\r\n * \r\n * bits    \r\n * - 12  syncword\r\n * - 1   ID (MPEG 标识位，固定为 1)\r\n * - 2   Layer ( 固定为 0)\r\n * - 1   Protection Absent ( 指示是否有 CRC 校验，1 表示没有校验）\r\n * - 2   Profile\r\n * - 4   Sampling Frequency Index ( 采样率的索引）\r\n * - 1   Private Bit ( 保留位，一般设置为 0)\r\n * - 3   Channel Configuration ( 音频通道数）\r\n * - 1   Original Copy ( 原始拷贝标志位，一般设置为 0)\r\n * - 1   Home ( 保留位，一般设置为 0)\r\n * - 1   Copyright Identification Bit（置 0）\r\n * - 1   Copyright Identification Start（置 0）\r\n * - 13  Frame Length ( 帧长度，包括 ADTS 头和音频帧数据的长度）\r\n * - 11  Buffer Fullness ( 缓冲区满度，可用于音频流的同步）\r\n * - 2   Number of Raw Data Blocks in Frame ( 帧中原始数据块的数量）\r\n * - 16  CRC (Protection Absent 控制）\r\n * - N  raw aac data\r\n * \r\n */\r\nexport function parseADTSHeader(buffer: Uint8ArrayInterface): AACADTSHeader | number {\r\n\r\n  if (buffer.length < 7) {\r\n    return -1\r\n  }\r\n\r\n  const syncWord = (buffer[0] << 4) | (buffer[0 + 1] >> 4)\r\n\r\n  if (syncWord !== 0xFFF) {\r\n    return -1\r\n  }\r\n\r\n  /*\r\n    * const id = (buffer[1] & 0x08) >>> 3\r\n    * const layer = (buffer[1] & 0x06) >>> 1\r\n    */\r\n  const protectionAbsent = buffer[1] & 0x01\r\n  const profile = (buffer[2] & 0xC0) >>> 6\r\n  const samplingFrequencyIndex = (buffer[2] & 0x3C) >>> 2\r\n  const channelConfiguration = ((buffer[2] & 0x01) << 2) | ((buffer[3] & 0xC0) >>> 6)\r\n\r\n  // adts_variable_header()\r\n  const aacFrameLength = ((buffer[3] & 0x03) << 11)\r\n    | (buffer[4] << 3)\r\n    | ((buffer[5] & 0xE0) >>> 5)\r\n\r\n  const numberOfRawDataBlocksInFrame = buffer[6] & 0x03\r\n\r\n  let headerLength = protectionAbsent === 1 ? 7 : 9\r\n  let framePayloadLength = aacFrameLength - headerLength\r\n\r\n  return {\r\n    syncWord,\r\n    profile: profile + 1,\r\n    sampleRate: MPEG4SamplingFrequencies[samplingFrequencyIndex],\r\n    channels: MPEG4Channels[channelConfiguration],\r\n    aacFrameLength,\r\n    numberOfRawDataBlocksInFrame,\r\n    headerLength,\r\n    framePayloadLength\r\n  }\r\n}\r\n\r\nexport function parseLATMHeader(buffer: Uint8ArrayInterface, bitReader?: BitReader) {\r\n  if (!bitReader) {\r\n    bitReader = new BitReader()\r\n    bitReader.appendBuffer(buffer)\r\n  }\r\n\r\n  function getLATMValue() {\r\n    const bytesForValue = bitReader.readU(2)\r\n    let value = 0\r\n\r\n    for (let i = 0; i <= bytesForValue; i++) {\r\n      value = value << 8\r\n      value = value | bitReader.readU(8)\r\n    }\r\n    return value\r\n  }\r\n\r\n  const now = bitReader.getPointer()\r\n\r\n  const info: AACLATMHeader = {\r\n    syncWord: 0,\r\n    profile: 0,\r\n    sampleRate: 0,\r\n    channels: 0,\r\n    useSameStreamMux: false,\r\n    headerLength: 0,\r\n    framePayloadLength: 0,\r\n    muxLengthBytes: 0\r\n  }\r\n\r\n  const syncWord = bitReader.readU(11)\r\n\r\n  if (syncWord !== 0x2B7) {\r\n    return -1\r\n  }\r\n\r\n  info.syncWord = syncWord\r\n\r\n  info.muxLengthBytes = bitReader.readU(13)\r\n\r\n  const useSameStreamMux = bitReader.readU1() === 0x01\r\n\r\n  info.useSameStreamMux = useSameStreamMux\r\n\r\n  if (!useSameStreamMux) {\r\n    const audioMuxVersion = bitReader.readU1() === 0x01\r\n    const audioMuxVersionA = audioMuxVersion && bitReader.readU1() === 0x01\r\n    if (audioMuxVersionA) {\r\n      return -1\r\n    }\r\n    if (audioMuxVersion) {\r\n      getLATMValue()\r\n    }\r\n    const allStreamsSameTimeFraming = bitReader.readU1() === 0x01\r\n    if (!allStreamsSameTimeFraming) {\r\n      return -1\r\n    }\r\n    const numSubFrames = bitReader.readU(6)\r\n    if (numSubFrames !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numProgram = bitReader.readU(4)\r\n    if (numProgram !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numLayer = bitReader.readU(3)\r\n    if (numLayer !== 0) {\r\n      return -1\r\n    }\r\n\r\n    let fillBits = audioMuxVersion ? getLATMValue() : 0\r\n\r\n    const audioObjectType = bitReader.readU(5)\r\n    fillBits -= 5\r\n\r\n    const samplingFreqIndex = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    const channelConfig = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    bitReader.readU(3)\r\n    fillBits -= 3\r\n\r\n    if (fillBits > 0) {\r\n      bitReader.readU(fillBits)\r\n    }\r\n\r\n    const frameLengthType = bitReader.readU(3)\r\n    if (frameLengthType === 0) {\r\n      bitReader.readU(8)\r\n    }\r\n    else {\r\n      return -1\r\n    }\r\n\r\n    const otherDataPresent = bitReader.readU1() === 0x01\r\n    if (otherDataPresent) {\r\n      if (audioMuxVersion) {\r\n        getLATMValue()\r\n      }\r\n      else {\r\n        let otherDataLenBits = 0\r\n        while (true) {\r\n          otherDataLenBits = otherDataLenBits << 8\r\n          const otherDataLenEsc = bitReader.readU1() === 0x01\r\n          const otherDataLenTmp = bitReader.readU(8)\r\n          otherDataLenBits += otherDataLenTmp\r\n          if (!otherDataLenEsc) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const crcCheckPresent = bitReader.readU1() === 0x01\r\n    if (crcCheckPresent) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    info.profile = audioObjectType + 1\r\n    info.sampleRate = MPEG4SamplingFrequencies[samplingFreqIndex]\r\n    info.channels = MPEG4Channels[channelConfig]\r\n  }\r\n\r\n  let length = 0\r\n  while (true) {\r\n    const tmp = bitReader.readU(8)\r\n    length += tmp\r\n    if (tmp !== 0xff) {\r\n      break\r\n    }\r\n  }\r\n\r\n  info.framePayloadLength = length\r\n  info.headerLength = bitReader.getPointer() - now + (bitReader.getBitLeft() === 8 ? 0 : 1)\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia av1 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as av1syntax from 'avutil/util/av1syntax'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { PixelFormatDescriptorsMap } from 'avutil/pixelFormatDescriptor'\r\n\r\nexport const enum AV1Profile {\r\n  Main,\r\n  High,\r\n  Professional\r\n}\r\n\r\nexport const enum OBUType {\r\n  Reserved,\r\n  SEQUENCE_HEADER,\r\n  TEMPORAL_DELIMITER,\r\n  FRAME_HEADER,\r\n  TILE_GROUP,\r\n  METADATA,\r\n  FRAME,\r\n  REDUNDANT_FRAME_HEADER,\r\n  TILE_LIST,\r\n  PADDING = 15\r\n}\r\n\r\nexport const AV1Profile2Name: Record<AV1Profile, string> = {\r\n  [AV1Profile.Main]: 'Main',\r\n  [AV1Profile.High]: 'High',\r\n  [AV1Profile.Professional]: 'Professional'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 20, maxResolution: 2048 * 1152 },\r\n  { level: 21, maxResolution: 2816 * 1584 },\r\n  { level: 30, maxResolution: 4352 * 2448 },\r\n  { level: 31, maxResolution: 5504 * 3096 },\r\n  { level: 40, maxResolution: 6144 * 3456 },\r\n  { level: 41, maxResolution: 6144 * 3456 },\r\n  { level: 50, maxResolution: 8192 * 4352 },\r\n  { level: 51, maxResolution: 8192 * 4352 },\r\n  { level: 52, maxResolution: 8192 * 4352 },\r\n  { level: 53, maxResolution: 8192 * 4352 },\r\n  { level: 60, maxResolution: 16384 * 8704 },\r\n  { level: 61, maxResolution: 16384 * 8704 },\r\n  { level: 62, maxResolution: 16384 * 8704 },\r\n  { level: 63, maxResolution: 16384 * 8704 }\r\n]\r\n\r\nexport const AV1LevelIdx = [20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43, 50, 51, 52, 53, 60, 61, 62, 63, 70, 71, 72, 73]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 4) {\r\n    const params = parseExtraData(extradata)\r\n\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 bit marker\r\n * - 7 bit version\r\n * - 3 bit profile\r\n * - 5 bit level\r\n * - 1 bit tier\r\n * - 1 bit bitdepth > 8\r\n * - 1 bit bitdepth == 12\r\n * - 1 bit monochrome\r\n * - 1 bit chroma_subsampling_x\r\n * - 1 bit chroma_subsampling_y\r\n * - 2 bit chroma_sample_position\r\n * - 8 bit padding\r\n * \r\n * @param header \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  // marker\r\n  bitReader.readU1()\r\n  // version\r\n  bitReader.readU(7)\r\n\r\n  const profile = bitReader.readU(3)\r\n  const level = bitReader.readU(5)\r\n  const tier = bitReader.readU1()\r\n  let bitDepth = bitReader.readU1() ? 10 : 8\r\n  if (bitReader.readU1()) {\r\n    bitDepth = 12\r\n  }\r\n  const monochrome = bitReader.readU1()\r\n  const chromaSubsamplingX = bitReader.readU1()\r\n  const chromaSubsamplingY = bitReader.readU1()\r\n  const chromaSamplePosition = bitReader.readU(2)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    tier,\r\n    bitDepth,\r\n    monochrome,\r\n    chromaSubsamplingX,\r\n    chromaSubsamplingY,\r\n    chromaSamplePosition\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport function parseSequenceHeader(header: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(header.length)\r\n  bitReader.appendBuffer(header)\r\n\r\n  bitReader.readU1()\r\n  bitReader.readU(4)\r\n  const extensionFlag = bitReader.readU1()\r\n  const hasSizeFlag = bitReader.readU1()\r\n  // obu_reserved_1bit\r\n  bitReader.readU1()\r\n  if (extensionFlag) {\r\n    bitReader.readU(8)\r\n  }\r\n  if (hasSizeFlag) {\r\n    av1syntax.leb128(bitReader)\r\n  }\r\n\r\n  const seq_profile =\tav1syntax.f(bitReader, 3)\r\n  const still_picture =\tav1syntax.f(bitReader, 1)\r\n  const reduced_still_picture_header = av1syntax.f(bitReader, 1)\r\n\r\n  let timing_info_present_flag = 0\r\n  let decoder_model_info_present_flag = 0\r\n  let initial_display_delay_present_flag = 0\r\n  let operating_points_cnt_minus_1 = 0\r\n  let operating_point_idc: number[] = [0]\r\n  let seq_level_idx: number[] = [0]\r\n  let seq_tier: number[] = [0]\r\n  let decoder_model_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_minus_1: number[] = [0]\r\n  let buffer_delay_length_minus_1 = 0\r\n  let decoder_buffer_delay: number[] = [0]\r\n  let encoder_buffer_delay: number[] = [0]\r\n  let low_delay_mode_flag: number[] = [0]\r\n\r\n  if (reduced_still_picture_header) {\r\n    seq_level_idx[0] = av1syntax.f(bitReader, 5)\r\n  }\r\n  else {\r\n    timing_info_present_flag = av1syntax.f(bitReader, 1)\r\n    if (timing_info_present_flag) {\r\n\r\n      let num_units_in_display_tick =\tav1syntax.f(bitReader, 32)\r\n      let time_scale = av1syntax.f(bitReader, 32)\r\n      let equal_picture_interval = av1syntax.f(bitReader, 1)\r\n      if (equal_picture_interval) {\r\n        let num_ticks_per_picture_minus_1 = av1syntax.uvlc(bitReader)\r\n      }\r\n\r\n      let decoder_model_info_present_flag =\tav1syntax.f(bitReader, 1)\r\n      if (decoder_model_info_present_flag) {\r\n        buffer_delay_length_minus_1 =\tav1syntax.f(bitReader, 5)\r\n        let num_units_in_decoding_tick = av1syntax.f(bitReader, 32)\r\n        let buffer_removal_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n        let frame_presentation_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n      }\r\n    }\r\n    else {\r\n      decoder_model_info_present_flag = 0\r\n    }\r\n    let initial_display_delay_present_flag = av1syntax.f(bitReader, 1)\r\n    let operating_points_cnt_minus_1 = av1syntax.f(bitReader, 5)\r\n    for (let i = 0; i <= operating_points_cnt_minus_1; i++ ) {\r\n      operating_point_idc[i] = av1syntax.f(bitReader, 12)\r\n      seq_level_idx[i] = av1syntax.f(bitReader, 5)\r\n      if (seq_level_idx[i] > 7) {\r\n        seq_tier[i] = av1syntax.f(bitReader, 1)\r\n      }\r\n      else {\r\n        seq_tier[i] = 0\r\n      }\r\n      if (decoder_model_info_present_flag) {\r\n        decoder_model_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if (decoder_model_present_for_this_op[i]) {\r\n          let n = buffer_delay_length_minus_1 + 1\r\n          decoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          encoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          low_delay_mode_flag[i] = av1syntax.f(bitReader, 1)\r\n        }\r\n      }\r\n      else {\r\n        decoder_model_present_for_this_op[i] = 0\r\n      }\r\n      if (initial_display_delay_present_flag) {\r\n        initial_display_delay_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if ( initial_display_delay_present_for_this_op[i] ) {\r\n          initial_display_delay_minus_1[i] = av1syntax.f(bitReader, 4)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let frame_width_bits_minus_1 = av1syntax.f(bitReader, 4)\r\n  let frame_height_bits_minus_1 =\tav1syntax.f(bitReader, 4)\r\n  let n = frame_width_bits_minus_1 + 1\r\n  let max_frame_width_minus_1 =\tav1syntax.f(bitReader, n)\r\n  n = frame_height_bits_minus_1 + 1\r\n  let max_frame_height_minus_1 = av1syntax.f(bitReader, n)\r\n  let frame_id_numbers_present_flag = 0\r\n  let delta_frame_id_length_minus_2 = 0\r\n  let additional_frame_id_length_minus_1 = 0\r\n  if (reduced_still_picture_header ) {\r\n    frame_id_numbers_present_flag = 0\r\n  }\r\n  else {\r\n    frame_id_numbers_present_flag =\tav1syntax.f(bitReader, 1)\r\n  }\r\n  if ( frame_id_numbers_present_flag ) {\r\n    delta_frame_id_length_minus_2 =\tav1syntax.f(bitReader, 4)\r\n    additional_frame_id_length_minus_1 = av1syntax.f(bitReader, 3)\r\n  }\r\n  let use_128x128_superblock = av1syntax.f(bitReader, 1)\r\n  let enable_filter_intra =\tav1syntax.f(bitReader, 1)\r\n  let enable_intra_edge_filter = av1syntax.f(bitReader, 1)\r\n  let enable_interintra_compound = 0\r\n  let enable_masked_compound = 0\r\n  let enable_warped_motion = 0\r\n  let enable_dual_filter = 0\r\n  let enable_order_hint = 0\r\n  let enable_jnt_comp = 0\r\n  let enable_ref_frame_mvs = 0\r\n  let seq_force_screen_content_tools = 2\r\n  let seq_force_integer_mv = 2\r\n  let OrderHintBits = 0\r\n  if (!reduced_still_picture_header) {\r\n    let enable_interintra_compound = av1syntax.f(bitReader, 1)\r\n    enable_masked_compound = av1syntax.f(bitReader, 1)\r\n    enable_warped_motion = av1syntax.f(bitReader, 1)\r\n    enable_dual_filter = av1syntax.f(bitReader, 1)\r\n    enable_order_hint = av1syntax.f(bitReader, 1)\r\n    if (enable_order_hint) {\r\n      enable_jnt_comp = av1syntax.f(bitReader, 1)\r\n      enable_ref_frame_mvs = av1syntax.f(bitReader, 1)\r\n    }\r\n    else {\r\n      enable_jnt_comp = 0\r\n      enable_ref_frame_mvs = 0\r\n    }\r\n    let seq_choose_screen_content_tools =\tav1syntax.f(bitReader, 1)\r\n    if (seq_choose_screen_content_tools) {\r\n      seq_force_screen_content_tools = 2\r\n    }\r\n    else {\r\n      seq_force_screen_content_tools = av1syntax.f(bitReader, 1)\r\n    }\r\n\r\n    if (seq_force_screen_content_tools > 0) {\r\n      let seq_choose_integer_mv =\tav1syntax.f(bitReader, 1)\r\n      if (seq_choose_integer_mv) {\r\n        seq_force_integer_mv = 2\r\n      }\r\n      else {\r\n        seq_force_integer_mv = av1syntax.f(bitReader, 1)\r\n      }\r\n    }\r\n    else {\r\n      seq_force_integer_mv = 2\r\n    }\r\n    if (enable_order_hint) {\r\n      const order_hint_bits_minus_1 =\tav1syntax.f(bitReader, 3)\r\n      OrderHintBits = order_hint_bits_minus_1 + 1\r\n    }\r\n    else {\r\n      OrderHintBits = 0\r\n    }\r\n  }\r\n  let enable_superres =\tav1syntax.f(bitReader, 1)\r\n  let enable_cdef =\tav1syntax.f(bitReader, 1)\r\n  let enable_restoration = av1syntax.f(bitReader, 1)\r\n\r\n  let high_bitdepth =\tav1syntax.f(bitReader, 1)\r\n  let twelve_bit = 0\r\n  let bit_depth = 0\r\n  let mono_chrome = 0\r\n  if (seq_profile == 2 && high_bitdepth ) {\r\n    twelve_bit = av1syntax.f(bitReader, 1)\r\n    bit_depth = twelve_bit ? 12 : 10\r\n  }\r\n  else if (seq_profile <= 2) {\r\n    bit_depth = high_bitdepth ? 10 : 8\r\n  }\r\n  if ( seq_profile == 1 ) {\r\n    mono_chrome = 0\r\n  }\r\n  else {\r\n    mono_chrome = av1syntax.f(bitReader, 1)\r\n  }\r\n  const color_description_present_flag = av1syntax.f(bitReader, 1)\r\n  let color_primaries = 0\r\n  let transfer_characteristics = 0\r\n  let matrix_coefficients = 0\r\n  if (color_description_present_flag ) {\r\n    color_primaries =\tav1syntax.f(bitReader, 8)\r\n    transfer_characteristics = av1syntax.f(bitReader, 8)\r\n    matrix_coefficients = av1syntax.f(bitReader, 8)\r\n  }\r\n  else {\r\n    color_primaries = 2\r\n    transfer_characteristics = 2\r\n    matrix_coefficients = 2\r\n  }\r\n  let color_range = 0\r\n  let subsampling_x = 0\r\n  let subsampling_y = 0\r\n  let chroma_sample_position = 0\r\n  let separate_uv_delta_q = 0\r\n  if (mono_chrome) {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    subsampling_x = 1\r\n    subsampling_y = 1\r\n    chroma_sample_position = 0\r\n    separate_uv_delta_q = 0\r\n  }\r\n  else if (color_primaries == 1\r\n    && transfer_characteristics == 13\r\n    && matrix_coefficients == 0\r\n  ) {\r\n    color_range = 1\r\n    subsampling_x = 0\r\n    subsampling_y = 0\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n  else {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    if (seq_profile == 0) {\r\n      subsampling_x = 1\r\n      subsampling_y = 1\r\n    }\r\n    else if ( seq_profile == 1 ) {\r\n      subsampling_x = 0\r\n      subsampling_y = 0\r\n    }\r\n    else {\r\n      if (bit_depth == 12) {\r\n        subsampling_x\t= av1syntax.f(bitReader, 1)\r\n        if (subsampling_x) {\r\n          subsampling_y =\tav1syntax.f(bitReader, 1)\r\n        }\r\n        else {\r\n          subsampling_y = 0\r\n        }\r\n      }\r\n      else {\r\n        subsampling_x = 1\r\n        subsampling_y = 0\r\n      }\r\n    }\r\n    if (subsampling_x && subsampling_y) {\r\n      chroma_sample_position = av1syntax.f(bitReader, 2)\r\n    }\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n\r\n  let film_grain_params_present\t= av1syntax.f(bitReader, 1)\r\n\r\n  return {\r\n    width: max_frame_width_minus_1 + 1,\r\n    height: max_frame_height_minus_1 + 1,\r\n    profile: seq_profile,\r\n    level: AV1LevelIdx[seq_level_idx[0]],\r\n    tier: seq_tier[0],\r\n    bitDepth: bit_depth,\r\n    monoChrome: mono_chrome,\r\n    colorRange: color_range,\r\n    colorPrimaries: color_primaries,\r\n    transferCharacteristics: transfer_characteristics,\r\n    matrixCoefficients: matrix_coefficients,\r\n    subsamplingX: subsampling_x,\r\n    subsamplingY: subsampling_y,\r\n    chromaSamplePosition: chroma_sample_position\r\n  }\r\n}\r\n\r\nexport function splitOBU(buffer: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader()\r\n\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const list: Uint8ArrayInterface[] = []\r\n\r\n  while (bitReader.remainingLength()) {\r\n    const now = bitReader.getPointer()\r\n    // obu_forbidden_bit\r\n    bitReader.readU1()\r\n    const type = bitReader.readU(4)\r\n    const extensionFlag = bitReader.readU1()\r\n    const hasSizeFlag = bitReader.readU1()\r\n    // obu_reserved_1bit\r\n    bitReader.readU1()\r\n\r\n    if (extensionFlag) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    const size = hasSizeFlag ? av1syntax.leb128(bitReader) : buffer.length - 1 - extensionFlag\r\n\r\n    const headerSize = bitReader.getPointer() - now\r\n\r\n    list.push(buffer.subarray(now, now + headerSize + size))\r\n\r\n    bitReader.skip(size * 8)\r\n  }\r\n\r\n  return list\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>, buffer: Uint8ArrayInterface) {\r\n  const bitWriter = new BitWriter(4)\r\n  // marker\r\n  bitWriter.writeU1(1)\r\n  // version\r\n  bitWriter.writeU(7, 1)\r\n\r\n  const header = splitOBU(buffer).find((buffer) => {\r\n    return ((buffer[0] >>> 3) & 0x0f) === OBUType.SEQUENCE_HEADER\r\n  })\r\n\r\n  if (header) {\r\n    const params = parseSequenceHeader(header)\r\n    bitWriter.writeU(3, params.profile)\r\n    bitWriter.writeU(5, params.level)\r\n    bitWriter.writeU(1, params.tier)\r\n    bitWriter.writeU(1, params.bitDepth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, params.bitDepth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, params.monoChrome)\r\n    bitWriter.writeU(1, params.subsamplingX)\r\n    bitWriter.writeU(1, params.subsamplingY)\r\n    bitWriter.writeU(1, params.chromaSamplePosition)\r\n  }\r\n  else {\r\n    const desc = PixelFormatDescriptorsMap[codecpar.format]\r\n    bitWriter.writeU(3, codecpar.profile)\r\n    bitWriter.writeU(5, codecpar.level)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 0)\r\n  }\r\n  // padding\r\n  bitWriter.writeU(8, 0)\r\n  return bitWriter.getBuffer()\r\n}\r\n","/*\r\n * libmedia vp9 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { PixelFormatDescriptorsMap } from 'avutil/pixelFormatDescriptor'\r\nimport { avQ2D } from 'avutil/util/rational'\r\nimport { AVChromaLocation, AVColorRange } from 'avutil/pixfmt'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\n\r\nexport const enum VP9Profile {\r\n  Profile0,\r\n  Profile1,\r\n  Profile2,\r\n  Profile3\r\n}\r\n\r\nexport const VP9Profile2Name: Record<VP9Profile, string> = {\r\n  [VP9Profile.Profile0]: 'Profile0',\r\n  [VP9Profile.Profile1]: 'Profile1',\r\n  [VP9Profile.Profile2]: 'Profile2',\r\n  [VP9Profile.Profile3]: 'Profile3'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 512 * 384, maxFrameRate: 30 },\r\n  { level: 11, maxResolution: 512 * 384, maxFrameRate: 60 },\r\n  { level: 20, maxResolution: 960 * 540, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 960 * 540, maxFrameRate: 60 },\r\n  { level: 30, maxResolution: 1920 * 1080, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 1920 * 1080, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2560 * 1440, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2560 * 1440, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 3840 * 2160, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 3840 * 2160, maxFrameRate: 60 },\r\n  { level: 60, maxResolution: 4096 * 2160, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 4096 * 2160, maxFrameRate: 60 },\r\n  { level: 70, maxResolution: 8192 * 4320, maxFrameRate: 30 },\r\n  { level: 71, maxResolution: 8192 * 4320, maxFrameRate: 60 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n\r\nconst enum VPX_CHROMA_SUBSAMPLING {\r\n  VPX_SUBSAMPLING_420_VERTICAL = 0,\r\n  VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA = 1,\r\n  VPX_SUBSAMPLING_422 = 2,\r\n  VPX_SUBSAMPLING_444 = 3\r\n}\r\n\r\nfunction getVpccFeature(codecpar: pointer<AVCodecParameters>) {\r\n  let profile = codecpar.profile\r\n  let level = codecpar.level\r\n  if (level === NOPTS_VALUE) {\r\n    level = getLevelByResolution(codecpar.width, codecpar.height, avQ2D(codecpar.framerate))\r\n  }\r\n  const desc = PixelFormatDescriptorsMap[codecpar.format]\r\n\r\n  let bitDepth = codecpar.bitsPerCodedSample\r\n  let chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n  if (desc) {\r\n    bitDepth = desc.comp[0].depth\r\n    if (desc.log2ChromaW === 1 && desc.log2ChromaH === 1) {\r\n      if (codecpar.chromaLocation === AVChromaLocation.AVCHROMA_LOC_LEFT) {\r\n        chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      }\r\n    }\r\n    else if (desc.log2ChromaW === 1 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_422\r\n    }\r\n    else if (desc.log2ChromaW === 0 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_444\r\n    }\r\n  }\r\n  const fullRange = codecpar.colorRange === AVColorRange.AVCOL_RANGE_JPEG ? 1 : 0\r\n\r\n  if (profile === NOPTS_VALUE && bitDepth) {\r\n    if (chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      || chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n    ) {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile0 : VP9Profile.Profile2\r\n    }\r\n    else {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile1 : VP9Profile.Profile3\r\n    }\r\n  }\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRange\r\n  }\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>) {\r\n  const ioWriter = new BufferWriter(new Uint8Array(8))\r\n  const vpcc = getVpccFeature(codecpar)\r\n  ioWriter.writeUint8(vpcc.profile)\r\n  ioWriter.writeUint8(vpcc.level)\r\n  ioWriter.writeUint8((vpcc.bitDepth << 4) | (vpcc.chromaSubsampling << 1) | vpcc.fullRange)\r\n  ioWriter.writeUint8(codecpar.colorPrimaries)\r\n  ioWriter.writeUint8(codecpar.colorTrc)\r\n  ioWriter.writeUint8(codecpar.colorSpace)\r\n  ioWriter.writeUint16(0)\r\n  return ioWriter.getWroteBuffer()\r\n}\r\n","/*\r\n * libmedia flv decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport FlvHeader from './flv/FlvHeader'\r\nimport FlvScriptTag from './flv/FlvScriptTag'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport * as logger from 'common/util/logger'\r\nimport { AVPacketSideDataType, AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { FlvAudioCodecType2AVCodecID,\r\n  FlvVideoCodecType2AVCodecID, FlvTag,\r\n  AVCPacketType,\r\n  PacketTypeExt\r\n} from './flv/flv'\r\n\r\nimport * as flvAAC from './flv/codecs/aac'\r\nimport * as flvH264 from './flv/codecs/h264'\r\n\r\nimport * as h264 from '../codecs/h264'\r\nimport * as aac from '../codecs/aac'\r\nimport * as hevc from '../codecs/hevc'\r\nimport * as vvc from '../codecs/vvc'\r\nimport * as av1 from '../codecs/av1'\r\nimport * as vp9 from '../codecs/vp9'\r\n\r\nimport * as errorType from 'avutil/error'\r\nimport { IOError } from 'common/io/error'\r\nimport AVStream from '../AVStream'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags } from '../avformat'\r\nimport { mapSafeUint8Array, mapUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData, addAVPacketSideData } from 'avutil/util/avpacket'\r\nimport mktag from '../function/mktag'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport * as array from 'common/util/array'\r\nimport seekInBytes from '../function/seekInBytes'\r\nimport { BitFormat } from '../codecs/h264'\r\n\r\n\r\nexport interface FlvFormatOptions {\r\n  hasKeyframes?: boolean\r\n  live?: boolean\r\n}\r\n\r\nexport default class IFlvFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.FLV\r\n\r\n  public header: FlvHeader\r\n\r\n  public script: FlvScriptTag\r\n\r\n  public options: FlvFormatOptions\r\n\r\n  private firstTagPos: int64\r\n\r\n  constructor(options: FlvFormatOptions = {}) {\r\n    super()\r\n\r\n    this.header = new FlvHeader()\r\n    this.script = new FlvScriptTag()\r\n\r\n    this.options = options\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    try {\r\n\r\n      const signature = await formatContext.ioReader.peekString(3)\r\n      if (signature !== 'FLV') {\r\n        logger.error('the file format is not flv')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      await this.header.read(formatContext.ioReader)\r\n      const prev = await formatContext.ioReader.readUint32()\r\n      if (prev !== 0) {\r\n        logger.warn('the previousTagSize0 is not 0')\r\n      }\r\n\r\n      let ret = 0\r\n\r\n      const type = await formatContext.ioReader.peekUint8()\r\n      if (type === FlvTag.SCRIPT) {\r\n        await formatContext.ioReader.skip(1)\r\n        const size = await formatContext.ioReader.readUint24()\r\n        await formatContext.ioReader.skip(7)\r\n        ret = await this.script.read(formatContext.ioReader, size)\r\n      }\r\n      if (ret >= 0) {\r\n        this.firstTagPos = formatContext.ioReader.getPos()\r\n      }\r\n      return ret\r\n    }\r\n    catch (error) {\r\n      logger.error(error.message)\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async readCodecConfigurationRecord(formatContext: AVIFormatContext, stream: AVStream, len: int32) {\r\n    const data = avMalloc(len)\r\n    stream.codecpar.extradata = data\r\n    stream.codecpar.extradataSize = len\r\n    await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, len))\r\n\r\n    stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = mapUint8Array(data, len).slice()\r\n\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n      h264.parseAVCodecParameters(stream)\r\n    }\r\n    else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n      hevc.parseAVCodecParameters(stream)\r\n    }\r\n    else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n      vvc.parseAVCodecParameters(stream)\r\n    }\r\n    else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1) {\r\n      av1.parseAVCodecParameters(stream)\r\n    }\r\n    else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9) {\r\n      vp9.parseAVCodecParameters(stream)\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async readAVPacketData(formatContext: AVIFormatContext, stream: AVStream, avpacket: pointer<AVPacket>, len: int32) {\r\n    const data = avMalloc(len)\r\n    addAVPacketData(avpacket, data, len)\r\n    await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, len))\r\n\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n      h264.parseAvccExtraData(avpacket, stream)\r\n      avpacket.bitFormat = BitFormat.AVCC\r\n    }\r\n    else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n      hevc.parseAvccExtraData(avpacket, stream)\r\n      avpacket.bitFormat = BitFormat.AVCC\r\n    }\r\n    else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n      vvc.parseAvccExtraData(avpacket, stream)\r\n      avpacket.bitFormat = BitFormat.AVCC\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const now = formatContext.ioReader.getPos()\r\n\r\n    avpacket.pos = now\r\n\r\n    const type = (await formatContext.ioReader.readUint8()) & 0x1f\r\n    const size = await formatContext.ioReader.readUint24()\r\n    let timestamp = await formatContext.ioReader.readUint24()\r\n    const timestampExt = await formatContext.ioReader.readUint8()\r\n    if (timestampExt) {\r\n      timestamp = (timestampExt << 24) | timestamp\r\n    }\r\n    avpacket.dts = avpacket.pts = static_cast<int64>(timestamp)\r\n    // streamId 总是 0\r\n    await formatContext.ioReader.skip(3)\r\n\r\n    if (type === FlvTag.AUDIO) {\r\n      let stream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n      if (stream) {\r\n        avpacket.streamIndex = stream.index\r\n      }\r\n\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n\r\n      const audioHeader = await formatContext.ioReader.readUint8()\r\n\r\n      if (stream) {\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n          const packetType = await formatContext.ioReader.readUint8()\r\n          if (packetType === flvAAC.AACPacketType.AAC_SEQUENCE_HEADER) {\r\n            const len = size - 2\r\n            const data = avMalloc(len)\r\n            addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, data, len)\r\n            await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, len))\r\n            // aac.parseAVCodecParameters(stream, mapUint8Array(data, len))\r\n          }\r\n          else {\r\n            await this.readAVPacketData(formatContext, stream, avpacket, size - 2)\r\n          }\r\n        }\r\n        else {\r\n          await this.readAVPacketData(formatContext, stream, avpacket, size - 1)\r\n        }\r\n      }\r\n      else {\r\n        stream = formatContext.createStream()\r\n        avpacket.streamIndex = stream.index\r\n        stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n        stream.timeBase.den = 1000\r\n        stream.timeBase.num = 1\r\n        stream.startTime = avpacket.pts || avpacket.dts\r\n        if (this.script.onMetaData.duration) {\r\n          stream.duration = static_cast<int64>(this.script.onMetaData.duration * 1000)\r\n        }\r\n\r\n        stream.codecpar.chLayout.nbChannels = (audioHeader & 0x01) === 1 ? 2 : 1\r\n        stream.codecpar.sampleRate = 44100 << ((audioHeader & 0x0c) >>> 2) >> 3\r\n        stream.codecpar.bitsPerCodedSample = (audioHeader & 0x02) ? 16 : 8\r\n\r\n        const flvAudioCodecId = (audioHeader & 0xf0) >> 4\r\n\r\n        // FLV_CODECID_PCM\r\n        if (flvAudioCodecId === 0) {\r\n          stream.codecpar.codecId = stream.codecpar.bitsPerCodedSample === 8 ? AVCodecID.AV_CODEC_ID_PCM_U8 : AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n        }\r\n        // FLV_CODECID_PCM_LE\r\n        else if (flvAudioCodecId === 3) {\r\n          stream.codecpar.codecId = stream.codecpar.bitsPerCodedSample === 8 ? AVCodecID.AV_CODEC_ID_PCM_U8 : AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n        }\r\n        else {\r\n          stream.codecpar.codecId = FlvAudioCodecType2AVCodecID[flvAudioCodecId]\r\n        }\r\n\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n          const packetType = await formatContext.ioReader.readUint8()\r\n          if (packetType === flvAAC.AACPacketType.AAC_SEQUENCE_HEADER) {\r\n            const len = size - 2\r\n            const data = avMalloc(len)\r\n            stream.codecpar.extradata = data\r\n            stream.codecpar.extradataSize = len\r\n            await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, len))\r\n            stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = mapUint8Array(data, len).slice()\r\n\r\n            aac.parseAVCodecParameters(stream)\r\n          }\r\n          else {\r\n            await this.readAVPacketData(formatContext, stream, avpacket, size - 2)\r\n          }\r\n        }\r\n        else {\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_SPEEX) {\r\n            stream.codecpar.sampleRate = 16000\r\n            stream.codecpar.chLayout.nbChannels = 1\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_ALAW\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n          ) {\r\n            stream.codecpar.sampleRate = 8000\r\n          }\r\n          await this.readAVPacketData(formatContext, stream, avpacket, size - 1)\r\n        }\r\n\r\n        if (this.onStreamAdd) {\r\n          this.onStreamAdd(stream)\r\n        }\r\n      }\r\n    }\r\n    else if (type === FlvTag.VIDEO) {\r\n      let stream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n      if (stream) {\r\n        avpacket.streamIndex = stream.index\r\n      }\r\n\r\n      const videoHeader = await formatContext.ioReader.readUint8()\r\n\r\n      if (stream) {\r\n\r\n        if ((((videoHeader & 0x70) >> 4)) === 1) {\r\n          avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n        }\r\n        // https://veovera.github.io/enhanced-rtmp/enhanced-rtmp.pdf\r\n        if (videoHeader & 0x80) {\r\n          await formatContext.ioReader.skip(4)\r\n\r\n          const packetType = videoHeader & 0x0f\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n          ) {\r\n            avpacket.bitFormat = BitFormat.AVCC\r\n          }\r\n\r\n          if (packetType === PacketTypeExt.PacketTypeSequenceStart) {\r\n            const len = size - 5\r\n            const data = avMalloc(len)\r\n            addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, data, len)\r\n            await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, len))\r\n          }\r\n          else if (packetType === PacketTypeExt.PacketTypeSequenceEnd) {\r\n            avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_END\r\n          }\r\n          else if (packetType === PacketTypeExt.PacketTypeCodedFrames || packetType === PacketTypeExt.PacketTypeCodedFramesX) {\r\n            if (packetType === PacketTypeExt.PacketTypeCodedFrames\r\n              && (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n              )\r\n            ) {\r\n              const ct: int32 = await formatContext.ioReader.readInt24()\r\n              avpacket.pts = avpacket.dts + static_cast<int64>(ct)\r\n              await this.readAVPacketData(formatContext, stream, avpacket, size - 8)\r\n            }\r\n            else {\r\n              await this.readAVPacketData(formatContext, stream, avpacket, size - 5)\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n          ) {\r\n            avpacket.bitFormat = BitFormat.AVCC\r\n            const packetType = await formatContext.ioReader.readUint8()\r\n            const ct: int32 = await formatContext.ioReader.readInt24()\r\n\r\n            avpacket.pts = avpacket.dts + static_cast<int64>(ct)\r\n\r\n            if (packetType === AVCPacketType.AVC_SEQUENCE_HEADER) {\r\n              const len = size - 5\r\n              const data = avMalloc(len)\r\n              addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, data, len)\r\n              await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, len))\r\n            }\r\n            else if (packetType === AVCPacketType.AVC_END_OF_ENQUENCE) {\r\n              avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_END\r\n            }\r\n            else {\r\n              await this.readAVPacketData(formatContext, stream, avpacket, size - 5)\r\n            }\r\n          }\r\n          else {\r\n            await this.readAVPacketData(formatContext, stream, avpacket, size - 1)\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        stream = formatContext.createStream()\r\n        avpacket.streamIndex = stream.index\r\n        stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_VIDEO\r\n        stream.timeBase.den = 1000\r\n        stream.timeBase.num = 1\r\n        stream.startTime = avpacket.pts || avpacket.dts\r\n        if (this.script.onMetaData.duration) {\r\n          stream.duration = static_cast<int64>(this.script.onMetaData.duration * 1000)\r\n        }\r\n        if (this.script.onMetaData.width > 0) {\r\n          stream.codecpar.width = this.script.onMetaData.width\r\n        }\r\n        if (this.script.onMetaData.height > 0) {\r\n          stream.codecpar.height = this.script.onMetaData.height\r\n        }\r\n\r\n        if ((((videoHeader & 0x70) >> 4)) === 1) {\r\n          avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n        }\r\n\r\n        if (videoHeader & 0x80) {\r\n          const tag = await formatContext.ioReader.readUint32()\r\n          if (tag === mktag('hvc1')) {\r\n            stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_HEVC\r\n            avpacket.bitFormat = BitFormat.AVCC\r\n          }\r\n          else if (tag === mktag('vvc1')) {\r\n            stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_VVC\r\n            avpacket.bitFormat = BitFormat.AVCC\r\n          }\r\n          else if (tag === mktag('av01')) {\r\n            stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AV1\r\n          }\r\n          else if (tag === mktag('vp09')) {\r\n            stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_VP9\r\n          }\r\n\r\n          const packetType = videoHeader & 0x0f\r\n\r\n          if (packetType === PacketTypeExt.PacketTypeSequenceStart) {\r\n            await this.readCodecConfigurationRecord(formatContext, stream, size - 5)\r\n          }\r\n          else if (packetType === PacketTypeExt.PacketTypeSequenceEnd) {\r\n            avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_END\r\n          }\r\n          else if (packetType === PacketTypeExt.PacketTypeCodedFrames || packetType === PacketTypeExt.PacketTypeCodedFramesX) {\r\n            if (packetType === PacketTypeExt.PacketTypeCodedFrames\r\n              && (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n              )\r\n            ) {\r\n              const ct: int32 = await formatContext.ioReader.readInt24()\r\n              avpacket.pts = avpacket.dts + static_cast<int64>(ct)\r\n              await this.readAVPacketData(formatContext, stream, avpacket, size - 8)\r\n            }\r\n            else {\r\n              await this.readAVPacketData(formatContext, stream, avpacket, size - 5)\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          stream.codecpar.codecId = FlvVideoCodecType2AVCodecID[videoHeader & 0x0f]\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n          ) {\r\n            avpacket.bitFormat = BitFormat.AVCC\r\n            const packetType = await formatContext.ioReader.readUint8()\r\n            const ct: int32 = await formatContext.ioReader.readInt24()\r\n\r\n            avpacket.pts = avpacket.dts + static_cast<int64>(ct)\r\n\r\n            if (packetType === AVCPacketType.AVC_SEQUENCE_HEADER) {\r\n              await this.readCodecConfigurationRecord(formatContext, stream, size - 5)\r\n            }\r\n            else if (packetType === AVCPacketType.AVC_END_OF_ENQUENCE) {\r\n              avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_END\r\n            }\r\n            else {\r\n              await this.readAVPacketData(formatContext, stream, avpacket, size - 5)\r\n            }\r\n          }\r\n          else {\r\n            await this.readAVPacketData(formatContext, stream, avpacket, size - 1)\r\n          }\r\n        }\r\n        if (this.onStreamAdd) {\r\n          this.onStreamAdd(stream)\r\n        }\r\n      }\r\n    }\r\n    else if (type === FlvTag.SCRIPT) {\r\n      let ret = await this.script.read(formatContext.ioReader, size)\r\n      if (ret < 0) {\r\n        return ret\r\n      }\r\n      return await this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    else {\r\n      logger.warn(`invalid tag type: ${type}, try to sync to next tag`)\r\n      await this.syncTag(formatContext)\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n\r\n    const tagSize = formatContext.ioReader.getPos() - now\r\n    const prev = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n\r\n    if (tagSize !== prev) {\r\n      logger.warn(`tag ${type} size not match, size: ${tagSize}, previousTagSize: ${prev}`)\r\n      // 数据不合法，返回错误\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      avpacket.timeBase.den = 1000\r\n      avpacket.timeBase.num = 1\r\n      return await this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END) {\r\n        logger.error(`read packet error, ${error}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  public async syncTag(formatContext: AVIFormatContext) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    const analyzeCount = 3\r\n\r\n    while (true) {\r\n      try {\r\n        const byte = await formatContext.ioReader.readUint8()\r\n        if (byte === FlvTag.AUDIO || byte === FlvTag.VIDEO) {\r\n          pos = formatContext.ioReader.getPos() - 1n\r\n          const size = await formatContext.ioReader.readUint24()\r\n\r\n          if (size > 10 * 1024 * 1024) {\r\n            await formatContext.ioReader.seek(pos + 1n)\r\n            continue\r\n          }\r\n\r\n          await formatContext.ioReader.skip(7 + size)\r\n          const tagSize = formatContext.ioReader.getPos() - pos\r\n          const prev = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n\r\n          if (tagSize === prev) {\r\n            let count = 0\r\n            while (count <= analyzeCount) {\r\n              const now = formatContext.ioReader.getPos()\r\n              const type = await formatContext.ioReader.readUint8()\r\n              if (type === FlvTag.AUDIO || type === FlvTag.VIDEO || type === FlvTag.SCRIPT) {\r\n                const size = await formatContext.ioReader.readUint24()\r\n                await formatContext.ioReader.skip(7 + size)\r\n                const tagSize = formatContext.ioReader.getPos() - now\r\n                const prev = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n\r\n                if (tagSize === prev) {\r\n                  count++\r\n                }\r\n                else {\r\n                  break\r\n                }\r\n              }\r\n              else {\r\n                break\r\n              }\r\n            }\r\n            if (count < analyzeCount) {\r\n              await formatContext.ioReader.seek(pos + 1n)\r\n              pos = NOPTS_VALUE_BIGINT\r\n            }\r\n            else {\r\n              break\r\n            }\r\n          }\r\n          else {\r\n            await formatContext.ioReader.seek(pos + 1n)\r\n            pos = NOPTS_VALUE_BIGINT\r\n            continue\r\n          }\r\n        }\r\n      }\r\n      catch (error) {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n    }\r\n  }\r\n\r\n  public async seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: AVStream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64> {\r\n    const now = formatContext.ioReader.getPos()\r\n    if (flags & AVSeekFlags.BYTE) {\r\n      await formatContext.ioReader.seek(timestamp)\r\n      if (!(flags & AVSeekFlags.ANY)) {\r\n        await this.syncTag(formatContext)\r\n      }\r\n      return now\r\n    }\r\n    else {\r\n      if (stream && stream.sampleIndexes.length) {\r\n        let index = array.binarySearch(stream.sampleIndexes, (item) => {\r\n          if (item.pts > timestamp) {\r\n            return -1\r\n          }\r\n          return 1\r\n        })\r\n        if (index > 0 && avRescaleQ(timestamp - stream.sampleIndexes[index - 1].pts, stream.timeBase, AV_MILLI_TIME_BASE_Q) < 10000n) {\r\n          logger.debug(`seek in sampleIndexes, found index: ${index}, pts: ${stream.sampleIndexes[index - 1].pts}, pos: ${stream.sampleIndexes[index - 1].pos}`)\r\n          await formatContext.ioReader.seek(stream.sampleIndexes[index - 1].pos)\r\n          return now\r\n        }\r\n      }\r\n\r\n      if (this.script.canSeek()) {\r\n        const { pos, dts } = this.script.dts2Position(Number(avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q) / 1000n))\r\n        if (pos > 0) {\r\n          logger.debug(`seek in filepositions, found pts: ${dts}, pos: ${pos}`)\r\n          await formatContext.ioReader.seek(static_cast<int64>(pos))\r\n\r\n          const nextTag = await formatContext.ioReader.peekUint8()\r\n          if (nextTag !== FlvTag.AUDIO && nextTag !== FlvTag.VIDEO && nextTag !== FlvTag.SCRIPT) {\r\n            await this.syncTag(formatContext)\r\n          }\r\n          return now\r\n        }\r\n      }\r\n      logger.debug('not found any keyframe index, try to seek in bytes')\r\n      return seekInBytes(\r\n        formatContext,\r\n        stream,\r\n        timestamp,\r\n        this.firstTagPos,\r\n        this.readAVPacket.bind(this),\r\n        this.syncTag.bind(this)\r\n      )\r\n    }\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    let count = 0\r\n    if (this.header.hasAudio) {\r\n      count++\r\n    }\r\n    if (this.header.hasVideo) {\r\n      count++\r\n    }\r\n\r\n    return count\r\n  }\r\n}\r\n","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from '../avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public destroy(formatContext: AVIFormatContext): void {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia flv header format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\n\r\nexport default class FlvHeader {\r\n  /**\r\n   * 3 bytes 签名\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 1 bytes 版本，比如 0x01 表示 FLV 版本 1\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes 第一位标记是否有视频，第 4 位标记是否有音频，其余位保留\r\n   */\r\n  public flags: number\r\n\r\n  /**\r\n   * 4 bytes FLV header 的大小，单位是字节，目前是 9\r\n   */\r\n  public dataOffset: number\r\n\r\n  /**\r\n   * 是否有视频\r\n   */\r\n  public hasVideo: boolean\r\n\r\n  /**\r\n   * 是否有音频\r\n   */\r\n  public hasAudio: boolean\r\n\r\n  constructor() {\r\n\r\n    this.signature = 'FLV'\r\n    this.version = 1\r\n    this.flags = 0\r\n    this.dataOffset = 9\r\n\r\n    this.hasAudio = false\r\n    this.hasVideo = false\r\n  }\r\n\r\n  @deasync\r\n  public async read(ioReader: IOReader) {\r\n    this.signature = await ioReader.readString(3)\r\n    this.version = await ioReader.readUint8()\r\n    this.flags = await ioReader.readUint8()\r\n    this.dataOffset = await ioReader.readUint32()\r\n\r\n    this.hasAudio = !!(this.flags & 0x04)\r\n    this.hasVideo = !!(this.flags & 0x01)\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    this.flags = 0\r\n    if (this.hasAudio) {\r\n      this.flags |= 0x04\r\n    }\r\n    if (this.hasVideo) {\r\n      this.flags |= 0x01\r\n    }\r\n\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint8(this.version)\r\n    ioWriter.writeUint8(this.flags)\r\n    ioWriter.writeUint32(this.dataOffset)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv script tag format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\nimport { FlvMetaData } from './type'\r\nimport { FlvTag } from './flv'\r\n\r\nimport * as flv from './oflv'\r\nimport * as errorType from 'avutil/error'\r\n\r\nexport default class FlvScriptTag {\r\n\r\n  public onMetaData: Partial<FlvMetaData>\r\n\r\n  constructor() {\r\n    this.onMetaData = {\r\n      audiocodecid: 10,\r\n      canSeekToEnd: false,\r\n      width: 0,\r\n      height: 0,\r\n      stereo: true,\r\n      videocodecid: 7\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async parseObject(ioReader: IOReader, endPos: bigint) {\r\n    const key = await ioReader.readString(await ioReader.readUint16())\r\n    const value = await this.parseValue(ioReader, endPos)\r\n    return {\r\n      key,\r\n      value\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async parseValue(ioReader: IOReader, endPos: bigint) {\r\n    const type = await ioReader.readUint8()\r\n    let value: any\r\n\r\n    switch (type) {\r\n      // double\r\n      case 0:\r\n        value = await ioReader.readDouble()\r\n        break\r\n        // boolean\r\n      case 1:\r\n        value = await ioReader.readUint8() ? true : false\r\n        break\r\n        // string\r\n      case 2:\r\n        value = await ioReader.readString(await ioReader.readUint16())\r\n        break\r\n        // object\r\n      case 3:\r\n        value = {}\r\n        while (ioReader.getPos() < endPos) {\r\n          const { key, value: val } = await this.parseObject(ioReader, endPos)\r\n          value[key] = val\r\n          if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n            await ioReader.skip(3)\r\n            break\r\n          }\r\n        }\r\n        break\r\n        // ECMA array type (Mixed array)\r\n      case 8:\r\n        value = {}\r\n        // skip ECMAArrayLength(UI32)\r\n        await ioReader.skip(4)\r\n        while (ioReader.getPos() < endPos) {\r\n          const { key, value: val } = await this.parseObject(ioReader, endPos)\r\n          value[key] = val\r\n          if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n            await ioReader.skip(3)\r\n            break\r\n          }\r\n        }\r\n        break\r\n        // ScriptDataObjectEnd\r\n      case 9:\r\n        value = null\r\n        break\r\n        // Strict array type\r\n      case 10:\r\n        value = []\r\n        const length = await ioReader.readUint32()\r\n        for (let i = 0; i < length; i++) {\r\n          value.push(await this.parseValue(ioReader, endPos))\r\n        }\r\n        break\r\n        // Date\r\n      case 11:\r\n        const timestamp = await ioReader.readDouble()\r\n        const localTimeOffset = await ioReader.readInt16()\r\n        value = new Date(timestamp + localTimeOffset * 60 * 1000)\r\n        break\r\n        // Long string type\r\n      case 12:\r\n        value = await ioReader.readString(await ioReader.readUint32())\r\n        break\r\n      default:\r\n\r\n    }\r\n\r\n    return value\r\n  }\r\n\r\n  @deasync\r\n  public async read(ioReader: IOReader, size: number) {\r\n    const now = ioReader.getPos()\r\n    const endPos = now + static_cast<int64>(size)\r\n    const key = await this.parseValue(ioReader, endPos)\r\n    const value = await this.parseValue(ioReader, endPos)\r\n    this[key] = value\r\n\r\n    const tagSize = Number(ioReader.getPos() - now)\r\n    const prev = await ioReader.readUint32()\r\n\r\n    if (tagSize + 11 !== prev) {\r\n      logger.warn(`script size not match, size: ${tagSize + 11}, previousTagSize: ${prev}`)\r\n\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private writeValue(ioWriter: IOWriterSync, value: any) {\r\n    // double\r\n    if (is.number(value)) {\r\n      ioWriter.writeUint8(0)\r\n      ioWriter.writeDouble(value)\r\n    }\r\n    else if (is.bigint(value)) {\r\n      ioWriter.writeUint8(0)\r\n      ioWriter.writeDouble(Number(value))\r\n    }\r\n    // boolean\r\n    else if (is.boolean(value)) {\r\n      ioWriter.writeUint8(1)\r\n      ioWriter.writeUint8(value ? 1 : 0)\r\n    }\r\n    // string\r\n    else if (is.string(value)) {\r\n      // long string\r\n      if (value.length >= 65536) {\r\n        ioWriter.writeUint8(12)\r\n        ioWriter.writeUint32(value.length)\r\n        ioWriter.writeString(value)\r\n      }\r\n      // string\r\n      else {\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint16(value.length)\r\n        ioWriter.writeString(value)\r\n      }\r\n    }\r\n    // array type\r\n    else if (is.array(value)) {\r\n      ioWriter.writeUint8(10)\r\n      ioWriter.writeUint32(value.length)\r\n      array.each(value, (value) => {\r\n        this.writeValue(ioWriter, value)\r\n      })\r\n    }\r\n    // object\r\n    else if (is.object(value)) {\r\n      ioWriter.writeUint8(3)\r\n      object.each(value, (item, key) => {\r\n        ioWriter.writeUint16(key.length)\r\n        ioWriter.writeString(key)\r\n        this.writeValue(ioWriter, item)\r\n      })\r\n      // object end flag\r\n      ioWriter.writeUint24(9)\r\n    }\r\n    else if (value instanceof Date) {\r\n      ioWriter.writeUint8(11)\r\n      ioWriter.writeDouble(value.getTime())\r\n      ioWriter.writeInt16(0)\r\n    }\r\n  }\r\n  public computeSize() {\r\n    const cache = []\r\n    const cacheWriter = new IOWriterSync()\r\n    cacheWriter.onFlush = (data) => {\r\n      cache.push(data.slice())\r\n      return 0\r\n    }\r\n    this.writeValue(cacheWriter, 'onMetaData')\r\n    this.writeValue(cacheWriter, this.onMetaData)\r\n\r\n    cacheWriter.flush()\r\n\r\n    const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n    return buffer.length\r\n  }\r\n\r\n  public write(ioWriter: IOWriterSync) {\r\n    if (this.onMetaData) {\r\n      const cache = []\r\n      const cacheWriter = new IOWriterSync()\r\n      cacheWriter.onFlush = (data) => {\r\n        cache.push(data.slice())\r\n        return 0\r\n      }\r\n\r\n      this.writeValue(cacheWriter, 'onMetaData')\r\n      this.writeValue(cacheWriter, this.onMetaData)\r\n\r\n      cacheWriter.flush()\r\n\r\n      const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n      const now = ioWriter.getPos()\r\n\r\n      // tag header\r\n      flv.writeTagHeader(ioWriter, FlvTag.SCRIPT, buffer.length, 0n)\r\n\r\n      // tag body\r\n      ioWriter.writeBuffer(buffer)\r\n\r\n      // previousTagSize\r\n      ioWriter.writeUint32(Number(ioWriter.getPos() - now))\r\n    }\r\n  }\r\n\r\n  public dts2Position(dts: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n\r\n      let i: number\r\n      for (i = 0; i < times.length; i++) {\r\n        if (times[i] === dts) {\r\n          index = i\r\n          break\r\n        }\r\n        else if (times[i] > dts) {\r\n          index = Math.max(i - 1, 0)\r\n          break\r\n        }\r\n      }\r\n      if (i && i === times.length) {\r\n        index = times.length - 1\r\n      }\r\n      return {\r\n        pos: position[index],\r\n        dts: times[index]\r\n      }\r\n    }\r\n\r\n    return {\r\n      pos: -1,\r\n      dts: -1\r\n    }\r\n  }\r\n\r\n  public position2DTS(pos: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n      let i = 0\r\n      for (i = 0; i < position.length; i++) {\r\n        if (position[i] > pos) {\r\n          index = i\r\n          break\r\n        }\r\n      }\r\n      if (i === position.length) {\r\n        return this.onMetaData.duration ?? times[times.length - 1]\r\n      }\r\n      return times[index]\r\n    }\r\n    return -1\r\n  }\r\n\r\n  public canSeek(): boolean {\r\n    return !!(this.onMetaData.keyframes\r\n      && this.onMetaData.keyframes.filepositions\r\n      && this.onMetaData.keyframes.filepositions.length)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum FlvTag {\r\n  AUDIO = 8,\r\n  VIDEO = 9,\r\n  SCRIPT = 18\r\n}\r\n\r\nexport const enum PacketTypeExt {\r\n  PacketTypeSequenceStart = 0,\r\n  PacketTypeCodedFrames = 1,\r\n  PacketTypeSequenceEnd = 2,\r\n  PacketTypeCodedFramesX = 3,\r\n  PacketTypeMetadata = 4,\r\n  PacketTypeMPEG2TSSequenceStart = 5\r\n}\r\n\r\nexport const enum AVCPacketType {\r\n  AVC_SEQUENCE_HEADER,\r\n  AVC_NALU,\r\n  AVC_END_OF_ENQUENCE\r\n}\r\n\r\nexport const AVCodecID2FlvCodecType = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 10,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 2,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 11,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 1,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 6,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 7,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 8,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 7,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 12,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 13,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 9,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 2,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 3,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 5,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 6\r\n}\r\n\r\nexport const FlvAudioCodecType2AVCodecID = {\r\n  10: AVCodecID.AV_CODEC_ID_AAC,\r\n  2: AVCodecID.AV_CODEC_ID_MP3,\r\n  11: AVCodecID.AV_CODEC_ID_SPEEX,\r\n\r\n  1: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  4: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  5: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  6: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  7: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  8: AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n}\r\n\r\nexport const FlvVideoCodecType2AVCodecID = {\r\n  7: AVCodecID.AV_CODEC_ID_H264,\r\n  12: AVCodecID.AV_CODEC_ID_HEVC,\r\n  13: AVCodecID.AV_CODEC_ID_VVC,\r\n  9: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  2: AVCodecID.AV_CODEC_ID_H263,\r\n  3: AVCodecID.AV_CODEC_ID_FLASHSV,\r\n  4: AVCodecID.AV_CODEC_ID_VP6F,\r\n  5: AVCodecID.AV_CODEC_ID_VP6A,\r\n  6: AVCodecID.AV_CODEC_ID_FLASHSV2\r\n}\r\n\r\nexport const FlvCodecHeaderLength = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 1,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 0,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 0,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 0,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 0,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 4,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 4,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 4,\r\n  [AVCodecID.AV_CODEC_ID_AV1]: 4,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 0,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 0,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 0,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 0,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 0\r\n}\r\n","/*\r\n * libmedia flv encode\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../../AVStream'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { AVCodecID2FlvCodecType, FlvTag, PacketTypeExt } from './flv'\r\n\r\nexport function writeTagHeader(\r\n  ioWriter: IOWriter,\r\n  type: FlvTag,\r\n  size: number,\r\n  timestamp: bigint\r\n) {\r\n  // tagType\r\n  ioWriter.writeUint8(type)\r\n  // size\r\n  ioWriter.writeUint24(size)\r\n  // timestamp\r\n  ioWriter.writeUint24(Number(timestamp & 0xffffffn))\r\n  // timestampExtended\r\n  ioWriter.writeUint8(Number((timestamp >> 24n) & 0xffn))\r\n  // streamId always 0\r\n  ioWriter.writeUint24(0)\r\n}\r\n\r\n/**\r\n * \r\n *   0  1  2  3    4    5      6         7   \r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n *  |SoundFormat|SoundRate|SoundSize| SoundType| SoundData\r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n * \r\n * @param ioWriter \r\n * @param stream \r\n */\r\nexport function writeAudioTagDataHeader(ioWriter: IOWriter, stream: Stream) {\r\n  /**\r\n   * SoundSize 采样精度，对于压缩过的音频，永远是 16 位\r\n   * - 0 snd8Bit\r\n   * - 1 snd16Bit\r\n   */\r\n  let header = 0x02\r\n  /**\r\n   * SoundType 声道类型，对 Nellymoser 来说，永远是单声道；对 AAC 来说，永远是双声道\r\n   * - 0 sndMono 单声道\r\n   * - 1 sndStereo 双声道\r\n   */\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.chLayout.nbChannels > 1) {\r\n    header |= 0x01\r\n  }\r\n  /**\r\n   * SoundRate 采样率，对 AAC 来说，永远等于 3\r\n   * - 0 5.5-kHz\r\n   * - 1 1-kHz\r\n   * - 2 22-kHz\r\n   * - 3 44-kHz\r\n   */\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.sampleRate >= 44000) {\r\n    header |= 0x0c\r\n  }\r\n  else if (stream.codecpar.sampleRate >= 22000) {\r\n    header |= 0x08\r\n  }\r\n  else if (stream.codecpar.sampleRate >= 11000) {\r\n    header |= 0x04\r\n  }\r\n\r\n  header |= ((AVCodecID2FlvCodecType[stream.codecpar.codecId]) << 4)\r\n\r\n  ioWriter.writeUint8(header)\r\n}\r\n\r\n/**\r\n * \r\n *   0 1  2  3  4 5 6 7   \r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\r\n *  |FrameType|CodecID| VideoData\r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n * @param ioWriter \r\n * @param stream \r\n */\r\nexport function writeVideoTagDataHeader(ioWriter: IOWriter, stream: Stream, flags: AVPacketFlags) {\r\n  let header = AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n  ) {\r\n    if (flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n      header |= (1 << 4)\r\n    }\r\n    else {\r\n      header |= (1 << 5)\r\n    }\r\n  }\r\n  ioWriter.writeUint8(header)\r\n}\r\n\r\nexport function writeVideoTagExtDataHeader(ioWriter: IOWriter, stream: Stream, type: PacketTypeExt, flags: AVPacketFlags) {\r\n  let header = (type & 0x0f) | 0x80\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n  ) {\r\n    if (flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n      header |= (1 << 4)\r\n    }\r\n    else {\r\n      header |= (1 << 5)\r\n    }\r\n  }\r\n  ioWriter.writeUint8(header)\r\n}\r\n","/*\r\n * libmedia get bytes by duration\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport AVStream from '../AVStream'\r\nimport * as array from 'common/util/array'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q } from 'avutil/constant'\r\n\r\nexport function getBytesByDuration(streams: AVStream[], duration: int64, timeBase: Rational) {\r\n  let bytes = 0n\r\n  array.each(streams, (st) => {\r\n    bytes += st.codecpar.bitrate * avRescaleQ(duration, timeBase, AV_MILLI_TIME_BASE_Q) / 8000n\r\n  })\r\n  return bytes\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in big end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktag(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 0; i < 4; i++) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia seek in bytes with timestamp\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVStream from '../AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { getBytesByDuration } from './getBytesByDuration'\r\nimport { createAVPacket, destroyAVPacket } from 'avutil/util/avpacket'\r\nimport * as errorType from 'avutil/error'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport * as logger from 'common/util/logger'\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport default async function seekInBytes(\r\n  context: AVIFormatContext,\r\n  stream: AVStream,\r\n  timestamp: int64,\r\n  firstPacketPos: int64,\r\n  readAVPacket: (context: AVIFormatContext, avpacket: pointer<AVPacket>) => Promise<int32>,\r\n  syncAVPacket: (context: AVIFormatContext) => Promise<void>\r\n) {\r\n\r\n  const now = context.ioReader.getPos()\r\n\r\n  const fileSize = await context.ioReader.fileSize()\r\n  let pos: int64 = NOPTS_VALUE_BIGINT\r\n  let duration = timestamp\r\n  if (stream.startTime !== NOPTS_VALUE_BIGINT) {\r\n    duration -= stream.startTime\r\n  }\r\n  else {\r\n    duration -= stream.firstDTS\r\n  }\r\n\r\n  const pointPts = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n\r\n  // 头十秒直接回到开始位置\r\n  if (pointPts < 10000n) {\r\n    logger.debug(`seek pts is earlier then 10s, seek to first packet pos(${firstPacketPos}) directly`)\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n\r\n  let bytes = getBytesByDuration(context.streams, duration, stream.timeBase)\r\n  // 最大到结尾往前 10 秒\r\n  const max = fileSize - getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  const length = getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  if (bytes > max) {\r\n    bytes = max\r\n  }\r\n  if (bytes < firstPacketPos) {\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n  const avpacket = createAVPacket()\r\n  let seekMax = fileSize\r\n  let seekMin = 0n\r\n\r\n  while (true) {\r\n    if (seekMax - seekMin < length) {\r\n      pos = seekMin\r\n      break\r\n    }\r\n    await context.ioReader.seek(bytes)\r\n    await syncAVPacket(context)\r\n    const now = context.ioReader.getPos()\r\n\r\n    let ret = await readAVPacket(context, avpacket)\r\n\r\n    if (ret >= 0) {\r\n      const currentPts = avRescaleQ(avpacket.pts, avpacket.timeBase, AV_MILLI_TIME_BASE_Q)\r\n      const diff = currentPts - pointPts\r\n\r\n      logger.debug(`try to seek to pos: ${bytes}, got packet pts: ${avpacket.pts}(${currentPts}ms), diff: ${diff}ms`)\r\n\r\n      // seek 时间戳的前面 10 秒内\r\n      if (diff <= 0n && -diff < 10000n) {\r\n        pos = now\r\n        break\r\n      }\r\n      // seek 后面\r\n      else if (diff > 0n) {\r\n        seekMax = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n      // seek 前面 10 秒外\r\n      else {\r\n        seekMin = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n    }\r\n    else {\r\n      // 失败了重新 seek 回原来的位置\r\n      pos = NOPTS_VALUE_BIGINT\r\n      break\r\n    }\r\n  }\r\n\r\n  destroyAVPacket(avpacket)\r\n\r\n  if (pos !== NOPTS_VALUE_BIGINT) {\r\n    logger.debug(`finally seek to pos ${pos}`)\r\n\r\n    await context.ioReader.seek(pos)\r\n    await syncAVPacket(context)\r\n    return now\r\n  }\r\n  else {\r\n    await context.ioReader.seek(now)\r\n  }\r\n\r\n  return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n}\r\n","/*\r\n * libmedia av1 syntax util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\n\r\nexport function f(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function uvlc(bitReader: BitReader) {\r\n  let leadingZeros = 0\r\n  while (true) {\r\n    let done = f(bitReader, 1)\r\n    if (done) {\r\n      break\r\n    }\r\n    leadingZeros++\r\n  }\r\n  if (leadingZeros >= 32) {\r\n    return (1 << 32) - 1\r\n  }\r\n  const value =\tf(bitReader, leadingZeros)\r\n  return value + (1 << leadingZeros) - 1\r\n}\r\n\r\nexport function le(bitReader: BitReader, n: number) {\r\n  let t = 0\r\n  for (let i = 0; i < n; i++) {\r\n    let byte = f(bitReader, 8)\r\n    t += (byte << (i * 8))\r\n  }\r\n  return t\r\n}\r\n\r\nexport function leb128(bitReader: BitReader) {\r\n  let value = 0\r\n  let Leb128Bytes = 0\r\n  for (let i = 0; i < 8; i++ ) {\r\n    let leb128Byte_ = f(bitReader, 8)\r\n    value |= ((leb128Byte_ & 0x7f) << (i * 7))\r\n    Leb128Bytes += 1\r\n    if (!(leb128Byte_ & 0x80)) {\r\n      break\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\nexport function su(bitReader: BitReader, n: number) {\r\n  let value = f(bitReader, n)\r\n  let signMask = 1 << (n - 1)\r\n  if (value & signMask) {\r\n    value = value - 2 * signMask\r\n  }\r\n  return value\r\n}\r\n\r\nexport function ns(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tf(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit =\tf(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n\r\nexport function L(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0 ; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function NS(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tL(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit = L(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n","/**\r\n * 写字节流工具\r\n */\r\n\r\nimport { IOError } from './error'\r\nimport * as text from '../util/text'\r\nimport { Uint8ArrayInterface, BytesWriterSync } from './interface'\r\n\r\nexport default class IOWriterSync implements BytesWriterSync {\r\n\r\n  private data: DataView\r\n\r\n  private buffer: Uint8ArrayInterface\r\n\r\n  private pointer: number\r\n\r\n  private pos: bigint\r\n\r\n  private size: number\r\n\r\n  private littleEndian: boolean\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array, pos?: bigint) => number\r\n  public onSeek: (seek: bigint) => number\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   * @param bigEndian 是否按大端字节序写，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024, bigEndian: boolean = true, map?: Uint8ArrayInterface) {\r\n    this.pointer = 0\r\n    this.pos = 0n\r\n    this.size = size\r\n    this.littleEndian = !bigEndian\r\n    this.error = 0\r\n\r\n    if (map && map.view) {\r\n      this.size = map.length\r\n      this.buffer = map\r\n      this.data = map.view\r\n    }\r\n    else if (map && !map.byteOffset) {\r\n      this.size = map.length\r\n      this.buffer = map\r\n      this.data = new DataView(this.buffer.buffer)\r\n    }\r\n    else {\r\n\r\n      if (map) {\r\n        throw new Error('not support subarray of ArrayBuffer')\r\n      }\r\n\r\n      this.buffer = new Uint8Array(this.size)\r\n      this.data = new DataView(this.buffer.buffer)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 8 位无符号整数\r\n   */\r\n  public writeUint8(value: number) {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint8(this.pointer, value)\r\n    this.pointer++\r\n    this.pos++\r\n  }\r\n\r\n  /**\r\n   * 读取 16 位无符号整数\r\n   */\r\n  public writeUint16(value: number) {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint16(this.pointer, value, this.littleEndian)\r\n    this.pointer += 2\r\n    this.pos += 2n\r\n  }\r\n\r\n  /**\r\n   * 写 24 位无符号整数\r\n   */\r\n  public writeUint24(value: number) {\r\n    if (this.remainingLength() < 3) {\r\n      this.flush()\r\n    }\r\n    const high = (value & 0xff0000) >> 16\r\n    const middle = (value & 0x00ff00) >> 8\r\n    const low = value & 0x0000ff\r\n    if (this.littleEndian) {\r\n      this.writeUint8(low)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(high)\r\n    }\r\n    else {\r\n      this.writeUint8(high)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(low)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 32 位无符号整数\r\n   */\r\n  public writeUint32(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写 64 位无符号整数\r\n   */\r\n  public writeUint64(value: bigint) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setBigUint64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 写 8 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeInt8(value: number) {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt8(this.pointer, value)\r\n    this.pointer++\r\n    this.pos++\r\n  }\r\n\r\n  /**\r\n   * 写 16 位有符号整数\r\n   */\r\n  public writeInt16(value: number) {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt16(this.pointer, value, this.littleEndian)\r\n    this.pointer += 2\r\n    this.pos += 2n\r\n  }\r\n\r\n  /**\r\n   * 写 24 位有符号整数\r\n   */\r\n  public writeInt24(value: number) {\r\n    this.writeUint24(value < 0 ? (value + 0x1000000) : value)\r\n  }\r\n\r\n  /**\r\n   * 写 32 位有符号整数\r\n   */\r\n  public writeInt32(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写 64 位有符号整数\r\n   */\r\n  public writeInt64(value: bigint) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setBigInt64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 写单精度浮点数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeFloat(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setFloat32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写双精度浮点数\r\n   */\r\n  public writeDouble(value: number) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setFloat64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 获取当前写指针\r\n   * \r\n   * @returns \r\n   */\r\n  public getPointer() {\r\n    return this.pointer\r\n  }\r\n\r\n  public getPos() {\r\n    return this.pos\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.size - this.pointer\r\n  }\r\n\r\n  /**\r\n   * 写指定长度的二进制 buffer 数据\r\n   * \r\n   * @param length \r\n   * @returns \r\n   */\r\n  public writeBuffer(buffer: Uint8ArrayInterface) {\r\n\r\n    if (!buffer.length) {\r\n      return\r\n    }\r\n\r\n    let length = buffer.length\r\n    if (this.remainingLength() < length) {\r\n      let index = 0\r\n      while (length > 0) {\r\n        this.flush()\r\n        const len = Math.min(this.size, length)\r\n        this.buffer.set(buffer.subarray(index, index + len), this.pointer)\r\n\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n        index += len\r\n        length -= len\r\n      }\r\n    }\r\n    else {\r\n      this.buffer.set(buffer, this.pointer)\r\n      this.pointer += length\r\n      this.pos += BigInt(length)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写一个字符串\r\n   */\r\n  public writeString(str: string) {\r\n    const buffer = text.encode(str)\r\n    this.writeBuffer(buffer)\r\n    return buffer.length\r\n  }\r\n\r\n  /**\r\n   * 将缓冲区中数据写出\r\n   */\r\n  public flush() {\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.pointer) {\r\n      const ret = this.onFlush(this.buffer.subarray(0, this.pointer))\r\n      if (ret !== 0) {\r\n        this.error = ret\r\n        throw Error('IOWriter error, flush failed')\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  /**\r\n   * 将缓冲区中数据写出到指定位置\r\n   * \r\n   * @param pos \r\n   */\r\n  public flushToPos(pos: bigint) {\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, flush failed because of no flush callback')\r\n    }\r\n    if (this.pointer) {\r\n      const ret = this.onFlush(this.buffer.subarray(0, this.pointer), pos)\r\n      if (ret !== 0) {\r\n        this.error = ret\r\n        throw Error('IOWriter error, flush failed')\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  /**\r\n   * seek 到指定位置\r\n   * \r\n   * @param pos \r\n   */\r\n  public seek(pos: bigint) {\r\n    if (!this.onSeek) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, seek failed because of no seek callback')\r\n    }\r\n\r\n    this.flush()\r\n\r\n    const ret = this.onSeek(pos)\r\n\r\n    if (ret !== 0) {\r\n      this.error = ret\r\n      throw Error('IOWriter error, seek failed')\r\n    }\r\n\r\n    this.pos = pos\r\n  }\r\n\r\n  /**\r\n   * 在当前缓冲区映射区间内 seek\r\n   * \r\n   * @param pos \r\n   */\r\n  public seekInline(pos: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.max(0, Math.min(this.size, pos))\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 跳过指定长度\r\n   * \r\n   * @param length \r\n   */\r\n  public skip(length: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.min(this.size, this.pointer + length)\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 回退指定长度，不能大于 pointer 大小\r\n   * \r\n   * @param length \r\n   */\r\n  public back(length: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.max(0, this.pointer - length)\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区\r\n   * \r\n   * @returns \r\n   */\r\n  public getBuffer() {\r\n    return this.buffer.subarray(0, this.pointer)\r\n  }\r\n\r\n  /**\r\n   * 设置读取是小端还是大端\r\n   * \r\n   * @param bigEndian \r\n   */\r\n  public setEndian(bigEndian: boolean) {\r\n    this.littleEndian = !bigEndian\r\n  }\r\n\r\n  /**\r\n   * 重置 writer\r\n   */\r\n  public reset() {\r\n    this.pointer = 0\r\n    this.pos = 0n\r\n    this.error = 0\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区长度\r\n   * \r\n   * @returns \r\n   */\r\n  public getBufferSize() {\r\n    return this.size\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}