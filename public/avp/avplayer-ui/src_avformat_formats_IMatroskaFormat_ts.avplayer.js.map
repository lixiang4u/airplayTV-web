{"version":3,"file":"src_avformat_formats_IMatroskaFormat_ts.avplayer.js","mappings":"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9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAA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","sources":["webpack://AVPlayer/./src/avformat/codecs/aac.ts","webpack://AVPlayer/./src/avformat/codecs/av1.ts","webpack://AVPlayer/./src/avformat/codecs/mp3.ts","webpack://AVPlayer/./src/avformat/codecs/opus.ts","webpack://AVPlayer/./src/avformat/codecs/vp8.ts","webpack://AVPlayer/./src/avformat/codecs/vp9.ts","webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/IMatroskaFormat.ts","webpack://AVPlayer/./src/avformat/formats/isom/tags.ts","webpack://AVPlayer/./src/avformat/formats/matroska/function/findStreamByTrackNumber.ts","webpack://AVPlayer/./src/avformat/formats/matroska/function/findStreamByTrackUid.ts","webpack://AVPlayer/./src/avformat/formats/matroska/imatroska.ts","webpack://AVPlayer/./src/avformat/formats/matroska/matroska.ts","webpack://AVPlayer/./src/avformat/formats/riff/riff.ts","webpack://AVPlayer/./src/avformat/function/mktagle.ts","webpack://AVPlayer/./src/avutil/util/av1syntax.ts","webpack://AVPlayer/./src/avutil/util/intwrite.ts"],"sourcesContent":["/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'HE'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)] ?? 48000\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f] ?? 2\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((codecpar.profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n\r\nexport interface AACADTSHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  aacFrameLength: number\r\n  numberOfRawDataBlocksInFrame: number\r\n  headerLength: number\r\n  framePayloadLength: number\r\n}\r\n\r\nexport interface AACLATMHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  useSameStreamMux: boolean\r\n  headerLength: number\r\n  framePayloadLength: number\r\n  muxLengthBytes: number\r\n}\r\n\r\n/**\r\n * \r\n * adts 封装转 raw\r\n * \r\n * bits    \r\n * - 12  syncword\r\n * - 1   ID (MPEG 标识位，固定为 1)\r\n * - 2   Layer ( 固定为 0)\r\n * - 1   Protection Absent ( 指示是否有 CRC 校验，1 表示没有校验）\r\n * - 2   Profile\r\n * - 4   Sampling Frequency Index ( 采样率的索引）\r\n * - 1   Private Bit ( 保留位，一般设置为 0)\r\n * - 3   Channel Configuration ( 音频通道数）\r\n * - 1   Original Copy ( 原始拷贝标志位，一般设置为 0)\r\n * - 1   Home ( 保留位，一般设置为 0)\r\n * - 1   Copyright Identification Bit（置 0）\r\n * - 1   Copyright Identification Start（置 0）\r\n * - 13  Frame Length ( 帧长度，包括 ADTS 头和音频帧数据的长度）\r\n * - 11  Buffer Fullness ( 缓冲区满度，可用于音频流的同步）\r\n * - 2   Number of Raw Data Blocks in Frame ( 帧中原始数据块的数量）\r\n * - 16  CRC (Protection Absent 控制）\r\n * - N  raw aac data\r\n * \r\n */\r\nexport function parseADTSHeader(buffer: Uint8ArrayInterface): AACADTSHeader | number {\r\n\r\n  if (buffer.length < 7) {\r\n    return -1\r\n  }\r\n\r\n  const syncWord = (buffer[0] << 4) | (buffer[0 + 1] >> 4)\r\n\r\n  if (syncWord !== 0xFFF) {\r\n    return -1\r\n  }\r\n\r\n  /*\r\n    * const id = (buffer[1] & 0x08) >>> 3\r\n    * const layer = (buffer[1] & 0x06) >>> 1\r\n    */\r\n  const protectionAbsent = buffer[1] & 0x01\r\n  const profile = (buffer[2] & 0xC0) >>> 6\r\n  const samplingFrequencyIndex = (buffer[2] & 0x3C) >>> 2\r\n  const channelConfiguration = ((buffer[2] & 0x01) << 2) | ((buffer[3] & 0xC0) >>> 6)\r\n\r\n  // adts_variable_header()\r\n  const aacFrameLength = ((buffer[3] & 0x03) << 11)\r\n    | (buffer[4] << 3)\r\n    | ((buffer[5] & 0xE0) >>> 5)\r\n\r\n  const numberOfRawDataBlocksInFrame = buffer[6] & 0x03\r\n\r\n  let headerLength = protectionAbsent === 1 ? 7 : 9\r\n  let framePayloadLength = aacFrameLength - headerLength\r\n\r\n  return {\r\n    syncWord,\r\n    profile: profile + 1,\r\n    sampleRate: MPEG4SamplingFrequencies[samplingFrequencyIndex],\r\n    channels: MPEG4Channels[channelConfiguration],\r\n    aacFrameLength,\r\n    numberOfRawDataBlocksInFrame,\r\n    headerLength,\r\n    framePayloadLength\r\n  }\r\n}\r\n\r\nexport function parseLATMHeader(buffer: Uint8ArrayInterface, bitReader?: BitReader) {\r\n  if (!bitReader) {\r\n    bitReader = new BitReader()\r\n    bitReader.appendBuffer(buffer)\r\n  }\r\n\r\n  function getLATMValue() {\r\n    const bytesForValue = bitReader.readU(2)\r\n    let value = 0\r\n\r\n    for (let i = 0; i <= bytesForValue; i++) {\r\n      value = value << 8\r\n      value = value | bitReader.readU(8)\r\n    }\r\n    return value\r\n  }\r\n\r\n  const now = bitReader.getPointer()\r\n\r\n  const info: AACLATMHeader = {\r\n    syncWord: 0,\r\n    profile: 0,\r\n    sampleRate: 0,\r\n    channels: 0,\r\n    useSameStreamMux: false,\r\n    headerLength: 0,\r\n    framePayloadLength: 0,\r\n    muxLengthBytes: 0\r\n  }\r\n\r\n  const syncWord = bitReader.readU(11)\r\n\r\n  if (syncWord !== 0x2B7) {\r\n    return -1\r\n  }\r\n\r\n  info.syncWord = syncWord\r\n\r\n  info.muxLengthBytes = bitReader.readU(13)\r\n\r\n  const useSameStreamMux = bitReader.readU1() === 0x01\r\n\r\n  info.useSameStreamMux = useSameStreamMux\r\n\r\n  if (!useSameStreamMux) {\r\n    const audioMuxVersion = bitReader.readU1() === 0x01\r\n    const audioMuxVersionA = audioMuxVersion && bitReader.readU1() === 0x01\r\n    if (audioMuxVersionA) {\r\n      return -1\r\n    }\r\n    if (audioMuxVersion) {\r\n      getLATMValue()\r\n    }\r\n    const allStreamsSameTimeFraming = bitReader.readU1() === 0x01\r\n    if (!allStreamsSameTimeFraming) {\r\n      return -1\r\n    }\r\n    const numSubFrames = bitReader.readU(6)\r\n    if (numSubFrames !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numProgram = bitReader.readU(4)\r\n    if (numProgram !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numLayer = bitReader.readU(3)\r\n    if (numLayer !== 0) {\r\n      return -1\r\n    }\r\n\r\n    let fillBits = audioMuxVersion ? getLATMValue() : 0\r\n\r\n    const audioObjectType = bitReader.readU(5)\r\n    fillBits -= 5\r\n\r\n    const samplingFreqIndex = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    const channelConfig = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    bitReader.readU(3)\r\n    fillBits -= 3\r\n\r\n    if (fillBits > 0) {\r\n      bitReader.readU(fillBits)\r\n    }\r\n\r\n    const frameLengthType = bitReader.readU(3)\r\n    if (frameLengthType === 0) {\r\n      bitReader.readU(8)\r\n    }\r\n    else {\r\n      return -1\r\n    }\r\n\r\n    const otherDataPresent = bitReader.readU1() === 0x01\r\n    if (otherDataPresent) {\r\n      if (audioMuxVersion) {\r\n        getLATMValue()\r\n      }\r\n      else {\r\n        let otherDataLenBits = 0\r\n        while (true) {\r\n          otherDataLenBits = otherDataLenBits << 8\r\n          const otherDataLenEsc = bitReader.readU1() === 0x01\r\n          const otherDataLenTmp = bitReader.readU(8)\r\n          otherDataLenBits += otherDataLenTmp\r\n          if (!otherDataLenEsc) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const crcCheckPresent = bitReader.readU1() === 0x01\r\n    if (crcCheckPresent) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    info.profile = audioObjectType + 1\r\n    info.sampleRate = MPEG4SamplingFrequencies[samplingFreqIndex]\r\n    info.channels = MPEG4Channels[channelConfig]\r\n  }\r\n\r\n  let length = 0\r\n  while (true) {\r\n    const tmp = bitReader.readU(8)\r\n    length += tmp\r\n    if (tmp !== 0xff) {\r\n      break\r\n    }\r\n  }\r\n\r\n  info.framePayloadLength = length\r\n  info.headerLength = bitReader.getPointer() - now + (bitReader.getBitLeft() === 8 ? 0 : 1)\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia av1 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as av1syntax from 'avutil/util/av1syntax'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { PixelFormatDescriptorsMap } from 'avutil/pixelFormatDescriptor'\r\n\r\nexport const enum AV1Profile {\r\n  Main,\r\n  High,\r\n  Professional\r\n}\r\n\r\nexport const enum OBUType {\r\n  Reserved,\r\n  SEQUENCE_HEADER,\r\n  TEMPORAL_DELIMITER,\r\n  FRAME_HEADER,\r\n  TILE_GROUP,\r\n  METADATA,\r\n  FRAME,\r\n  REDUNDANT_FRAME_HEADER,\r\n  TILE_LIST,\r\n  PADDING = 15\r\n}\r\n\r\nexport const AV1Profile2Name: Record<AV1Profile, string> = {\r\n  [AV1Profile.Main]: 'Main',\r\n  [AV1Profile.High]: 'High',\r\n  [AV1Profile.Professional]: 'Professional'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 20, maxResolution: 2048 * 1152 },\r\n  { level: 21, maxResolution: 2816 * 1584 },\r\n  { level: 30, maxResolution: 4352 * 2448 },\r\n  { level: 31, maxResolution: 5504 * 3096 },\r\n  { level: 40, maxResolution: 6144 * 3456 },\r\n  { level: 41, maxResolution: 6144 * 3456 },\r\n  { level: 50, maxResolution: 8192 * 4352 },\r\n  { level: 51, maxResolution: 8192 * 4352 },\r\n  { level: 52, maxResolution: 8192 * 4352 },\r\n  { level: 53, maxResolution: 8192 * 4352 },\r\n  { level: 60, maxResolution: 16384 * 8704 },\r\n  { level: 61, maxResolution: 16384 * 8704 },\r\n  { level: 62, maxResolution: 16384 * 8704 },\r\n  { level: 63, maxResolution: 16384 * 8704 }\r\n]\r\n\r\nexport const AV1LevelIdx = [20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43, 50, 51, 52, 53, 60, 61, 62, 63, 70, 71, 72, 73]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 4) {\r\n    const params = parseExtraData(extradata)\r\n\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 bit marker\r\n * - 7 bit version\r\n * - 3 bit profile\r\n * - 5 bit level\r\n * - 1 bit tier\r\n * - 1 bit bitdepth > 8\r\n * - 1 bit bitdepth == 12\r\n * - 1 bit monochrome\r\n * - 1 bit chroma_subsampling_x\r\n * - 1 bit chroma_subsampling_y\r\n * - 2 bit chroma_sample_position\r\n * - 8 bit padding\r\n * \r\n * @param header \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  // marker\r\n  bitReader.readU1()\r\n  // version\r\n  bitReader.readU(7)\r\n\r\n  const profile = bitReader.readU(3)\r\n  const level = bitReader.readU(5)\r\n  const tier = bitReader.readU1()\r\n  let bitDepth = bitReader.readU1() ? 10 : 8\r\n  if (bitReader.readU1()) {\r\n    bitDepth = 12\r\n  }\r\n  const monochrome = bitReader.readU1()\r\n  const chromaSubsamplingX = bitReader.readU1()\r\n  const chromaSubsamplingY = bitReader.readU1()\r\n  const chromaSamplePosition = bitReader.readU(2)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    tier,\r\n    bitDepth,\r\n    monochrome,\r\n    chromaSubsamplingX,\r\n    chromaSubsamplingY,\r\n    chromaSamplePosition\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport function parseSequenceHeader(header: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(header.length)\r\n  bitReader.appendBuffer(header)\r\n\r\n  bitReader.readU1()\r\n  bitReader.readU(4)\r\n  const extensionFlag = bitReader.readU1()\r\n  const hasSizeFlag = bitReader.readU1()\r\n  // obu_reserved_1bit\r\n  bitReader.readU1()\r\n  if (extensionFlag) {\r\n    bitReader.readU(8)\r\n  }\r\n  if (hasSizeFlag) {\r\n    av1syntax.leb128(bitReader)\r\n  }\r\n\r\n  const seq_profile =\tav1syntax.f(bitReader, 3)\r\n  const still_picture =\tav1syntax.f(bitReader, 1)\r\n  const reduced_still_picture_header = av1syntax.f(bitReader, 1)\r\n\r\n  let timing_info_present_flag = 0\r\n  let decoder_model_info_present_flag = 0\r\n  let initial_display_delay_present_flag = 0\r\n  let operating_points_cnt_minus_1 = 0\r\n  let operating_point_idc: number[] = [0]\r\n  let seq_level_idx: number[] = [0]\r\n  let seq_tier: number[] = [0]\r\n  let decoder_model_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_minus_1: number[] = [0]\r\n  let buffer_delay_length_minus_1 = 0\r\n  let decoder_buffer_delay: number[] = [0]\r\n  let encoder_buffer_delay: number[] = [0]\r\n  let low_delay_mode_flag: number[] = [0]\r\n\r\n  if (reduced_still_picture_header) {\r\n    seq_level_idx[0] = av1syntax.f(bitReader, 5)\r\n  }\r\n  else {\r\n    timing_info_present_flag = av1syntax.f(bitReader, 1)\r\n    if (timing_info_present_flag) {\r\n\r\n      let num_units_in_display_tick =\tav1syntax.f(bitReader, 32)\r\n      let time_scale = av1syntax.f(bitReader, 32)\r\n      let equal_picture_interval = av1syntax.f(bitReader, 1)\r\n      if (equal_picture_interval) {\r\n        let num_ticks_per_picture_minus_1 = av1syntax.uvlc(bitReader)\r\n      }\r\n\r\n      let decoder_model_info_present_flag =\tav1syntax.f(bitReader, 1)\r\n      if (decoder_model_info_present_flag) {\r\n        buffer_delay_length_minus_1 =\tav1syntax.f(bitReader, 5)\r\n        let num_units_in_decoding_tick = av1syntax.f(bitReader, 32)\r\n        let buffer_removal_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n        let frame_presentation_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n      }\r\n    }\r\n    else {\r\n      decoder_model_info_present_flag = 0\r\n    }\r\n    let initial_display_delay_present_flag = av1syntax.f(bitReader, 1)\r\n    let operating_points_cnt_minus_1 = av1syntax.f(bitReader, 5)\r\n    for (let i = 0; i <= operating_points_cnt_minus_1; i++ ) {\r\n      operating_point_idc[i] = av1syntax.f(bitReader, 12)\r\n      seq_level_idx[i] = av1syntax.f(bitReader, 5)\r\n      if (seq_level_idx[i] > 7) {\r\n        seq_tier[i] = av1syntax.f(bitReader, 1)\r\n      }\r\n      else {\r\n        seq_tier[i] = 0\r\n      }\r\n      if (decoder_model_info_present_flag) {\r\n        decoder_model_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if (decoder_model_present_for_this_op[i]) {\r\n          let n = buffer_delay_length_minus_1 + 1\r\n          decoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          encoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          low_delay_mode_flag[i] = av1syntax.f(bitReader, 1)\r\n        }\r\n      }\r\n      else {\r\n        decoder_model_present_for_this_op[i] = 0\r\n      }\r\n      if (initial_display_delay_present_flag) {\r\n        initial_display_delay_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if ( initial_display_delay_present_for_this_op[i] ) {\r\n          initial_display_delay_minus_1[i] = av1syntax.f(bitReader, 4)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let frame_width_bits_minus_1 = av1syntax.f(bitReader, 4)\r\n  let frame_height_bits_minus_1 =\tav1syntax.f(bitReader, 4)\r\n  let n = frame_width_bits_minus_1 + 1\r\n  let max_frame_width_minus_1 =\tav1syntax.f(bitReader, n)\r\n  n = frame_height_bits_minus_1 + 1\r\n  let max_frame_height_minus_1 = av1syntax.f(bitReader, n)\r\n  let frame_id_numbers_present_flag = 0\r\n  let delta_frame_id_length_minus_2 = 0\r\n  let additional_frame_id_length_minus_1 = 0\r\n  if (reduced_still_picture_header ) {\r\n    frame_id_numbers_present_flag = 0\r\n  }\r\n  else {\r\n    frame_id_numbers_present_flag =\tav1syntax.f(bitReader, 1)\r\n  }\r\n  if ( frame_id_numbers_present_flag ) {\r\n    delta_frame_id_length_minus_2 =\tav1syntax.f(bitReader, 4)\r\n    additional_frame_id_length_minus_1 = av1syntax.f(bitReader, 3)\r\n  }\r\n  let use_128x128_superblock = av1syntax.f(bitReader, 1)\r\n  let enable_filter_intra =\tav1syntax.f(bitReader, 1)\r\n  let enable_intra_edge_filter = av1syntax.f(bitReader, 1)\r\n  let enable_interintra_compound = 0\r\n  let enable_masked_compound = 0\r\n  let enable_warped_motion = 0\r\n  let enable_dual_filter = 0\r\n  let enable_order_hint = 0\r\n  let enable_jnt_comp = 0\r\n  let enable_ref_frame_mvs = 0\r\n  let seq_force_screen_content_tools = 2\r\n  let seq_force_integer_mv = 2\r\n  let OrderHintBits = 0\r\n  if (!reduced_still_picture_header) {\r\n    let enable_interintra_compound = av1syntax.f(bitReader, 1)\r\n    enable_masked_compound = av1syntax.f(bitReader, 1)\r\n    enable_warped_motion = av1syntax.f(bitReader, 1)\r\n    enable_dual_filter = av1syntax.f(bitReader, 1)\r\n    enable_order_hint = av1syntax.f(bitReader, 1)\r\n    if (enable_order_hint) {\r\n      enable_jnt_comp = av1syntax.f(bitReader, 1)\r\n      enable_ref_frame_mvs = av1syntax.f(bitReader, 1)\r\n    }\r\n    else {\r\n      enable_jnt_comp = 0\r\n      enable_ref_frame_mvs = 0\r\n    }\r\n    let seq_choose_screen_content_tools =\tav1syntax.f(bitReader, 1)\r\n    if (seq_choose_screen_content_tools) {\r\n      seq_force_screen_content_tools = 2\r\n    }\r\n    else {\r\n      seq_force_screen_content_tools = av1syntax.f(bitReader, 1)\r\n    }\r\n\r\n    if (seq_force_screen_content_tools > 0) {\r\n      let seq_choose_integer_mv =\tav1syntax.f(bitReader, 1)\r\n      if (seq_choose_integer_mv) {\r\n        seq_force_integer_mv = 2\r\n      }\r\n      else {\r\n        seq_force_integer_mv = av1syntax.f(bitReader, 1)\r\n      }\r\n    }\r\n    else {\r\n      seq_force_integer_mv = 2\r\n    }\r\n    if (enable_order_hint) {\r\n      const order_hint_bits_minus_1 =\tav1syntax.f(bitReader, 3)\r\n      OrderHintBits = order_hint_bits_minus_1 + 1\r\n    }\r\n    else {\r\n      OrderHintBits = 0\r\n    }\r\n  }\r\n  let enable_superres =\tav1syntax.f(bitReader, 1)\r\n  let enable_cdef =\tav1syntax.f(bitReader, 1)\r\n  let enable_restoration = av1syntax.f(bitReader, 1)\r\n\r\n  let high_bitdepth =\tav1syntax.f(bitReader, 1)\r\n  let twelve_bit = 0\r\n  let bit_depth = 0\r\n  let mono_chrome = 0\r\n  if (seq_profile == 2 && high_bitdepth ) {\r\n    twelve_bit = av1syntax.f(bitReader, 1)\r\n    bit_depth = twelve_bit ? 12 : 10\r\n  }\r\n  else if (seq_profile <= 2) {\r\n    bit_depth = high_bitdepth ? 10 : 8\r\n  }\r\n  if ( seq_profile == 1 ) {\r\n    mono_chrome = 0\r\n  }\r\n  else {\r\n    mono_chrome = av1syntax.f(bitReader, 1)\r\n  }\r\n  const color_description_present_flag = av1syntax.f(bitReader, 1)\r\n  let color_primaries = 0\r\n  let transfer_characteristics = 0\r\n  let matrix_coefficients = 0\r\n  if (color_description_present_flag ) {\r\n    color_primaries =\tav1syntax.f(bitReader, 8)\r\n    transfer_characteristics = av1syntax.f(bitReader, 8)\r\n    matrix_coefficients = av1syntax.f(bitReader, 8)\r\n  }\r\n  else {\r\n    color_primaries = 2\r\n    transfer_characteristics = 2\r\n    matrix_coefficients = 2\r\n  }\r\n  let color_range = 0\r\n  let subsampling_x = 0\r\n  let subsampling_y = 0\r\n  let chroma_sample_position = 0\r\n  let separate_uv_delta_q = 0\r\n  if (mono_chrome) {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    subsampling_x = 1\r\n    subsampling_y = 1\r\n    chroma_sample_position = 0\r\n    separate_uv_delta_q = 0\r\n  }\r\n  else if (color_primaries == 1\r\n    && transfer_characteristics == 13\r\n    && matrix_coefficients == 0\r\n  ) {\r\n    color_range = 1\r\n    subsampling_x = 0\r\n    subsampling_y = 0\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n  else {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    if (seq_profile == 0) {\r\n      subsampling_x = 1\r\n      subsampling_y = 1\r\n    }\r\n    else if ( seq_profile == 1 ) {\r\n      subsampling_x = 0\r\n      subsampling_y = 0\r\n    }\r\n    else {\r\n      if (bit_depth == 12) {\r\n        subsampling_x\t= av1syntax.f(bitReader, 1)\r\n        if (subsampling_x) {\r\n          subsampling_y =\tav1syntax.f(bitReader, 1)\r\n        }\r\n        else {\r\n          subsampling_y = 0\r\n        }\r\n      }\r\n      else {\r\n        subsampling_x = 1\r\n        subsampling_y = 0\r\n      }\r\n    }\r\n    if (subsampling_x && subsampling_y) {\r\n      chroma_sample_position = av1syntax.f(bitReader, 2)\r\n    }\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n\r\n  let film_grain_params_present\t= av1syntax.f(bitReader, 1)\r\n\r\n  return {\r\n    width: max_frame_width_minus_1 + 1,\r\n    height: max_frame_height_minus_1 + 1,\r\n    profile: seq_profile,\r\n    level: AV1LevelIdx[seq_level_idx[0]],\r\n    tier: seq_tier[0],\r\n    bitDepth: bit_depth,\r\n    monoChrome: mono_chrome,\r\n    colorRange: color_range,\r\n    colorPrimaries: color_primaries,\r\n    transferCharacteristics: transfer_characteristics,\r\n    matrixCoefficients: matrix_coefficients,\r\n    subsamplingX: subsampling_x,\r\n    subsamplingY: subsampling_y,\r\n    chromaSamplePosition: chroma_sample_position\r\n  }\r\n}\r\n\r\nexport function splitOBU(buffer: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader()\r\n\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const list: Uint8ArrayInterface[] = []\r\n\r\n  while (bitReader.remainingLength()) {\r\n    const now = bitReader.getPointer()\r\n    // obu_forbidden_bit\r\n    bitReader.readU1()\r\n    const type = bitReader.readU(4)\r\n    const extensionFlag = bitReader.readU1()\r\n    const hasSizeFlag = bitReader.readU1()\r\n    // obu_reserved_1bit\r\n    bitReader.readU1()\r\n\r\n    if (extensionFlag) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    const size = hasSizeFlag ? av1syntax.leb128(bitReader) : buffer.length - 1 - extensionFlag\r\n\r\n    const headerSize = bitReader.getPointer() - now\r\n\r\n    list.push(buffer.subarray(now, now + headerSize + size))\r\n\r\n    bitReader.skip(size * 8)\r\n  }\r\n\r\n  return list\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>, buffer: Uint8ArrayInterface) {\r\n  const bitWriter = new BitWriter(4)\r\n  // marker\r\n  bitWriter.writeU1(1)\r\n  // version\r\n  bitWriter.writeU(7, 1)\r\n\r\n  const header = splitOBU(buffer).find((buffer) => {\r\n    return ((buffer[0] >>> 3) & 0x0f) === OBUType.SEQUENCE_HEADER\r\n  })\r\n\r\n  if (header) {\r\n    const params = parseSequenceHeader(header)\r\n    bitWriter.writeU(3, params.profile)\r\n    bitWriter.writeU(5, params.level)\r\n    bitWriter.writeU(1, params.tier)\r\n    bitWriter.writeU(1, params.bitDepth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, params.bitDepth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, params.monoChrome)\r\n    bitWriter.writeU(1, params.subsamplingX)\r\n    bitWriter.writeU(1, params.subsamplingY)\r\n    bitWriter.writeU(1, params.chromaSamplePosition)\r\n  }\r\n  else {\r\n    const desc = PixelFormatDescriptorsMap[codecpar.format]\r\n    bitWriter.writeU(3, codecpar.profile)\r\n    bitWriter.writeU(5, codecpar.level)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 0)\r\n  }\r\n  // padding\r\n  bitWriter.writeU(8, 0)\r\n  return bitWriter.getBuffer()\r\n}\r\n","/*\r\n * libmedia mp3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVStream from '../AVStream'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\n\r\nconst MpegAudioV10SampleRateTable = [44100, 48000, 32000, 0]\r\n\r\nconst MpegAudioV20SampleRateTable = [22050, 24000, 16000, 0]\r\n\r\nconst MpegAudioV25SampleRateTable = [11025, 12000, 8000, 0]\r\n\r\nconst MpegAudioV10FrameSizeTable = [0, 1152, 1152, 384]\r\n\r\nconst MpegAudioV20FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV25FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV1L1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1]\r\n\r\nconst MpegAudioV1L2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1]\r\n\r\nconst MpegAudioV1L3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1]\r\n\r\nconst MpegAudioV2L1BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, -1]\r\n\r\nconst MpegAudioV2L2L3BitRateTable = [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1]\r\n\r\nexport function getSampleRateByVersionIndex(version: number, samplingFreqIndex: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25SampleRateTable[samplingFreqIndex]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20SampleRateTable[samplingFreqIndex]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10SampleRateTable[samplingFreqIndex]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getFrameSizeByVersionLayer(version: number, layer: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25FrameSizeTable[layer]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20FrameSizeTable[layer]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10FrameSizeTable[layer]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getBitRateByVersionLayerIndex(version: number, layer: number, index: number) {\r\n\r\n  switch (layer) {\r\n    // layer3\r\n    case 1:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L3BitRateTable[index]\r\n      }\r\n      break\r\n    // layer2\r\n    case 2:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L2BitRateTable[index]\r\n      }\r\n    // layer1\r\n    case 3:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L1BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L1BitRateTable[index]\r\n      }\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getProfileByLayer(layer: number) {\r\n  switch (layer) {\r\n    case 1:\r\n      // Layer 3\r\n      return 34\r\n    case 2:\r\n      // Layer 2\r\n      return 33\r\n    case 3:\r\n      // Layer 1\r\n      return 32\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport const enum MP3Profile {\r\n  Layer1 = 32,\r\n  Layer2 = 33,\r\n  Layer3 = 34\r\n}\r\n\r\nexport const MP3Profile2Name: Record<MP3Profile, string> = {\r\n  [MP3Profile.Layer1]: 'Layer1',\r\n  [MP3Profile.Layer2]: 'Layer2',\r\n  [MP3Profile.Layer3]: 'Layer3'\r\n}\r\n\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, buffer: Uint8ArrayInterface) {\r\n  if (buffer && buffer.length >= 4) {\r\n    const ver = (buffer[1] >>> 3) & 0x03\r\n    const layer = (buffer[1] & 0x06) >> 1\r\n    // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n    const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n    const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n    const channelCount = channelMode !== 3 ? 2 : 1\r\n    const profile = getProfileByLayer(layer)\r\n    const sampleRate = getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channelCount\r\n  }\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia vp8 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata.subarray(4))\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n","/*\r\n * libmedia vp9 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { PixelFormatDescriptorsMap } from 'avutil/pixelFormatDescriptor'\r\nimport { avQ2D } from 'avutil/util/rational'\r\nimport { AVChromaLocation, AVColorRange } from 'avutil/pixfmt'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\n\r\nexport const enum VP9Profile {\r\n  Profile0,\r\n  Profile1,\r\n  Profile2,\r\n  Profile3\r\n}\r\n\r\nexport const VP9Profile2Name: Record<VP9Profile, string> = {\r\n  [VP9Profile.Profile0]: 'Profile0',\r\n  [VP9Profile.Profile1]: 'Profile1',\r\n  [VP9Profile.Profile2]: 'Profile2',\r\n  [VP9Profile.Profile3]: 'Profile3'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 512 * 384, maxFrameRate: 30 },\r\n  { level: 11, maxResolution: 512 * 384, maxFrameRate: 60 },\r\n  { level: 20, maxResolution: 960 * 540, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 960 * 540, maxFrameRate: 60 },\r\n  { level: 30, maxResolution: 1920 * 1080, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 1920 * 1080, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2560 * 1440, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2560 * 1440, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 3840 * 2160, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 3840 * 2160, maxFrameRate: 60 },\r\n  { level: 60, maxResolution: 4096 * 2160, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 4096 * 2160, maxFrameRate: 60 },\r\n  { level: 70, maxResolution: 8192 * 4320, maxFrameRate: 30 },\r\n  { level: 71, maxResolution: 8192 * 4320, maxFrameRate: 60 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n\r\nconst enum VPX_CHROMA_SUBSAMPLING {\r\n  VPX_SUBSAMPLING_420_VERTICAL = 0,\r\n  VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA = 1,\r\n  VPX_SUBSAMPLING_422 = 2,\r\n  VPX_SUBSAMPLING_444 = 3\r\n}\r\n\r\nfunction getVpccFeature(codecpar: pointer<AVCodecParameters>) {\r\n  let profile = codecpar.profile\r\n  let level = codecpar.level\r\n  if (level === NOPTS_VALUE) {\r\n    level = getLevelByResolution(codecpar.width, codecpar.height, avQ2D(codecpar.framerate))\r\n  }\r\n  const desc = PixelFormatDescriptorsMap[codecpar.format]\r\n\r\n  let bitDepth = codecpar.bitsPerCodedSample\r\n  let chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n  if (desc) {\r\n    bitDepth = desc.comp[0].depth\r\n    if (desc.log2ChromaW === 1 && desc.log2ChromaH === 1) {\r\n      if (codecpar.chromaLocation === AVChromaLocation.AVCHROMA_LOC_LEFT) {\r\n        chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      }\r\n    }\r\n    else if (desc.log2ChromaW === 1 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_422\r\n    }\r\n    else if (desc.log2ChromaW === 0 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_444\r\n    }\r\n  }\r\n  const fullRange = codecpar.colorRange === AVColorRange.AVCOL_RANGE_JPEG ? 1 : 0\r\n\r\n  if (profile === NOPTS_VALUE && bitDepth) {\r\n    if (chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      || chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n    ) {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile0 : VP9Profile.Profile2\r\n    }\r\n    else {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile1 : VP9Profile.Profile3\r\n    }\r\n  }\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRange\r\n  }\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>) {\r\n  const ioWriter = new BufferWriter(new Uint8Array(8))\r\n  const vpcc = getVpccFeature(codecpar)\r\n  ioWriter.writeUint8(vpcc.profile)\r\n  ioWriter.writeUint8(vpcc.level)\r\n  ioWriter.writeUint8((vpcc.bitDepth << 4) | (vpcc.chromaSubsampling << 1) | vpcc.fullRange)\r\n  ioWriter.writeUint8(codecpar.colorPrimaries)\r\n  ioWriter.writeUint8(codecpar.colorTrc)\r\n  ioWriter.writeUint8(codecpar.colorSpace)\r\n  ioWriter.writeUint16(0)\r\n  return ioWriter.getWroteBuffer()\r\n}\r\n","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from '../avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public destroy(formatContext: AVIFormatContext): void {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia matroska decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport { IOError } from 'common/io/error'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat } from '../avformat'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData, addAVPacketSideData, createAVPacket } from 'avutil/util/avpacket'\r\nimport AVStream, { AVDisposition } from '../AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { EBMLId, MATROSKABlockAddIdType, MATROSKALacingMode, MATROSKATrackEncodingComp, MATROSKATrackType, MkvTag2CodecId, WebmTag2CodecId } from './matroska/matroska'\r\nimport { IOFlags } from 'common/io/flags'\r\nimport { Additions, ClusterIndex, MatroskaContext, TrackEntry } from './matroska/type'\r\nimport { EbmlSyntaxAttachments, EbmlSyntaxBlockGroup, EbmlSyntaxChapters, EbmlSyntaxCluster, EbmlSyntaxCues, EbmlSyntaxHeadSeek,\r\n  EbmlSyntaxHeader, EbmlSyntaxInfo, EbmlSyntaxTags, EbmlSyntaxTracks, parseEbmlSyntax, readEbmlId, readVInt, readVInt64,\r\n  readVSint\r\n} from './matroska/imatroska'\r\n\r\nimport * as array from 'common/util/array'\r\nimport * as h264 from '../codecs/h264'\r\nimport * as hevc from '../codecs/hevc'\r\nimport * as vvc from '../codecs/vvc'\r\nimport * as vp8 from '../codecs/vp8'\r\nimport * as vp9 from '../codecs/vp9'\r\nimport * as av1 from '../codecs/av1'\r\nimport * as mp3 from '../codecs/mp3'\r\nimport * as opus from '../codecs/opus'\r\nimport * as aac from '../codecs/aac'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport findStreamByTrackUid from './matroska/function/findStreamByTrackUid'\r\nimport findStreamByTrackNumber from './matroska/function/findStreamByTrackNumber'\r\nimport * as intwrite from 'avutil/util/intwrite'\r\nimport * as is from 'common/util/is'\r\nimport * as object from 'common/util/object'\r\nimport * as riff from './riff/riff'\r\nimport * as isomTags from './isom/tags'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as text from 'common/util/text'\r\nimport isDef from 'common/function/isDef'\r\n\r\nexport default class IMatroskaFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.MATROSKA\r\n\r\n  private context: MatroskaContext\r\n\r\n  private blockReader: BufferReader\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n    const context: MatroskaContext = {\r\n      isLive: true,\r\n      firstCluster: -1n,\r\n      segmentStart: -1n,\r\n      header: {\r\n        version: 0,\r\n        readVersion: 0,\r\n        maxIdLength: 4,\r\n        maxSizeLength: 8,\r\n        docType: '',\r\n        docTypeVersion: 0,\r\n        docTypeReadVersion: 0\r\n      },\r\n      seekHead: null,\r\n      info: null,\r\n      tracks: null,\r\n      attachments: null,\r\n      chapters: null,\r\n      cues: null,\r\n      tags: null,\r\n\r\n      currentCluster: {\r\n        timeCode: 0n,\r\n        pos: -1n,\r\n        block: {\r\n          pos: -1n,\r\n          size: -1n\r\n        },\r\n        blockGroup: {\r\n          block: null\r\n        }\r\n      },\r\n      clusterIndexes: [],\r\n      clusterIndexesPosMap: new Map()\r\n    }\r\n    formatContext.privateData = this.context = context\r\n  }\r\n\r\n  private analyzeStreams(formatContext: AVIFormatContext) {\r\n\r\n    const tag2CodecId = this.context.header.docType === 'webm' ? WebmTag2CodecId : MkvTag2CodecId\r\n\r\n    if (this.context.tracks) {\r\n      array.each(this.context.tracks.entry, (track) => {\r\n        const stream = formatContext.createStream()\r\n        stream.privData = track\r\n        stream.codecpar.codecId = tag2CodecId[track.codecId] || AVCodecID.AV_CODEC_ID_NONE\r\n        switch (track.type) {\r\n          case MATROSKATrackType.AUDIO:\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n            break\r\n          case MATROSKATrackType.VIDEO:\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_VIDEO\r\n            break\r\n          case MATROSKATrackType.SUBTITLE:\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n            break\r\n          default:\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_UNKNOWN\r\n        }\r\n\r\n        if (track.language) {\r\n          stream.metadata['language'] = track.language\r\n        }\r\n        if (track.name) {\r\n          stream.metadata['name'] = track.name\r\n        }\r\n        track.currentDts = -1n\r\n\r\n        if (track.audio) {\r\n          if (track.codecName === 'A_PCM/FLOAT/IEEE') {\r\n            if (track.audio.bitDepth === 64) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_F64LE\r\n            }\r\n            else if (track.audio.bitDepth === 32) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_F32LE\r\n            }\r\n          }\r\n          else if (track.codecName === 'A_PCM/INT/BIG') {\r\n            if (track.audio.bitDepth === 16) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S16BE\r\n            }\r\n            else if (track.audio.bitDepth === 24) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S24BE\r\n            }\r\n            else if (track.audio.bitDepth === 32) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S32BE\r\n            }\r\n          }\r\n          else if (track.codecName === 'A_PCM/INT/LIT') {\r\n            if (track.audio.bitDepth === 8) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_U8\r\n            }\r\n            else if (track.audio.bitDepth === 16) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n            }\r\n            else if (track.audio.bitDepth === 24) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S24LE\r\n            }\r\n            else if (track.audio.bitDepth === 32) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S32LE\r\n            }\r\n          }\r\n\r\n          stream.codecpar.chLayout.nbChannels = track.audio.channels\r\n          stream.codecpar.sampleRate = static_cast<int32>(track.audio.sampleRate)\r\n          stream.codecpar.bitsPerCodedSample = track.audio.bitDepth\r\n        }\r\n        else if (track.video) {\r\n          stream.codecpar.width = track.video.pixelWidth\r\n          stream.codecpar.height = track.video.pixelHeight\r\n          if (track.video.color) {\r\n            if (is.number(track.video.color.primaries)) {\r\n              stream.codecpar.colorPrimaries = track.video.color.primaries\r\n            }\r\n            if (is.number(track.video.color.transferCharacteristics)) {\r\n              stream.codecpar.colorTrc = track.video.color.transferCharacteristics\r\n            }\r\n            if (is.number(track.video.color.range)) {\r\n              stream.codecpar.colorRange = track.video.color.range\r\n            }\r\n            if (is.number(track.video.color.matrixCoefficients)) {\r\n              stream.codecpar.colorSpace = track.video.color.matrixCoefficients\r\n            }\r\n          }\r\n        }\r\n\r\n        let extradataOffset = 0\r\n\r\n        if (track.codecId === 'V_MS/VFW/FOURCC' && track.codecPrivate?.size >= 40) {\r\n          stream.codecpar.bitsPerCodedSample = (track.codecPrivate.data[15] << 8) | track.codecPrivate.data[14]\r\n          stream.codecpar.codecTag = (track.codecPrivate.data[19] << 24) |  (track.codecPrivate.data[18] << 16)\r\n            | (track.codecPrivate.data[17] << 8) | track.codecPrivate.data[16]\r\n\r\n          stream.codecpar.codecId = riff.codecBmpTags[stream.codecpar.codecTag] || AVCodecID.AV_CODEC_ID_NONE\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_NONE) {\r\n            stream.codecpar.codecId === isomTags.codecMovVideoTags[stream.codecpar.codecTag] || AVCodecID.AV_CODEC_ID_NONE\r\n          }\r\n          extradataOffset = 40\r\n        }\r\n        else if (track.codecId === 'V_QUICKTIME' && track.codecPrivate?.size >= 21) {\r\n          const tags = stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO ? isomTags.codecMovAudioTags : isomTags.codecMovVideoTags\r\n          stream.codecpar.codecTag = (track.codecPrivate.data[3] << 24) |  (track.codecPrivate.data[2] << 16)\r\n          | (track.codecPrivate.data[1] << 8) | track.codecPrivate.data[0]\r\n\r\n          const codecId = tags[stream.codecpar.codecTag]\r\n          if (codecId) {\r\n            const data = new Uint8Array(4)\r\n            const size = static_cast<int32>(track.codecPrivate.size)\r\n            data[0] = (size >>> 24) & 0xff\r\n            data[1] = (size >>> 16) & 0xff\r\n            data[2] = (size >>> 8) & 0xff\r\n            data[3] = size & 0xff\r\n            track.codecPrivate.size += 4n\r\n            track.codecPrivate.data = concatTypeArray(Uint8Array, [data, track.codecPrivate.data])\r\n          }\r\n          stream.codecpar.codecId = codecId || AVCodecID.AV_CODEC_ID_NONE\r\n        }\r\n\r\n        if (track.codecPrivate?.data && (track.codecPrivate.size - static_cast<int64>(extradataOffset)) > 0) {\r\n          let codecPrivateData = track.codecPrivate.data.subarray(extradataOffset)\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_SSA\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ASS\r\n          ) {\r\n            const header = text.decode(codecPrivateData)\r\n            let lines = header.split(/\\r?\\n/)\r\n            for (let i = 0; i < lines.length; i++) {\r\n              if (lines[i].trim() === '[Events]') {\r\n                lines = lines.slice(0, i)\r\n                break\r\n              }\r\n            }\r\n            // add the default Events Format\r\n            lines.push('[Events]')\r\n            lines.push('Format: ReadOrder, Layer, Style, Name, MarginL, MarginR, MarginV, Effect, Text')\r\n            codecPrivateData = text.encode(lines.join('\\n'))\r\n          }\r\n\r\n          stream.codecpar.extradataSize = codecPrivateData.length\r\n          stream.codecpar.extradata = avMalloc(codecPrivateData.length)\r\n          memcpyFromUint8Array(stream.codecpar.extradata, codecPrivateData.length, codecPrivateData)\r\n\r\n          if (stream.codecpar.extradata) {\r\n            switch (stream.codecpar.codecId) {\r\n              case AVCodecID.AV_CODEC_ID_H264:\r\n                h264.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_HEVC:\r\n                hevc.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_VVC:\r\n                vvc.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_AV1:\r\n                av1.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_VP8:\r\n                vp8.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_VP9:\r\n                vp9.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_AAC:\r\n                aac.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_MP3:\r\n                mp3.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_OPUS:\r\n                opus.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n            }\r\n          }\r\n          else {\r\n\r\n            let extradata: Uint8Array\r\n\r\n            switch (stream.codecpar.codecId) {\r\n              case AVCodecID.AV_CODEC_ID_AAC:\r\n                extradata = aac.avCodecParameters2Extradata(stream.codecpar)\r\n                break\r\n            }\r\n            if (extradata) {\r\n              stream.codecpar.extradataSize = extradata.length\r\n              stream.codecpar.extradata = avMalloc(stream.codecpar.extradataSize)\r\n              memcpyFromUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize, extradata)\r\n            }\r\n          }\r\n        }\r\n\r\n        if (this.context.info) {\r\n          stream.timeBase.num = 1\r\n          if (this.context.info.timestampScale) {\r\n            stream.timeBase.den = static_cast<int32>((AV_TIME_BASE * 1000) / this.context.info.timestampScale)\r\n          }\r\n          else {\r\n            stream.timeBase.den = 1000\r\n            this.context.info.timestampScale = AV_TIME_BASE\r\n          }\r\n          if (this.context.info.duration) {\r\n            stream.duration = static_cast<int64>(this.context.info.duration)\r\n          }\r\n        }\r\n\r\n        if (track.default == null || track.default) {\r\n          stream.disposition |= AVDisposition.DEFAULT\r\n        }\r\n\r\n        if (track.encodings) {\r\n          array.each(track.encodings.entry, (entry) => {\r\n            if (entry.compression && isDef(entry.compression.algo)) {\r\n              track.needDecompression = true\r\n            }\r\n            if (entry.encryption && isDef(entry.encryption.algo)) {\r\n              track.needDecryption = true\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    if (this.context.attachments) {\r\n      array.each(this.context.attachments.entry, (attachment) => {\r\n        const stream = formatContext.createStream()\r\n        stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_ATTACHMENT\r\n        stream.privData = attachment\r\n        if (attachment.data) {\r\n          stream.codecpar.extradataSize = static_cast<int32>(attachment.data.size)\r\n          stream.codecpar.extradata = avMalloc(stream.codecpar.extradataSize)\r\n          memcpyFromUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize, attachment.data.data)\r\n        }\r\n      })\r\n    }\r\n\r\n    if (this.context.tags) {\r\n      array.each(this.context.tags.entry, (tag) => {\r\n        if (tag.tag?.name === 'DURATION') {\r\n          let time = tag.tag.string.replaceAll('\\x00', '').split('.')\r\n          let f = time[0].split(':')\r\n\r\n          let duration = BigInt(+f[0]) * BigInt(1000000 * 60 * 60)\r\n            + BigInt(+f[1]) * BigInt(1000000 * 60)\r\n            + BigInt(+f[2]) * 1000000n\r\n            + (BigInt(+time[1]) / 1000n)\r\n\r\n          const stream = findStreamByTrackUid(formatContext.streams, tag.target.trackUid)\r\n\r\n          if (stream) {\r\n            stream.duration = avRescaleQ(duration, AV_TIME_BASE_Q, stream.timeBase)\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    if (this.context.chapters) {\r\n      array.each(this.context.chapters.entry, (chapter) => {\r\n        const atom = chapter.atom\r\n        if (atom) {\r\n          array.each(atom, (item) => {\r\n            formatContext.chapters.push({\r\n              id: item.uid,\r\n              start: item.start,\r\n              end: item.end,\r\n              timeBase: {\r\n                num: 1,\r\n                den: 1000000000\r\n              },\r\n              metadata: {\r\n                title: item.display?.title || '',\r\n                language: item.display?.language || ''\r\n              }\r\n            })\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    const magic = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n    if (magic !== EBMLId.HEADER) {\r\n      logger.error('not matroska format')\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    const headerSize = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n    this.context.header = object.extend(this.context.header, await parseEbmlSyntax(formatContext, headerSize, EbmlSyntaxHeader))\r\n\r\n    const segmentId = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n    if (segmentId !== EBMLId.SEGMENT) {\r\n      logger.error('not matroska format')\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    const segmentSize = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n\r\n    this.context.segmentStart = formatContext.ioReader.getPos()\r\n    const segmentEndPos = formatContext.ioReader.getPos() + segmentSize\r\n\r\n    const readTopLevelEbml: Set<EBMLId> = new Set()\r\n\r\n    let hasTracks = false\r\n    let hasCluster = false\r\n\r\n    while (formatContext.ioReader.getPos() < segmentEndPos || !hasTracks || !hasCluster) {\r\n      const currentElementPos = formatContext.ioReader.getPos()\r\n      const id = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n\r\n      if (id === errorType.DATA_INVALID) {\r\n        await this.syncTopLevelElement(formatContext, 2)\r\n        continue\r\n      }\r\n\r\n      const length = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n\r\n      if (length === static_cast<int64>(errorType.DATA_INVALID)) {\r\n        await this.syncTopLevelElement(formatContext, 2)\r\n        continue\r\n      }\r\n\r\n      if (id === EBMLId.SEEK_HEAD) {\r\n        this.context.isLive = false\r\n        this.context.seekHead = await parseEbmlSyntax(formatContext, length, EbmlSyntaxHeadSeek)\r\n      }\r\n      else if (id === EBMLId.CUES) {\r\n        this.context.isLive = false\r\n        this.context.cues = await parseEbmlSyntax(formatContext, length, EbmlSyntaxCues)\r\n      }\r\n      else if (id === EBMLId.CHAPTERS) {\r\n        this.context.isLive = false\r\n        this.context.chapters = await parseEbmlSyntax(formatContext, length, EbmlSyntaxChapters)\r\n      }\r\n      else if (id === EBMLId.INFO) {\r\n        this.context.info = await parseEbmlSyntax(formatContext, length, EbmlSyntaxInfo)\r\n      }\r\n      else if (id === EBMLId.TAGS) {\r\n        this.context.tags = await parseEbmlSyntax(formatContext, length, EbmlSyntaxTags)\r\n      }\r\n      else if (id === EBMLId.ATTACHMENTS) {\r\n        this.context.attachments = await parseEbmlSyntax(formatContext, length, EbmlSyntaxAttachments)\r\n      }\r\n      else if (id === EBMLId.TRACKS) {\r\n        hasTracks = true\r\n        this.context.tracks = await parseEbmlSyntax(formatContext, length, EbmlSyntaxTracks)\r\n      }\r\n      else if (id === EBMLId.CLUSTER) {\r\n        hasCluster = true\r\n        this.context.firstCluster = currentElementPos\r\n        if (this.context.isLive || !this.context.seekHead || !(formatContext.ioReader.flags & IOFlags.SEEKABLE)) {\r\n          break\r\n        }\r\n        const entry = this.context.seekHead.entry\r\n        let i = 0\r\n        for (; i < entry.length; i++) {\r\n          if (!readTopLevelEbml.has(entry[i].id)) {\r\n            await formatContext.ioReader.seek(entry[i].pos + this.context.segmentStart)\r\n            break\r\n          }\r\n        }\r\n        if (i === entry.length) {\r\n          break\r\n        }\r\n      }\r\n      else {\r\n        await formatContext.ioReader.skip(static_cast<int32>(length))\r\n      }\r\n      readTopLevelEbml.add(id)\r\n    }\r\n\r\n    if (this.context.firstCluster > 0) {\r\n      await formatContext.ioReader.seek(this.context.firstCluster)\r\n    }\r\n\r\n    this.analyzeStreams(formatContext)\r\n\r\n    return 0\r\n  }\r\n\r\n  private parseAdditions(avpacket: pointer<AVPacket>, additions: Additions) {\r\n    for (let i = 0; i < additions.entry.length; i++) {\r\n      const addition = additions.entry[i]\r\n      if (addition.additional?.size) {\r\n        if (addition.additionalId === MATROSKABlockAddIdType.ITU_T_T35) {\r\n          // TODO handle ITU_T_T35\r\n          logger.warn('ITU_T_T35 not support now')\r\n        }\r\n\r\n        const data = avMalloc(addition.additional.data.length + 8)\r\n        intwrite.wb64(data, static_cast<uint64>(addition.additionalId))\r\n        memcpyFromUint8Array(data + 8, addition.additional.data.length, addition.additional.data)\r\n        addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL, data, addition.additional.data.length + 8)\r\n      }\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async parseBlock(formatContext: AVIFormatContext, packet: pointer<AVPacket>) {\r\n\r\n    const buffer = this.context.currentCluster.block?.data || this.context.currentCluster.blockGroup.block.data\r\n    let basePos = this.context.currentCluster.block?.pos\r\n    if (basePos < 0) {\r\n      basePos = this.context.currentCluster.blockGroup.block.pos\r\n    }\r\n\r\n    let isKey = -1\r\n    let additions: Additions\r\n    let duration = 0n\r\n\r\n    if (this.context.currentCluster.blockGroup?.block) {\r\n      additions = this.context.currentCluster.blockGroup.additions\r\n      if (this.context.currentCluster.blockGroup.reference) {\r\n        isKey = this.context.currentCluster.blockGroup.reference.length === 0 ? 1 : 0\r\n      }\r\n      else {\r\n        isKey = 1\r\n      }\r\n      if (this.context.currentCluster.blockGroup.duration) {\r\n        duration = this.context.currentCluster.blockGroup.duration\r\n      }\r\n    }\r\n\r\n    if (!this.blockReader) {\r\n      this.blockReader = new BufferReader(buffer)\r\n    }\r\n    else {\r\n      this.blockReader.resetBuffer(buffer)\r\n    }\r\n\r\n    const now = this.blockReader.getPos()\r\n\r\n    const trackNumber = static_cast<uint32>(await readVInt64(this.blockReader, 8))\r\n\r\n    const stream = findStreamByTrackNumber(formatContext.streams, trackNumber)\r\n\r\n    if (!stream) {\r\n      logger.error(`invalid track number ${trackNumber}`)\r\n      return errorType.EAGAIN\r\n    }\r\n\r\n    const timestamp = this.blockReader.readInt16()\r\n    const flags = this.blockReader.readUint8()\r\n    if (isKey === -1) {\r\n      isKey = (flags & 0x80) ? 1 : 0\r\n    }\r\n\r\n    const lacing = (flags >>> 1) & 0x03\r\n\r\n    let frameCount = 0\r\n    let frameSize: number[] = []\r\n\r\n    switch (lacing) {\r\n      case MATROSKALacingMode.XIPH: {\r\n        frameCount = this.blockReader.readUint8() + 1\r\n        let sum = 0\r\n        for (let i = 0; i < frameCount - 1; i++) {\r\n          let size = 0\r\n          while (true) {\r\n            const next = this.blockReader.readUint8()\r\n            if (next === 0) {\r\n              break\r\n            }\r\n            if (next !== 0xff) {\r\n              size += next\r\n              break\r\n            }\r\n            size += 0xff\r\n          }\r\n          sum += size\r\n          frameSize.push(size)\r\n        }\r\n        // the last frame\r\n        frameSize.push(buffer.length - static_cast<int32>(this.blockReader.getPos() - now) - sum)\r\n        break\r\n      }\r\n      case MATROSKALacingMode.EBML: {\r\n        frameCount = this.blockReader.readUint8() + 1\r\n        frameSize.push(await readVInt(this.blockReader, 4))\r\n        let sum = frameSize[0]\r\n        for (let i = 1; i < frameCount - 1; i++) {\r\n          const next = await readVSint(this.blockReader, 4)\r\n          let size = next + frameSize[i - 1]\r\n          sum += size\r\n          frameSize.push(size)\r\n        }\r\n        // the last frame\r\n        frameSize.push(buffer.length - static_cast<int32>(this.blockReader.getPos() - now) - sum)\r\n\r\n        break\r\n      }\r\n\r\n      case MATROSKALacingMode.FIXED_SIZE:\r\n        frameCount = this.blockReader.readUint8() + 1\r\n        const size = (buffer.length - static_cast<int32>(this.blockReader.getPos() - now)) / frameCount\r\n\r\n        assert(size === (size >>> 0))\r\n\r\n        for (let i = 0; i < frameCount; i++) {\r\n          frameSize.push(size)\r\n        }\r\n        break\r\n      case MATROSKALacingMode.NO_LACING:\r\n        frameCount = 1\r\n        frameSize.push(buffer.length - static_cast<int32>(this.blockReader.getPos() - now))\r\n        break\r\n    }\r\n\r\n    const track = stream.privData as TrackEntry\r\n    const trackTimestampScale = track.timeScale || 1\r\n\r\n    if (track.needDecryption) {\r\n      throw new Error('not support encryption stream')\r\n    }\r\n\r\n    // 纳秒时间戳\r\n    let pts = (this.context.currentCluster.timeCode + static_cast<int64>((timestamp * trackTimestampScale) as float))\r\n      * static_cast<int64>(this.context.info.timestampScale)\r\n    if (track.codecDelay) {\r\n      pts -= track.codecDelay\r\n    }\r\n    // 微秒时间戳\r\n    pts /= 1000n\r\n    pts = avRescaleQ(pts, AV_TIME_BASE_Q, stream.timeBase)\r\n\r\n    duration = static_cast<int64>((static_cast<int32>(duration) * trackTimestampScale) as float) * static_cast<int64>(this.context.info.timestampScale)\r\n    duration /= 1000n\r\n    duration = avRescaleQ(duration, AV_TIME_BASE_Q, stream.timeBase)\r\n\r\n    for (let i = 0; i < frameCount; i++) {\r\n      const avpacket = i !== 0 ? createAVPacket() : packet\r\n\r\n      let size = frameSize[i]\r\n      let offset = 0\r\n      let header: Uint8Array\r\n\r\n      if (track.needDecompression) {\r\n        const compression = track.encodings.entry.find((entry) => {\r\n          return !!entry.compression\r\n        })\r\n        switch (compression.compression.algo) {\r\n          case MATROSKATrackEncodingComp.HEADER_STRIP:\r\n            header = compression.compression.settings.data\r\n            size += header.length\r\n            offset = header.length\r\n            break\r\n          default:\r\n            logger.fatal(`not support compression stream, algo: ${compression.compression.algo}`)\r\n        }\r\n\r\n      }\r\n\r\n      avpacket.pos = basePos + this.blockReader.getPos()\r\n      avpacket.streamIndex = stream.index\r\n      avpacket.timeBase = stream.timeBase\r\n      avpacket.pts = pts\r\n      avpacket.size = size\r\n      avpacket.duration = duration\r\n      const data = avMalloc(size)\r\n      if (header) {\r\n        memcpyFromUint8Array(data, offset, header)\r\n      }\r\n      memcpyFromUint8Array(data + offset, frameSize[i], this.blockReader.readBuffer(frameSize[i]))\r\n\r\n      addAVPacketData(avpacket, data, size)\r\n\r\n      if (stream.codecpar.codecType !== AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n        if (isKey) {\r\n          avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n        }\r\n        avpacket.dts = pts\r\n      }\r\n      else {\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n        ) {\r\n          avpacket.bitFormat = h264.BitFormat.AVCC\r\n        }\r\n        if (isKey) {\r\n          avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n          if (track.gopCount > 1) {\r\n            track.dtsDelta = avRescaleQ(track.maxPts - track.minPts, stream.timeBase, AV_TIME_BASE_Q) / static_cast<int64>(track.gopCount - 1)\r\n            track.firstGopGot = true\r\n          }\r\n          else if (!track.dtsDelta) {\r\n            // 以 30 帧开始\r\n            track.dtsDelta = avRescaleQ(33n, AV_MILLI_TIME_BASE_Q, AV_TIME_BASE_Q)\r\n          }\r\n          track.gopCount = 1\r\n          track.minPts = pts\r\n          track.maxPts = pts\r\n        }\r\n        else {\r\n          if (!track.firstGopGot && track.gopCount > 2 && pts > track.maxPts) {\r\n            track.dtsDelta = avRescaleQ(track.maxPts - track.minPts, stream.timeBase, AV_TIME_BASE_Q) / static_cast<int64>(track.gopCount - 1)\r\n          }\r\n          else if (!track.dtsDelta) {\r\n            // 以 30 帧开始\r\n            track.dtsDelta = avRescaleQ(33n, AV_MILLI_TIME_BASE_Q, AV_TIME_BASE_Q)\r\n          }\r\n          track.gopCount++\r\n        }\r\n        if (pts > track.maxPts) {\r\n          track.maxPts = pts\r\n        }\r\n        if (track.currentDts >= 0n) {\r\n          if (duration) {\r\n            track.currentDts = track.currentDts + avRescaleQ(duration, stream.timeBase, AV_TIME_BASE_Q)\r\n            avpacket.dts = avRescaleQ(track.currentDts, AV_TIME_BASE_Q, stream.timeBase)\r\n          }\r\n          else {\r\n            track.currentDts = track.currentDts + track.dtsDelta\r\n            avpacket.dts = avRescaleQ(track.currentDts, AV_TIME_BASE_Q, stream.timeBase)\r\n          }\r\n        }\r\n        else {\r\n          track.currentDts = avRescaleQ(avpacket.pts, stream.timeBase, AV_TIME_BASE_Q)\r\n          avpacket.dts = avpacket.pts\r\n          // 第一个包从 0 开始\r\n          if (track.currentDts < 100000n) {\r\n            track.currentDts = 0n\r\n            avpacket.dts = 0n\r\n          }\r\n        }\r\n      }\r\n\r\n      if (additions) {\r\n        this.parseAdditions(avpacket, additions)\r\n      }\r\n\r\n      if (i !== 0) {\r\n        formatContext.interval.packetBuffer.push(avpacket)\r\n      }\r\n    }\r\n\r\n    this.context.currentCluster.block = {\r\n      pos: -1n,\r\n      size: -1n\r\n    }\r\n    this.context.currentCluster.blockGroup = {\r\n      block: null\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private addClusterIndex(clusterIndex: ClusterIndex) {\r\n\r\n    if (this.context.clusterIndexesPosMap.has(clusterIndex.pos)) {\r\n      return\r\n    }\r\n\r\n    const index = array.binarySearch(this.context.clusterIndexes, (sample) => {\r\n      if (sample.time < clusterIndex.time) {\r\n        return 1\r\n      }\r\n      else {\r\n        return -1\r\n      }\r\n    })\r\n    if (index > -1) {\r\n      this.context.clusterIndexesPosMap.set(clusterIndex.pos, index)\r\n      this.context.clusterIndexes.splice(index, 0, clusterIndex)\r\n    }\r\n    else {\r\n      this.context.clusterIndexesPosMap.set(clusterIndex.pos, this.context.clusterIndexes.length)\r\n      this.context.clusterIndexes.push(clusterIndex)\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const now = formatContext.ioReader.getPos()\r\n    const id = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n\r\n    if (id === errorType.DATA_INVALID) {\r\n      await this.syncTopLevelElement(formatContext)\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n\r\n    const length = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n\r\n    if (length === static_cast<int64>(errorType.DATA_INVALID)) {\r\n      await this.syncTopLevelElement(formatContext)\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n\r\n    if (id === EBMLId.CLUSTER) {\r\n      this.context.currentCluster.pos = now\r\n      this.context.currentCluster.timeCode = 0n\r\n      await parseEbmlSyntax(\r\n        formatContext,\r\n        length,\r\n        EbmlSyntaxCluster,\r\n        this.context.currentCluster,\r\n        [EBMLId.SIMPLE_BLOCK, EBMLId.BLOCK_GROUP]\r\n      )\r\n      this.addClusterIndex({\r\n        time: this.context.currentCluster.timeCode,\r\n        pos: now\r\n      })\r\n      let ret = await this.parseBlock(formatContext, avpacket)\r\n      if (ret === errorType.EAGAIN) {\r\n        return this.readAVPacket_(formatContext, avpacket)\r\n      }\r\n      else if (ret < 0) {\r\n        return ret\r\n      }\r\n    }\r\n    else if (id === EBMLId.SIMPLE_BLOCK) {\r\n      this.context.currentCluster.block = {\r\n        pos: formatContext.ioReader.getPos(),\r\n        size: length,\r\n        data: await formatContext.ioReader.readBuffer(static_cast<int32>(length))\r\n      }\r\n      let ret = await this.parseBlock(formatContext, avpacket)\r\n      if (ret === errorType.EAGAIN) {\r\n        return this.readAVPacket_(formatContext, avpacket)\r\n      }\r\n      else if (ret < 0) {\r\n        return ret\r\n      }\r\n    }\r\n    else if (id === EBMLId.BLOCK_GROUP) {\r\n      await parseEbmlSyntax(\r\n        formatContext,\r\n        length,\r\n        EbmlSyntaxBlockGroup,\r\n        this.context.currentCluster.blockGroup\r\n      )\r\n      let ret = await this.parseBlock(formatContext, avpacket)\r\n      if (ret === errorType.EAGAIN) {\r\n        return this.readAVPacket_(formatContext, avpacket)\r\n      }\r\n      else if (ret < 0) {\r\n        return ret\r\n      }\r\n    }\r\n    else if (id === EBMLId.CUES\r\n      || id === EBMLId.TAGS\r\n      || id === EBMLId.ATTACHMENTS\r\n      || id === EBMLId.CHAPTERS\r\n      || id === EBMLId.INFO\r\n      || id === EBMLId.TRACKS\r\n      || id === EBMLId.SEEK_HEAD\r\n    ) {\r\n      await formatContext.ioReader.skip(static_cast<int32>(length))\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    else {\r\n      await this.syncTopLevelElement(formatContext)\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      return await this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END) {\r\n        logger.error(`read packet error, ${error}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async syncTopLevelElement(formatContext: AVIFormatContext, analyzeCount: int32 = 3) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    while (true) {\r\n      try {\r\n        const now = formatContext.ioReader.getPos()\r\n\r\n        const id = await formatContext.ioReader.peekUint32()\r\n\r\n        if (id === EBMLId.CLUSTER\r\n          || id === EBMLId.CUES\r\n          || id === EBMLId.TAGS\r\n          || id === EBMLId.ATTACHMENTS\r\n          || id === EBMLId.CHAPTERS\r\n          || id === EBMLId.INFO\r\n          || id === EBMLId.TRACKS\r\n          || id === EBMLId.SEEK_HEAD\r\n        ) {\r\n          pos = now\r\n          let count = 0\r\n\r\n          await formatContext.ioReader.skip(4)\r\n\r\n          const length = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n\r\n          if (length === static_cast<int64>(errorType.DATA_INVALID)) {\r\n            await formatContext.ioReader.seek(now + 1n)\r\n            continue\r\n          }\r\n\r\n          await formatContext.ioReader.skip(static_cast<int32>(length))\r\n          while (count <= analyzeCount) {\r\n            const id = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n            const length = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n            if (id === EBMLId.CLUSTER\r\n              || id === EBMLId.CUES\r\n              || id === EBMLId.TAGS\r\n              || id === EBMLId.ATTACHMENTS\r\n              || id === EBMLId.CHAPTERS\r\n              || id === EBMLId.INFO\r\n              || id === EBMLId.TRACKS\r\n              || id === EBMLId.SEEK_HEAD\r\n            ) {\r\n              count++\r\n              await formatContext.ioReader.skip(static_cast<int32>(length))\r\n            }\r\n            else {\r\n              break\r\n            }\r\n          }\r\n          if (count < analyzeCount) {\r\n            await formatContext.ioReader.seek(pos + 1n)\r\n            pos = NOPTS_VALUE_BIGINT\r\n          }\r\n          else {\r\n            break\r\n          }\r\n        }\r\n        else {\r\n          await formatContext.ioReader.skip(1)\r\n          pos = NOPTS_VALUE_BIGINT\r\n        }\r\n      }\r\n      catch (error) {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n    }\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n\r\n    const now = formatContext.ioReader.getPos()\r\n    const pts = avRescaleQ(timestamp, stream.timeBase, AV_TIME_BASE_Q)\r\n\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    if (this.context.cues?.entry.length) {\r\n      const track = stream.privData as TrackEntry\r\n      for (let i = 0; i < this.context.cues.entry.length; i++) {\r\n        const cue =  this.context.cues.entry[i]\r\n        const time = (cue.time || 0n) * static_cast<int64>(this.context.info.timestampScale) / 1000n\r\n        if (time > pts) {\r\n          const poses = this.context.cues.entry[Math.max(i - 1, 0)].pos\r\n          if (poses.length) {\r\n            const matchPos = poses.find((p) => p.track === track.number)\r\n            if (matchPos) {\r\n              pos = matchPos.pos + this.context.segmentStart\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pos === NOPTS_VALUE_BIGINT && this.context.clusterIndexes.length) {\r\n      for (let i = 0; i < this.context.clusterIndexes.length; i++) {\r\n        const time = this.context.clusterIndexes[i].time * static_cast<int64>(this.context.info.timestampScale) / 1000n\r\n        if (time > pts) {\r\n          pos = this.context.clusterIndexes[Math.max(i - 1, 0)].pos\r\n          break\r\n        }\r\n      }\r\n      if (pos === NOPTS_VALUE_BIGINT) {\r\n        pos = this.context.clusterIndexes[this.context.clusterIndexes.length - 1].pos\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n      array.each(this.context.tracks.entry, (track) => {\r\n        track.currentDts = -1n\r\n      })\r\n      return now\r\n    }\r\n\r\n    return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return this.context.tracks?.entry.length ?? 2\r\n  }\r\n}\r\n","/*\r\n * libmedia isom tag defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport mktagle from '../../function/mktagle'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const codecMovVideoTags: Record<int32, AVCodecID> = {\r\n  [mktagle('mp4v')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVID')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('3IV2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('vvc1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktagle('vvi1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktagle('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('hvc1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('dvhe')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n\r\n  [mktagle('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc2')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc3')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc4')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai5p')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai5q')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai52')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai53')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai55')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai56')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai1p')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai1q')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai12')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai13')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai15')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai16')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('AVin')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('aivx')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('rv64')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('xalg')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avlg')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('dva1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('dvav')]: AVCodecID.AV_CODEC_ID_H264,\r\n\r\n  [mktagle('vp08')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktagle('vp09')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktagle('av01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n}\r\n\r\nexport const codecMovAudioTags: Record<int32, AVCodecID> = {\r\n  [mktagle('mp4a')]: AVCodecID.AV_CODEC_ID_AAC,\r\n  [mktagle('ac-3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktagle('sac3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktagle('ac-4')]: AVCodecID.AV_CODEC_ID_AC4,\r\n\r\n  [mktagle('dtsc')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtsh')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtsl')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtse')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('DTS ')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('ec-3')]: AVCodecID.AV_CODEC_ID_EAC3,\r\n\r\n  [mktagle('.mp3')]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [mktagle('mp3 ')]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [0x6D730055 as int32]: AVCodecID.AV_CODEC_ID_MP3,\r\n\r\n  [mktagle('spex')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktagle('SPXN')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktagle('fLaC')]: AVCodecID.AV_CODEC_ID_FLAC,\r\n  [mktagle('Opus')]: AVCodecID.AV_CODEC_ID_OPUS,\r\n\r\n  [mktagle('alaw')]: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  [mktagle('ulaw')]: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  [mktagle('fl32')]: AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  [mktagle('fl64')]: AVCodecID.AV_CODEC_ID_PCM_F64LE,\r\n  [mktagle('twos')]: AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n  [mktagle('lpcm')]: AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  [mktagle('sowt')]: AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  [mktagle('in24')]: AVCodecID.AV_CODEC_ID_PCM_S24LE,\r\n  [mktagle('in32')]: AVCodecID.AV_CODEC_ID_PCM_S32LE,\r\n  [mktagle('sowt')]: AVCodecID.AV_CODEC_ID_PCM_S8,\r\n  [mktagle('raw ')]: AVCodecID.AV_CODEC_ID_PCM_U8,\r\n  [mktagle('NONE')]: AVCodecID.AV_CODEC_ID_PCM_U8\r\n}\r\n","/*\r\n * libmedia\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../../../AVStream'\r\nimport { TrackEntry } from '../type'\r\n\r\nexport default function findStreamByTrackNumber(streams: AVStream[], number: uint32) {\r\n  for (let i = 0; i < streams.length; i++) {\r\n    const track = streams[i].privData as TrackEntry\r\n    if (track.number === number) {\r\n      return streams[i]\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../../../AVStream'\r\nimport { TrackEntry } from '../type'\r\n\r\nexport default function findStreamByTrackUid(streams: AVStream[], uid: uint64) {\r\n  for (let i = 0; i < streams.length; i++) {\r\n    const track = streams[i].privData as TrackEntry\r\n    if (track.uid === uid) {\r\n      return streams[i]\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia matroska decoder util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../../AVFormatContext'\r\nimport { EBMLId, EbmlType } from './matroska'\r\nimport { Addition, Additions, Attachment, Attachments, AudioTrack,\r\n  BlockGroup, Chapter, ChapterAtom, ChapterDisplay, Chapters, Cluster,\r\n  CuePoint, CuePointPos, Cues, Header, Info, MasteringMeta, MatroskaContext, SeekHead, SeekHeadEntry,\r\n  SimpleTag, Tag, TagTargets, Tags, TrackCombinePlanes, TrackEncoding,\r\n  TrackEncodingCompression, TrackEncodingEncryption, TrackEncodings, TrackEntry,\r\n  TrackOperation, TrackPlane, Tracks, VideoColor, VideoProjection, VideoTrack\r\n} from './type'\r\n\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport { BytesReader, BytesReaderSync } from 'common/io/interface'\r\n\r\nconst MAX_ATTACHMENT_READ_SIZE = static_cast<int64>(20 * 1024 * 1024)\r\n\r\ninterface EbmlSyntax<T> {\r\n  type: EbmlType\r\n  isArray?: boolean\r\n  filedName: keyof T\r\n  child?: Partial<Record<EBMLId, EbmlSyntax<any>>>\r\n}\r\n\r\nexport const EbmlSyntaxHeadSeekEntry: Partial<Record<EBMLId, EbmlSyntax<SeekHeadEntry>>> = {\r\n  [EBMLId.SEEK_ID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'id'\r\n  },\r\n  [EBMLId.SEEK_POSITION]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'pos'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxHeadSeek: Partial<Record<EBMLId, EbmlSyntax<SeekHead>>> = {\r\n  [EBMLId.SEEK_ENTRY]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxHeadSeekEntry\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxInfo: Partial<Record<EBMLId, EbmlSyntax<Info>>> = {\r\n  [EBMLId.SEGMENT_UID]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'segmentUUID'\r\n  },\r\n  [EBMLId.TIME_CODE_SCALE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'timestampScale'\r\n  },\r\n  [EBMLId.DURATION]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'duration'\r\n  },\r\n  [EBMLId.TITLE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'title'\r\n  },\r\n  [EBMLId.MUXING_APP]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'muxingApp'\r\n  },\r\n  [EBMLId.WRITING_APP]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'writingApp'\r\n  },\r\n  [EBMLId.DATE_UTC]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'dateUTC'\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxTrackAudio: Partial<Record<EBMLId, EbmlSyntax<AudioTrack>>> = {\r\n  [EBMLId.AUDIO_SAMPLING_FREQ]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'sampleRate'\r\n  },\r\n  [EBMLId.AUDIO_OUT_SAMPLING_FREQ]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'outSampleRate'\r\n  },\r\n  [EBMLId.AUDIO_BITDEPTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'bitDepth'\r\n  },\r\n  [EBMLId.AUDIO_CHANNELS]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'channels'\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxMasteringMeta: Partial<Record<EBMLId, EbmlSyntax<MasteringMeta>>> = {\r\n  [EBMLId.VIDEO_COLOR_RX]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'rx'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_RY]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'ry'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_GX]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'gx'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_GY]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'gy'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_BX]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'bx'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_BY]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'by'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_WHITE_X]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'whiteX'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_WHITE_Y]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'whiteY'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_LUMINA_NCE_MIN]: {\r\n    type: EbmlType.FLOAT,\r\n    isArray: true,\r\n    filedName: 'minLuminance'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_LUMINA_NCE_MAX]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'maxLuminance'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxVideoColor: Partial<Record<EBMLId, EbmlSyntax<VideoColor>>> = {\r\n  [EBMLId.VIDEO_COLOR_MATRIX_COEFF]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'matrixCoefficients'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_BITS_PER_CHANNEL]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'bitsPerChannel'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CB_SUB_HORZ]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'cbSubHorz'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CB_SUB_VERT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'cbSubVert'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CHROMA_SUB_HORZ]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chromaSubHorz'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CHROMA_SUB_VERT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chromaSubVert'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CHROMA_SITING_HORZ]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chromaSitingHorz'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CHROMA_SITING_VERT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chromaSitingVert'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_RANGE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'range'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_TRANSFER_CHARACTERISTICS]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'transferCharacteristics'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_PRIMARIES]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'primaries'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_MAX_CLL]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'maxCll'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_MAX_FALL]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'maxFall'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_MASTERING_META]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'masteringMeta',\r\n    child: EbmlSyntaxMasteringMeta\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxVideoProjection: Partial<Record<EBMLId, EbmlSyntax<VideoProjection>>> = {\r\n  [EBMLId.VIDEO_PROJECTION_TYPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION_PRIVATE]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'private'\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION_POSE_YAW]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'yaw'\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION_POSE_PITCH]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'pitch'\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION_POSE_ROLL]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'roll'\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxTrackVideo: Partial<Record<EBMLId, EbmlSyntax<VideoTrack>>> = {\r\n  [EBMLId.VIDEO_FRAMERATE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'framerate'\r\n  },\r\n  [EBMLId.VIDEO_DISPLAY_WIDTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'displayWidth'\r\n  },\r\n  [EBMLId.VIDEO_DISPLAY_HEIGHT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'displayHeight'\r\n  },\r\n  [EBMLId.VIDEO_PIXEL_WIDTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'pixelWidth'\r\n  },\r\n  [EBMLId.VIDEO_PIXEL_HEIGHT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'pixelHeight'\r\n  },\r\n  [EBMLId.VIDEO_COLORSPACE]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'colorSpace'\r\n  },\r\n  [EBMLId.VIDEO_ALPHA_MODE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'alphaMode'\r\n  },\r\n  [EBMLId.VIDEO_COLOR]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'color',\r\n    child: EbmlSyntaxVideoColor\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'projection',\r\n    child: EbmlSyntaxVideoProjection\r\n  },\r\n  [EBMLId.VIDEO_DISPLAY_UNIT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'displayUnit'\r\n  },\r\n  [EBMLId.VIDEO_FLAG_INTERLACED]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'interlaced'\r\n  },\r\n  [EBMLId.VIDEO_FIELD_ORDER]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'fieldOrder'\r\n  },\r\n  [EBMLId.VIDEO_STEREO_MODE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'stereoMode'\r\n  },\r\n  [EBMLId.VIDEO_ASPECT_RATIO]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'aspectRatio'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackPlane: Partial<Record<EBMLId, EbmlSyntax<TrackPlane>>> = {\r\n  [EBMLId.TRACK_PLANE_TYPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.TRACK_PLANE_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'uid'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackCombinePlanes: Partial<Record<EBMLId, EbmlSyntax<TrackCombinePlanes>>> = {\r\n  [EBMLId.TRACK_PLANE]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'planes',\r\n    child: EbmlSyntaxTrackPlane\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackOperation: Partial<Record<EBMLId, EbmlSyntax<TrackOperation>>> = {\r\n  [EBMLId.TRACK_COMBINE_PLANES]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxTrackCombinePlanes\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackEncodingCompression: Partial<Record<EBMLId, EbmlSyntax<TrackEncodingCompression>>> = {\r\n  [EBMLId.ENCODING_COMP_ALGO]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'algo'\r\n  },\r\n  [EBMLId.ENCODING_COMP_SETTINGS]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'settings'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackEncodingEncryption: Partial<Record<EBMLId, EbmlSyntax<TrackEncodingEncryption>>> = {\r\n  [EBMLId.ENCODING_ENC_ALGO]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'algo'\r\n  },\r\n  [EBMLId.ENCODING_ENC_KEY_ID]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'keyId'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackEncoding: Partial<Record<EBMLId, EbmlSyntax<TrackEncoding>>> = {\r\n  [EBMLId.ENCODING_SCOPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'scope'\r\n  },\r\n  [EBMLId.ENCODING_TYPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.ENCODING_COMPRESSION]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'compression',\r\n    child: EbmlSyntaxTrackEncodingCompression\r\n  },\r\n  [EBMLId.ENCODING_ENCRYPTION]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'encryption',\r\n    child: EbmlSyntaxTrackEncodingEncryption\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxTrackEncodings: Partial<Record<EBMLId, EbmlSyntax<TrackEncodings>>> = {\r\n  [EBMLId.TRACK_CONTENT_ENCODING]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxTrackEncoding\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackEntry: Partial<Record<EBMLId, EbmlSyntax<TrackEntry>>> = {\r\n  [EBMLId.TRACK_NUMBER]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'number'\r\n  },\r\n  [EBMLId.TRACK_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'uid'\r\n  },\r\n  [EBMLId.TRACK_TYPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.TRACK_NAME]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'name'\r\n  },\r\n  [EBMLId.TRACK_FLAG_DEFAULT]: {\r\n    type: EbmlType.BOOL,\r\n    filedName: 'default'\r\n  },\r\n  [EBMLId.TRACK_FLAG_ENABLED]: {\r\n    type: EbmlType.BOOL,\r\n    filedName: 'enabled'\r\n  },\r\n  [EBMLId.TRACK_LANGUAGE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'language'\r\n  },\r\n  [EBMLId.TRACK_TIME_CODE_SCALE]: {\r\n    type: EbmlType.DOUBLE,\r\n    filedName: 'timeScale'\r\n  },\r\n  [EBMLId.CODEC_ID]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'codecId'\r\n  },\r\n  [EBMLId.CODEC_NAME]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'codecName'\r\n  },\r\n  [EBMLId.CODEC_PRIVATE]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'codecPrivate'\r\n  },\r\n  [EBMLId.TRACK_AUDIO]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'audio',\r\n    child: EbmlSyntaxTrackAudio\r\n  },\r\n  [EBMLId.TRACK_VIDEO]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'video',\r\n    child: EbmlSyntaxTrackVideo\r\n  },\r\n  [EBMLId.TRACK_OPERATION]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'operations',\r\n    child: EbmlSyntaxTrackOperation\r\n  },\r\n  [EBMLId.TRACK_CONTENT_ENCODINGS]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'encodings',\r\n    child: EbmlSyntaxTrackEncodings\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTracks: Partial<Record<EBMLId, EbmlSyntax<Tracks>>> = {\r\n  [EBMLId.TRACK_ENTRY]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxTrackEntry\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxAttachment: Partial<Record<EBMLId, EbmlSyntax<Attachment>>> = {\r\n  [EBMLId.FILE_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'uid'\r\n  },\r\n  [EBMLId.FILE_NAME]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'name'\r\n  },\r\n  [EBMLId.FILE_MIMETYPE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'mime'\r\n  },\r\n  [EBMLId.FILE_DESC]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'description'\r\n  },\r\n  [EBMLId.FILE_DATA]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'data'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxAttachments: Partial<Record<EBMLId, EbmlSyntax<Attachments>>> = {\r\n  [EBMLId.ATTACHED_FILE]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxAttachment\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxChapterDisplay: Partial<Record<EBMLId, EbmlSyntax<ChapterDisplay>>> = {\r\n  [EBMLId.CHAP_STRING]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'title'\r\n  },\r\n  [EBMLId.CHAP_LANG]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'language'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxChapterAtom: Partial<Record<EBMLId, EbmlSyntax<ChapterAtom>>> = {\r\n  [EBMLId.CHAPTER_TIME_START]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'start'\r\n  },\r\n  [EBMLId.CHAPTER_TIME_END]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'end'\r\n  },\r\n  [EBMLId.CHAPTER_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'uid'\r\n  },\r\n  [EBMLId.CHAPTER_DISPLAY]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'display',\r\n    child: EbmlSyntaxChapterDisplay\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxChapter: Partial<Record<EBMLId, EbmlSyntax<Chapter>>> = {\r\n  [EBMLId.CHAPTER_ATOM]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'atom',\r\n    child: EbmlSyntaxChapterAtom\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxChapters: Partial<Record<EBMLId, EbmlSyntax<Chapters>>> = {\r\n  [EBMLId.EDITION_ENTRY]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxChapter\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxCuePointPos: Partial<Record<EBMLId, EbmlSyntax<CuePointPos>>> = {\r\n  [EBMLId.CUE_TRACK]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'track'\r\n  },\r\n  [EBMLId.CUE_CLUSTER_POSITION]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'pos'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxCuePoint: Partial<Record<EBMLId, EbmlSyntax<CuePoint>>> = {\r\n  [EBMLId.CUE_TIME]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'time'\r\n  },\r\n  [EBMLId.CUE_TRACK_POSITION]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'pos',\r\n    child: EbmlSyntaxCuePointPos\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxCues: Partial<Record<EBMLId, EbmlSyntax<Cues>>> = {\r\n  [EBMLId.POINT_ENTRY]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxCuePoint\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTagTargets: Partial<Record<EBMLId, EbmlSyntax<TagTargets>>> = {\r\n  [EBMLId.TAG_TARGETS_TYPE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.TAG_TARGETS_TYPE_VALUE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'typeValue'\r\n  },\r\n  [EBMLId.TAG_TARGETS_TRACK_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'trackUid'\r\n  },\r\n  [EBMLId.TAG_TARGETS_CHAPTER_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chapterUid'\r\n  },\r\n  [EBMLId.TAG_TARGETS_ATTACH_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'attachUid'\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxSimpleTag: Partial<Record<EBMLId, EbmlSyntax<SimpleTag>>> = {\r\n  [EBMLId.TAG_NAME]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'name'\r\n  },\r\n  [EBMLId.TAG_STRING]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'string'\r\n  },\r\n  [EBMLId.TAG_LANG]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'language'\r\n  },\r\n  [EBMLId.TAG_DEFAULT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'default'\r\n  },\r\n  [EBMLId.TAG_DEFAULT_BUG]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'default'\r\n  },\r\n  [EBMLId.TAG_SIMPLE]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'sub'\r\n  }\r\n}\r\nEbmlSyntaxSimpleTag[EBMLId.TAG_SIMPLE].child = EbmlSyntaxSimpleTag\r\n\r\nexport const EbmlSyntaxTag: Partial<Record<EBMLId, EbmlSyntax<Tag>>> = {\r\n  [EBMLId.TAG_SIMPLE]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'tag',\r\n    child: EbmlSyntaxSimpleTag\r\n  },\r\n  [EBMLId.TAG_TARGETS]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'target',\r\n    child: EbmlSyntaxTagTargets\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTags: Partial<Record<EBMLId, EbmlSyntax<Tags>>> = {\r\n  [EBMLId.TAG]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxTag\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxAddition: Partial<Record<EBMLId, EbmlSyntax<Addition>>> = {\r\n  [EBMLId.BLOCK_ADD_ID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'additionalId'\r\n  },\r\n  [EBMLId.BLOCK_ADDITIONAL]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'additional'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxAdditions: Partial<Record<EBMLId, EbmlSyntax<Additions>>> = {\r\n  [EBMLId.BLOCK_MORE]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxAddition\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxBlockGroup: Partial<Record<EBMLId, EbmlSyntax<BlockGroup>>> = {\r\n  [EBMLId.BLOCK]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'block'\r\n  },\r\n  [EBMLId.BLOCK_ADDITIONS]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'additions',\r\n    child: EbmlSyntaxAdditions\r\n  },\r\n  [EBMLId.BLOCK_DURATION]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'duration'\r\n  },\r\n  [EBMLId.DISCARD_PADDING]: {\r\n    type: EbmlType.SINT64,\r\n    filedName: 'discardPadding'\r\n  },\r\n  [EBMLId.BLOCK_REFERENCE]: {\r\n    type: EbmlType.SINT64,\r\n    isArray: true,\r\n    filedName: 'reference'\r\n  },\r\n  [EBMLId.CODEC_STATE]: {\r\n    type: EbmlType.BOOL,\r\n    filedName: 'nonSimple'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxCluster: Partial<Record<EBMLId, EbmlSyntax<Cluster>>> = {\r\n  [EBMLId.SIMPLE_BLOCK]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'block'\r\n  },\r\n  [EBMLId.BLOCK_GROUP]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'blockGroup',\r\n    child: EbmlSyntaxBlockGroup\r\n  },\r\n  [EBMLId.CLUSTER_TIME_CODE]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'timeCode'\r\n  },\r\n  [EBMLId.CLUSTER_POSITION]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'pos'\r\n  },\r\n  [EBMLId.CLUSTER_PREV_SIZE]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'prevSize'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxHeader: Partial<Record<EBMLId, EbmlSyntax<Header>>> = {\r\n  [EBMLId.EBML_VERSION]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'version'\r\n  },\r\n  [EBMLId.EBML_READ_VERSION]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'readVersion'\r\n  },\r\n  [EBMLId.EBML_MAX_ID_LENGTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'maxIdLength'\r\n  },\r\n  [EBMLId.EBML_MAX_SIZE_LENGTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'maxSizeLength'\r\n  },\r\n  [EBMLId.DOCTYPE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'docType'\r\n  },\r\n  [EBMLId.DOC_TYPE_VERSION]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'docTypeVersion'\r\n  },\r\n  [EBMLId.DOC_TYPE_READ_VERSION]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'docTypeReadVersion'\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readVInt(reader: BytesReader | BytesReaderSync, maxLen: number) {\r\n\r\n  assert(maxLen <= 4)\r\n\r\n  const pos = reader.getPos()\r\n\r\n  let mask = await reader.readUint8()\r\n\r\n  if (!mask) {\r\n    logger.error(`0x00 as pos ${pos} invalid as first byte of an EBML number`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  let len = 1\r\n\r\n  while (!(mask & 0x80)) {\r\n    len++\r\n    mask <<= 1\r\n  }\r\n  mask &= 0x7f\r\n\r\n  if (len > maxLen) {\r\n    logger.error(`Length ${len} indicated by an EBML number's first byte ${mask.toString(16)} at pos ${pos} exceeds max length ${maxLen}.`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  let value = mask >>> (len - 1)\r\n\r\n  while (--len) {\r\n    value <<= 8\r\n    const next = await reader.readUint8()\r\n    value |= next\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readVSint(reader: BytesReader | BytesReaderSync, maxLen: number) {\r\n\r\n  assert(maxLen <= 4)\r\n\r\n  const now = reader.getPos()\r\n  const value = await readVInt(reader, maxLen)\r\n\r\n  return value - ((1 << (7 * (static_cast<int32>(reader.getPos() - now)) - 1)) - 1)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readVInt64(reader: BytesReader | BytesReaderSync, maxLen: number) {\r\n\r\n  assert(maxLen <= 8)\r\n\r\n  const pos = reader.getPos()\r\n  let mask = await reader.readUint8()\r\n  let len = 1\r\n\r\n  if (!mask) {\r\n    logger.error(`0x00 as pos ${pos} invalid as first byte of an EBML number`)\r\n    return static_cast<int64>(errorType.DATA_INVALID)\r\n  }\r\n\r\n  while (!(mask & 0x80)) {\r\n    len++\r\n    mask <<= 1\r\n  }\r\n  mask &= 0x7f\r\n\r\n  if (len > maxLen) {\r\n    logger.error(`Length ${len} indicated by an EBML number's first byte ${mask.toString(16)} at pos ${pos} exceeds max length ${maxLen}.`)\r\n    return static_cast<int64>(errorType.DATA_INVALID)\r\n  }\r\n\r\n  let value = static_cast<int64>(mask >>> (len - 1))\r\n\r\n  while (--len) {\r\n    value <<= 8n\r\n    const next = await reader.readUint8()\r\n    value |= static_cast<int64>(next)\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readUint(formatContext: AVIFormatContext, len: int64) {\r\n  switch (len) {\r\n    case 0n:\r\n      return 0\r\n    case 1n:\r\n      return formatContext.ioReader.readUint8()\r\n    case 2n:\r\n      return formatContext.ioReader.readUint16()\r\n    case 3n:\r\n      return formatContext.ioReader.readUint24()\r\n    case 4n:\r\n      return formatContext.ioReader.readUint32()\r\n    case 8n:\r\n      return formatContext.ioReader.readUint64()\r\n  }\r\n\r\n  let num = 0n\r\n  let n = 0\r\n  while (n++ < len) {\r\n    const next = await formatContext.ioReader.readUint8()\r\n    num = (num << 8n) | static_cast<uint64>(next)\r\n  }\r\n  return num\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readInt(formatContext: AVIFormatContext, len: int64) {\r\n  switch (len) {\r\n    case 0n:\r\n      return 0\r\n    case 1n:\r\n      return formatContext.ioReader.readInt8()\r\n    case 2n:\r\n      return formatContext.ioReader.readInt16()\r\n    case 4n:\r\n      return formatContext.ioReader.readInt32()\r\n    case 8n:\r\n      return formatContext.ioReader.readInt64()\r\n  }\r\n\r\n  let num = 0n\r\n  let n = 0\r\n  while (n++ < len) {\r\n    const next = await formatContext.ioReader.readUint8()\r\n    num = (num << 8n) | static_cast<uint64>(next)\r\n  }\r\n\r\n  if (len === 3n) {\r\n    return static_cast<int32>(BigInt.asIntN(24, num) as int64)\r\n  }\r\n\r\n  return BigInt.asIntN(64, num)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readFloat(formatContext: AVIFormatContext, len: int64) {\r\n  if (len === 4n) {\r\n    return formatContext.ioReader.readFloat()\r\n  }\r\n  else if (len === 8n) {\r\n    return formatContext.ioReader.readDouble()\r\n  }\r\n  else {\r\n    await formatContext.ioReader.skip(static_cast<int32>(len))\r\n    return 0.0\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readEbmlId(formatContext: AVIFormatContext, maxLen: number) {\r\n  const pos = formatContext.ioReader.getPos()\r\n  let mask = await formatContext.ioReader.peekUint8()\r\n  if (!mask) {\r\n    logger.error(`0x00 as pos ${pos} invalid as first byte of an EBML number`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  let len = 1\r\n\r\n  while (!(mask & 0x80)) {\r\n    len++\r\n    mask <<= 1\r\n  }\r\n\r\n  if (len > maxLen) {\r\n    logger.error(`Length ${len} indicated by an EBML number's first byte ${mask.toString(16)} at pos ${pos} exceeds max length ${maxLen}.`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  let value = 0\r\n\r\n  while (len--) {\r\n    value <<= 8\r\n    const next = await formatContext.ioReader.readUint8()\r\n    value |= next\r\n  }\r\n  return value\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function parseEbml(formatContext: AVIFormatContext, size: int64, callback: (id: EBMLId, length: int64) => Promise<void | boolean>) {\r\n  const matroskaContext = formatContext.privateData as MatroskaContext\r\n  const now = formatContext.ioReader.getPos()\r\n  while (formatContext.ioReader.getPos() < now + size) {\r\n    const id = await readEbmlId(formatContext, matroskaContext.header.maxIdLength)\r\n    const length = await readVInt64(formatContext.ioReader, matroskaContext.header.maxSizeLength)\r\n    const currentPos = formatContext.ioReader.getPos()\r\n    if ((await callback(id, length)) === false) {\r\n      return\r\n    }\r\n    assert(formatContext.ioReader.getPos() - currentPos === length)\r\n  }\r\n  assert(formatContext.ioReader.getPos() - now === size)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function parseEbmlSyntax<T extends Record<string, any>>(\r\n  formatContext: AVIFormatContext,\r\n  size: int64,\r\n  syntax: Partial<Record<EBMLId, EbmlSyntax<T>>>,\r\n  ebml:  Partial<T> = {},\r\n  stopId: EBMLId[] = []\r\n) {\r\n  await parseEbml(formatContext, size, async (id, length) => {\r\n    if (syntax[id]) {\r\n      const item = syntax[id]\r\n      let value: any\r\n      switch (item.type) {\r\n        case EbmlType.UINT:\r\n          value = await readUint(formatContext, length)\r\n          break\r\n        case EbmlType.UINT64: {\r\n          value = await readUint(formatContext, length)\r\n          if (is.number(value)) {\r\n            value = BigInt(value)\r\n          }\r\n          break\r\n        }\r\n        case EbmlType.SINT:\r\n          value = await readInt(formatContext, length)\r\n          break\r\n        case EbmlType.SINT64: {\r\n          value = await readInt(formatContext, length)\r\n          if (is.number(value)) {\r\n            value = BigInt(value)\r\n          }\r\n          break\r\n        }\r\n        case EbmlType.DOUBLE:\r\n        case EbmlType.FLOAT:\r\n          value = await readFloat(formatContext, length)\r\n          break\r\n        case EbmlType.STRING:\r\n          value = await formatContext.ioReader.readString(static_cast<int32>(length))\r\n          break\r\n        case EbmlType.BOOL:\r\n          value = !!(await readUint(formatContext, length))\r\n          break\r\n        case EbmlType.BUFFER:\r\n          value = {\r\n            pos: formatContext.ioReader.getPos(),\r\n            size: length,\r\n            data: (length < MAX_ATTACHMENT_READ_SIZE) ? await formatContext.ioReader.readBuffer(static_cast<int32>(length)) : null\r\n          }\r\n          break\r\n        case EbmlType.OBJECT: {\r\n          if (item.child) {\r\n            value = await parseEbmlSyntax(formatContext, length, item.child) as any\r\n          }\r\n          else {\r\n            value = {}\r\n          }\r\n          break\r\n        }\r\n        default:\r\n          await formatContext.ioReader.skip(static_cast<int32>(length))\r\n          break\r\n      }\r\n      if (value != null) {\r\n        if (item.isArray) {\r\n          const list: any[] = ebml[item.filedName] || []\r\n          list.push(value)\r\n          ebml[item.filedName] = list as any\r\n        }\r\n        else {\r\n          ebml[item.filedName] = value\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      await formatContext.ioReader.skip(static_cast<int32>(length))\r\n    }\r\n    if (stopId.length && array.has(stopId, id)) {\r\n      return false\r\n    }\r\n  })\r\n  return ebml as T\r\n}\r\n","/*\r\n * libmedia matroska defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum EbmlType {\r\n  NONE,\r\n  UINT,\r\n  UINT64,\r\n  SINT,\r\n  SINT64,\r\n  FLOAT,\r\n  DOUBLE,\r\n  STRING,\r\n  BUFFER,\r\n  OBJECT,\r\n  BOOL\r\n}\r\n\r\nexport const enum EBMLId {\r\n  HEADER = 0x1A45DFA3,\r\n  SEGMENT = 0x18538067,\r\n\r\n  EBML_VERSION = 0x4286,\r\n  EBML_READ_VERSION = 0x42F7,\r\n  EBML_MAX_ID_LENGTH = 0x42F2,\r\n  EBML_MAX_SIZE_LENGTH = 0x42F3,\r\n  DOCTYPE = 0x4282,\r\n  DOC_TYPE_VERSION = 0x4287,\r\n  DOC_TYPE_READ_VERSION = 0x4285,\r\n  VOID = 0xEC,\r\n  CRC32 = 0xBF,\r\n\r\n  // Matroska top-level master ID\r\n  INFO = 0x1549A966,\r\n  TRACKS = 0x1654AE6B,\r\n  CUES = 0x1C53BB6B,\r\n  TAGS = 0x1254C367,\r\n  SEEK_HEAD = 0x114D9B74,\r\n  ATTACHMENTS = 0x1941A469,\r\n  CLUSTER = 0x1F43B675,\r\n  CHAPTERS = 0x1043A770,\r\n\r\n  /* IDs in the info master */\r\n  TIME_CODE_SCALE = 0x2AD7B1,\r\n  DURATION = 0x4489,\r\n  TITLE = 0x7BA9,\r\n  WRITING_APP = 0x5741,\r\n  MUXING_APP = 0x4D80,\r\n  DATE_UTC = 0x4461,\r\n  SEGMENT_UID = 0x73A4,\r\n\r\n  /* ID in the tracks master */\r\n  TRACK_ENTRY = 0xAE,\r\n\r\n  /* IDs in the track entry master */\r\n  TRACK_NUMBER = 0xD7,\r\n  TRACK_UID = 0x73C5,\r\n  TRACK_TYPE = 0x83,\r\n  TRACK_VIDEO = 0xE0,\r\n  TRACK_AUDIO = 0xE1,\r\n  TRACK_OPERATION = 0xE2,\r\n  TRACK_COMBINE_PLANES = 0xE3,\r\n  TRACK_PLANE = 0xE4,\r\n  TRACK_PLANE_UID = 0xE5,\r\n  TRACK_PLANE_TYPE = 0xE6,\r\n  CODEC_ID = 0x86,\r\n  CODEC_PRIVATE = 0x63A2,\r\n  CODEC_NAME = 0x258688,\r\n  CODEC_INFO_URL = 0x3B4040,\r\n  CODEC_DOWN_LOAD_URL = 0x26B240,\r\n  CODEC_DECODE_ALL = 0xAA,\r\n  CODEC_DELAY = 0x56AA,\r\n  SEEK_PREROLL = 0x56BB,\r\n  TRACK_NAME = 0x536E,\r\n  TRACK_LANGUAGE = 0x22B59C,\r\n  TRACK_FLAG_ENABLED = 0xB9,\r\n  TRACK_FLAG_DEFAULT = 0x88,\r\n  TRACK_FLAG_FORCED = 0x55AA,\r\n  TRACK_FLAG_LACING = 0x9C,\r\n  TRACK_MIN_CACHE = 0x6DE7,\r\n  TRACK_MAX_CACHE = 0x6DF8,\r\n  TRACK_DEFAULT_DURATION = 0x23E383,\r\n  TRACK_CONTENT_ENCODINGS = 0x6D80,\r\n  TRACK_CONTENT_ENCODING = 0x6240,\r\n  TRACK_TIME_CODE_SCALE = 0x23314F,\r\n  TRACK_MAX_BLK_ADD_ID = 0x55EE,\r\n\r\n  /* IDs in the track video master */\r\n  VIDEO_FRAMERATE = 0x2383E3,\r\n  VIDEO_DISPLAY_WIDTH = 0x54B0,\r\n  VIDEO_DISPLAY_HEIGHT = 0x54BA,\r\n  VIDEO_PIXEL_WIDTH = 0xB0,\r\n  VIDEO_PIXEL_HEIGHT = 0xBA,\r\n  VIDEO_PIXEL_CROP_B = 0x54AA,\r\n  VIDEO_PIXEL_CROP_T = 0x54BB,\r\n  VIDEO_PIXEL_CROP_L = 0x54CC,\r\n  VIDEO_PIXEL_CROP_R = 0x54DD,\r\n  VIDEO_DISPLAY_UNIT = 0x54B2,\r\n  VIDEO_FLAG_INTERLACED = 0x9A,\r\n  VIDEO_FIELD_ORDER = 0x9D,\r\n  VIDEO_STEREO_MODE = 0x53B8,\r\n  VIDEO_ALPHA_MODE = 0x53C0,\r\n  VIDEO_ASPECT_RATIO = 0x54B3,\r\n  VIDEO_COLORSPACE = 0x2EB524,\r\n  VIDEO_COLOR = 0x55B0,\r\n\r\n  VIDEO_COLOR_MATRIX_COEFF = 0x55B1,\r\n  VIDEO_COLOR_BITS_PER_CHANNEL = 0x55B2,\r\n  VIDEO_COLOR_CHROMA_SUB_HORZ = 0x55B3,\r\n  VIDEO_COLOR_CHROMA_SUB_VERT = 0x55B4,\r\n  VIDEO_COLOR_CB_SUB_HORZ = 0x55B5,\r\n  VIDEO_COLOR_CB_SUB_VERT = 0x55B6,\r\n  VIDEO_COLOR_CHROMA_SITING_HORZ = 0x55B7,\r\n  VIDEO_COLOR_CHROMA_SITING_VERT = 0x55B8,\r\n  VIDEO_COLOR_RANGE = 0x55B9,\r\n  VIDEO_COLOR_TRANSFER_CHARACTERISTICS = 0x55BA,\r\n\r\n  VIDEO_COLOR_PRIMARIES = 0x55BB,\r\n  VIDEO_COLOR_MAX_CLL = 0x55BC,\r\n  VIDEO_COLOR_MAX_FALL = 0x55BD,\r\n\r\n  VIDEO_COLOR_MASTERING_META = 0x55D0,\r\n  VIDEO_COLOR_RX = 0x55D1,\r\n  VIDEO_COLOR_RY = 0x55D2,\r\n  VIDEO_COLOR_GX = 0x55D3,\r\n  VIDEO_COLOR_GY = 0x55D4,\r\n  VIDEO_COLOR_BX = 0x55D5,\r\n  VIDEO_COLOR_BY = 0x55D6,\r\n  VIDEO_COLOR_WHITE_X = 0x55D7,\r\n  VIDEO_COLOR_WHITE_Y = 0x55D8,\r\n  VIDEO_COLOR_LUMINA_NCE_MAX = 0x55D9,\r\n  VIDEO_COLOR_LUMINA_NCE_MIN = 0x55DA,\r\n\r\n  VIDEO_PROJECTION = 0x7670,\r\n  VIDEO_PROJECTION_TYPE = 0x7671,\r\n  VIDEO_PROJECTION_PRIVATE = 0x7672,\r\n  VIDEO_PROJECTION_POSE_YAW = 0x7673,\r\n  VIDEO_PROJECTION_POSE_PITCH = 0x7674,\r\n  VIDEO_PROJECTION_POSE_ROLL = 0x7675,\r\n\r\n  /* IDs in the track audio master */\r\n  AUDIO_SAMPLING_FREQ = 0xB5,\r\n  AUDIO_OUT_SAMPLING_FREQ = 0x78B5,\r\n\r\n  AUDIO_BITDEPTH = 0x6264,\r\n  AUDIO_CHANNELS = 0x9F,\r\n\r\n  /* IDs in the content encoding master */\r\n  ENCODING_ORDER = 0x5031,\r\n  ENCODING_SCOPE = 0x5032,\r\n  ENCODING_TYPE = 0x5033,\r\n  ENCODING_COMPRESSION = 0x5034,\r\n  ENCODING_COMP_ALGO = 0x4254,\r\n  ENCODING_COMP_SETTINGS = 0x4255,\r\n\r\n  ENCODING_ENCRYPTION = 0x5035,\r\n  ENCODING_ENC_AES_SETTINGS = 0x47E7,\r\n  ENCODING_ENC_ALGO = 0x47E1,\r\n  ENCODING_ENC_KEY_ID = 0x47E2,\r\n  ENCODING_SIG_ALGO = 0x47E5,\r\n  ENCODING_SIG_HASH_ALGO = 0x47E6,\r\n  ENCODING_SIG_KEY_ID = 0x47E4,\r\n  ENCODING_SIG_NATURE = 0x47E3,\r\n\r\n  /* ID in the cues master */\r\n  POINT_ENTRY = 0xBB,\r\n\r\n  /* IDs in the point entry master */\r\n  CUE_TIME = 0xB3,\r\n  CUE_TRACK_POSITION = 0xB7,\r\n\r\n  /* IDs in the cue track position master */\r\n  CUE_TRACK = 0xF7,\r\n  CUE_CLUSTER_POSITION = 0xF1,\r\n  CUE_RELATIVE_POSITION = 0xF0,\r\n  CUE_DURATION = 0xB2,\r\n  CUE_BLOCKNUMBER = 0x5378,\r\n\r\n  /* IDs in the tags master */\r\n  TAG = 0x7373,\r\n  TAG_SIMPLE = 0x67C8,\r\n  TAG_NAME = 0x45A3,\r\n  TAG_STRING = 0x4487,\r\n  TAG_LANG = 0x447A,\r\n  TAG_DEFAULT = 0x4484,\r\n  TAG_DEFAULT_BUG = 0x44B4,\r\n  TAG_TARGETS = 0x63C0,\r\n  TAG_TARGETS_TYPE = 0x63CA,\r\n  TAG_TARGETS_TYPE_VALUE = 0x68CA,\r\n  TAG_TARGETS_TRACK_UID = 0x63C5,\r\n  TAG_TARGETS_CHAPTER_UID = 0x63C4,\r\n  TAG_TARGETS_ATTACH_UID = 0x63C6,\r\n\r\n  /* IDs in the seek head master */\r\n  SEEK_ENTRY = 0x4DBB,\r\n\r\n  /* IDs in the seek point master */\r\n  SEEK_ID = 0x53AB,\r\n  SEEK_POSITION = 0x53AC,\r\n\r\n  /* IDs in the cluster master */\r\n  CLUSTER_TIME_CODE = 0xE7,\r\n  CLUSTER_POSITION = 0xA7,\r\n  CLUSTER_PREV_SIZE = 0xAB,\r\n  BLOCK_GROUP = 0xA0,\r\n  BLOCK_ADDITIONS = 0x75A1,\r\n  BLOCK_MORE = 0xA6,\r\n  BLOCK_ADD_ID = 0xEE,\r\n  BLOCK_ADDITIONAL = 0xA5,\r\n  SIMPLE_BLOCK = 0xA3,\r\n\r\n  /* IDs in the block group master */\r\n  BLOCK = 0xA1,\r\n  BLOCK_DURATION = 0x9B,\r\n  BLOCK_REFERENCE = 0xFB,\r\n  CODEC_STATE = 0xA4,\r\n  DISCARD_PADDING = 0x75A2,\r\n\r\n  /* IDs in the attachments master */\r\n  ATTACHED_FILE = 0x61A7,\r\n  FILE_DESC = 0x467E,\r\n  FILE_NAME = 0x466E,\r\n  FILE_MIMETYPE = 0x4660,\r\n  FILE_DATA = 0x465C,\r\n  FILE_UID = 0x46AE,\r\n\r\n  /* IDs in the chapters master */\r\n  EDITION_ENTRY = 0x45B9,\r\n  CHAPTER_ATOM = 0xB6,\r\n  CHAPTER_TIME_START = 0x91,\r\n  CHAPTER_TIME_END = 0x92,\r\n  CHAPTER_DISPLAY = 0x80,\r\n  CHAP_STRING = 0x85,\r\n  CHAP_LANG = 0x437C,\r\n  CHAP_COUNTRY = 0x437E,\r\n  EDITION_UID = 0x45BC,\r\n  EDITION_FLAG_HIDDEN = 0x45BD,\r\n  EDITION_FLAG_DEFAULT = 0x45DB,\r\n  EDITION_FLAG_ORDERED = 0x45DD,\r\n  CHAPTER_UID = 0x73C4,\r\n  CHAPTER_FLAG_HIDDEN = 0x98,\r\n  CHAPTER_FLAG_ENABLED = 0x4598,\r\n  CHAPTER_PHYS_EQUIV = 0x63C3\r\n}\r\n\r\nexport const enum MATROSKATrackType {\r\n  NONE = 0x0,\r\n  VIDEO = 0x1,\r\n  AUDIO = 0x2,\r\n  COMPLEX = 0x3,\r\n  LOGO = 0x10,\r\n  SUBTITLE = 0x11,\r\n  BUTTONS = 0x12,\r\n  CONTROL = 0x20,\r\n  METADATA = 0x21,\r\n}\r\n\r\nexport const enum MATROSKATrackEncodingComp {\r\n  Z_LIB = 0,\r\n  BZ_LIB = 1,\r\n  LZO = 2,\r\n  HEADER_STRIP = 3\r\n}\r\n\r\nexport const enum MATROSKAVideoInterlaceFlag {\r\n  UNDETERMINED = 0,\r\n  INTERLACED = 1,\r\n  PROGRESSIVE = 2\r\n}\r\n\r\nexport const enum MATROSKAVideoFieldOrder {\r\n  PROGRESSIVE = 0,\r\n  TT = 1,\r\n  UNDETERMINED = 2,\r\n  BB = 6,\r\n  TB = 9,\r\n  BT = 14\r\n}\r\n\r\nexport const enum MATROSKAVideoStereoModeType {\r\n  MONO = 0,\r\n  LEFT_RIGHT = 1,\r\n  BOTTOM_TOP = 2,\r\n  TOP_BOTTOM = 3,\r\n  CHECKERBOARD_RL = 4,\r\n  CHECKERBOARD_LR = 5,\r\n  ROW_INTERLEAVED_RL = 6,\r\n  ROW_INTERLEAVED_LR = 7,\r\n  COL_INTERLEAVED_RL = 8,\r\n  COL_INTERLEAVED_LR = 9,\r\n  ANAGLYPH_CYAN_RED  = 10,\r\n  RIGHT_LEFT = 11,\r\n  ANAGLYPH_GREEN_MAG = 12,\r\n  BOTH_EYES_BLOCK_LR = 13,\r\n  BOTH_EYES_BLOCK_RL = 14,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAVideoDisplayUint {\r\n  PIXELS = 0,\r\n  CENTIMETERS = 1,\r\n  INCHES = 2,\r\n  DAR = 3,\r\n  UNKNOWN = 4\r\n}\r\n\r\nexport const enum MATROSKAColourChromaSitingHorz {\r\n  UNDETERMINED = 0,\r\n  LEFT = 1,\r\n  HALF = 2,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAColourChromaSitingVert {\r\n  UNDETERMINED = 0,\r\n  TOP = 1,\r\n  HALF = 2,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAVideoProjectionType {\r\n  RECTANGULAR = 0,\r\n  EQUIRECTANGULAR = 1,\r\n  CUBE_MAP = 2,\r\n  MESH = 3\r\n}\r\n\r\nexport const enum MATROSKALacingMode {\r\n  NO_LACING = 0,\r\n  XIPH = 1,\r\n  FIXED_SIZE = 2,\r\n  EBML = 3\r\n}\r\n\r\nexport const enum MATROSKABlockAddIdType {\r\n  DEFAULT = 0,\r\n  OPAQUE = 1,\r\n  ITU_T_T35 = 4,\r\n  DVCC = 0x64766343,\r\n  DVVC = 0x64767643\r\n}\r\n\r\nexport const enum MATROSKATrackEncodingComp {\r\n  MATROSKA_TRACK_ENCODING_COMP_ZLIB        = 0,\r\n  MATROSKA_TRACK_ENCODING_COMP_BZLIB       = 1,\r\n  MATROSKA_TRACK_ENCODING_COMP_LZO         = 2,\r\n  MATROSKA_TRACK_ENCODING_COMP_HEADERSTRIP = 3\r\n}\r\n\r\nexport const MkvTag2CodecId: Record<string, AVCodecID> = {\r\n  'A_AAC': AVCodecID.AV_CODEC_ID_AAC,\r\n  'A_AC3': AVCodecID.AV_CODEC_ID_AC3,\r\n  'A_ALAC': AVCodecID.AV_CODEC_ID_ALAC,\r\n  'A_DTS': AVCodecID.AV_CODEC_ID_DTS,\r\n  'A_EAC3': AVCodecID.AV_CODEC_ID_EAC3,\r\n  'A_FLAC': AVCodecID.AV_CODEC_ID_FLAC,\r\n  'A_MLP': AVCodecID.AV_CODEC_ID_MLP,\r\n  'A_MPEG/L2': AVCodecID.AV_CODEC_ID_MP2,\r\n  'A_MPEG/L1': AVCodecID.AV_CODEC_ID_MP1,\r\n  'A_MPEG/L3': AVCodecID.AV_CODEC_ID_MP3,\r\n  'A_OPUS': AVCodecID.AV_CODEC_ID_OPUS,\r\n  'A_OPUS/EXPERIMENTAL': AVCodecID.AV_CODEC_ID_OPUS,\r\n  'A_PCM/FLOAT/IEEE': AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  'A_PCM/INT/BIG': AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n  'A_PCM/INT/LIT': AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  'A_QUICKTIME/QDMC': AVCodecID.AV_CODEC_ID_QDMC,\r\n  'A_QUICKTIME/QDM2': AVCodecID.AV_CODEC_ID_QDM2,\r\n  'A_REAL/14_4': AVCodecID.AV_CODEC_ID_RA_144,\r\n  'A_REAL/28_8': AVCodecID.AV_CODEC_ID_RA_288,\r\n  'A_REAL/ATRC': AVCodecID.AV_CODEC_ID_ATRAC3,\r\n  'A_REAL/COOK': AVCodecID.AV_CODEC_ID_COOK,\r\n  'A_REAL/SIPR': AVCodecID.AV_CODEC_ID_SIPR,\r\n  'A_TRUEHD': AVCodecID.AV_CODEC_ID_TRUEHD,\r\n  'A_TTA1': AVCodecID.AV_CODEC_ID_TTA,\r\n  'A_VORBIS': AVCodecID.AV_CODEC_ID_VORBIS,\r\n  'A_WAVPACK4': AVCodecID.AV_CODEC_ID_WAVPACK,\r\n\r\n  'D_WEBVTT/SUBTITLES': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/CAPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/DESCRIPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/METADATA': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n\r\n  'S_TEXT/UTF8': AVCodecID.AV_CODEC_ID_SUBRIP,\r\n  'S_TEXT/ASCII': AVCodecID.AV_CODEC_ID_TEXT,\r\n  'S_TEXT/ASS': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_TEXT/SSA': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_ASS': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_SSA': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_VOBSUB': AVCodecID.AV_CODEC_ID_DVD_SUBTITLE,\r\n  'S_DVBSUB': AVCodecID.AV_CODEC_ID_DVB_SUBTITLE,\r\n  'S_HDMV/PGS': AVCodecID.AV_CODEC_ID_HDMV_PGS_SUBTITLE,\r\n  'S_HDMV/TEXTST': AVCodecID.AV_CODEC_ID_HDMV_TEXT_SUBTITLE,\r\n\r\n  'V_AV1': AVCodecID.AV_CODEC_ID_AV1,\r\n  'V_DIRAC': AVCodecID.AV_CODEC_ID_DIRAC,\r\n  'V_FFV1': AVCodecID.AV_CODEC_ID_FFV1,\r\n  'V_MJPEG': AVCodecID.AV_CODEC_ID_MJPEG,\r\n  'V_MPEG1': AVCodecID.AV_CODEC_ID_MPEG1VIDEO,\r\n  'V_MPEG2': AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  'V_MPEG4/ISO/ASP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/AP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/SP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/AVC': AVCodecID.AV_CODEC_ID_H264,\r\n  'V_MPEGH/ISO/HEVC': AVCodecID.AV_CODEC_ID_HEVC,\r\n  'V_MPEGH/ISO/VVC': AVCodecID.AV_CODEC_ID_VVC,\r\n  'V_MPEG4/MS/V3': AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  'V_PRORES': AVCodecID.AV_CODEC_ID_PRORES,\r\n  'V_REAL/RV10': AVCodecID.AV_CODEC_ID_RV10,\r\n  'V_REAL/RV20': AVCodecID.AV_CODEC_ID_RV20,\r\n  'V_REAL/RV30': AVCodecID.AV_CODEC_ID_RV30,\r\n  'V_REAL/RV40': AVCodecID.AV_CODEC_ID_RV40,\r\n  'V_SNOW': AVCodecID.AV_CODEC_ID_SNOW,\r\n  'V_THEORA': AVCodecID.AV_CODEC_ID_THEORA,\r\n  'V_UNCOMPRESSED': AVCodecID.AV_CODEC_ID_RAWVIDEO,\r\n  'V_VP8': AVCodecID.AV_CODEC_ID_VP8,\r\n  'V_VP9': AVCodecID.AV_CODEC_ID_VP9\r\n}\r\n\r\nexport const WebmTag2CodecId: Record<string, AVCodecID> = {\r\n  'V_VP8': AVCodecID.AV_CODEC_ID_VP8,\r\n  'V_VP9': AVCodecID.AV_CODEC_ID_VP9,\r\n  'V_AV1': AVCodecID.AV_CODEC_ID_AV1,\r\n\r\n  'A_VORBIS': AVCodecID.AV_CODEC_ID_VORBIS,\r\n  'A_OPUS': AVCodecID.AV_CODEC_ID_OPUS,\r\n\r\n  'D_WEBVTT/SUBTITLES': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/CAPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/DESCRIPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/METADATA': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n}\r\n","import mktagle from '../../function/mktagle'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const WavTag2CodecId = {\r\n  0x0001: AVCodecID.AV_CODEC_ID_PCM_U8,\r\n  0x0002: AVCodecID.AV_CODEC_ID_ADPCM_MS,\r\n  0x0003: AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  0x0006: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  0x0007: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  0x000A: AVCodecID.AV_CODEC_ID_WMAVOICE,\r\n  0x0010: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0011: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0017: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0020: AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA,\r\n  0x0022: AVCodecID.AV_CODEC_ID_TRUESPEECH,\r\n  0x0031: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0032: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0038: AVCodecID.AV_CODEC_ID_AMR_NB,\r\n  0x0042: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0x0045: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0014: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0040: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0061: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK4,\r\n  0x0062: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK3,\r\n  0x0064: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0069: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0075: AVCodecID.AV_CODEC_ID_METASOUND,\r\n  0x0083: AVCodecID.AV_CODEC_ID_G729,\r\n  0x00ff: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x0111: AVCodecID.AV_CODEC_ID_G723_1,\r\n\r\n  // ADTS AAC\r\n  0x1600: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x1602: AVCodecID.AV_CODEC_ID_AAC_LATM,\r\n  0x2000: AVCodecID.AV_CODEC_ID_AC3\r\n}\r\n\r\nexport const codecBmpTags: Record<int32, AVCodecID> = {\r\n  [mktagle('H264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('h264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('X264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('x264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('DAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('SMV2')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('VSSH')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('Q264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('V264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('GAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('UMSV')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('tshd')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('INMC')]: AVCodecID.AV_CODEC_ID_H264,\r\n\r\n  [mktagle('FMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DX50')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVID')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MP4S')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4S2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [0x04 as int32]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ZMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('BLZ0')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('mp4v')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('UMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WV1F')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SEDG')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('RMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('3IV2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WAWV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FFDS')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FVFW')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DCOD')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MVXM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DXGM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VIDM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4T3')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('G264')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('HDX4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DMK2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DYM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIGI')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EPHV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EM4A')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4CC')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SN40')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VSPX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ULDX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SIPP')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVIX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DreX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('QMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PLV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GLV4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MNM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GTM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  [mktagle('MPG4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP42')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('DIV2')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('MP43')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('MPG3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV5')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV6')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DVX3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('AP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL1')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL0')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n\r\n  [mktagle('VP80')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktagle('VP90')]: AVCodecID.AV_CODEC_ID_VP9\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in litten end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktagle(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 3; i >= 0; i--) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia av1 syntax util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\n\r\nexport function f(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function uvlc(bitReader: BitReader) {\r\n  let leadingZeros = 0\r\n  while (true) {\r\n    let done = f(bitReader, 1)\r\n    if (done) {\r\n      break\r\n    }\r\n    leadingZeros++\r\n  }\r\n  if (leadingZeros >= 32) {\r\n    return (1 << 32) - 1\r\n  }\r\n  const value =\tf(bitReader, leadingZeros)\r\n  return value + (1 << leadingZeros) - 1\r\n}\r\n\r\nexport function le(bitReader: BitReader, n: number) {\r\n  let t = 0\r\n  for (let i = 0; i < n; i++) {\r\n    let byte = f(bitReader, 8)\r\n    t += (byte << (i * 8))\r\n  }\r\n  return t\r\n}\r\n\r\nexport function leb128(bitReader: BitReader) {\r\n  let value = 0\r\n  let Leb128Bytes = 0\r\n  for (let i = 0; i < 8; i++ ) {\r\n    let leb128Byte_ = f(bitReader, 8)\r\n    value |= ((leb128Byte_ & 0x7f) << (i * 7))\r\n    Leb128Bytes += 1\r\n    if (!(leb128Byte_ & 0x80)) {\r\n      break\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\nexport function su(bitReader: BitReader, n: number) {\r\n  let value = f(bitReader, n)\r\n  let signMask = 1 << (n - 1)\r\n  if (value & signMask) {\r\n    value = value - 2 * signMask\r\n  }\r\n  return value\r\n}\r\n\r\nexport function ns(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tf(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit =\tf(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n\r\nexport function L(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0 ; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function NS(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tL(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit = L(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n","\r\n/*\r\n * libmedia int write util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport function w8(p: pointer<void>, value: number) {\r\n  accessof(reinterpret_cast<pointer<uint8>>(p)) <- reinterpret_cast<uint8>(value & 0xff)\r\n}\r\n\r\nexport function wl16(p: pointer<void>, value: uint16) {\r\n  w8(p, value)\r\n  w8(p + 1, value >>> 8)\r\n}\r\n\r\nexport function wb16(p: pointer<void>, value: uint16) {\r\n  w8(p, value >>> 8)\r\n  w8(p + 1, value)\r\n}\r\n\r\nexport function wl24(p: pointer<void>, value: uint32) {\r\n  w8(p, value)\r\n  w8(p + 1, value >>> 8)\r\n  w8(p + 2, value >>> 16)\r\n}\r\n\r\nexport function wb24(p: pointer<void>, value: uint32) {\r\n  w8(p, value >>> 16)\r\n  w8(p + 1, value >>> 8)\r\n  w8(p + 2, value)\r\n}\r\n\r\nexport function wl32(p: pointer<void>, value: uint32) {\r\n  wl16(p, value & 0xffff)\r\n  wl16(p + 2, value >>> 16)\r\n}\r\n\r\nexport function wb32(p: pointer<void>, value: uint32) {\r\n  wb16(p, value >>> 16)\r\n  wb16(p + 2, value & 0xffff)\r\n}\r\n\r\nexport function wl64(p: pointer<void>, value: uint64) {\r\n  wl32(p, static_cast<uint32>(value))\r\n  wl32(p + 4, static_cast<uint32>(value >> 32n))\r\n}\r\n\r\nexport function wb64(p: pointer<void>, value: uint64) {\r\n  wb32(p, static_cast<uint32>(value >> 32n))\r\n  wb32(p + 4, static_cast<uint32>(value))\r\n}\r\n"],"names":[],"sourceRoot":""}