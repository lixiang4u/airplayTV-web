{"version":3,"file":"src_avformat_formats_ISubRipFormat_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/ISubRipFormat.ts","webpack://AVPlayer/./src/common/util/time.ts"],"sourcesContent":["/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from '../avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public destroy(formatContext: AVIFormatContext): void {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia subrip decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags } from '../avformat'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData, addAVPacketSideData } from 'avutil/util/avpacket'\r\nimport { IOError } from 'common/io/error'\r\nimport * as array from 'common/util/array'\r\nimport * as text from 'common/util/text'\r\nimport { hhColonDDColonSSCommaMill2Int64 } from 'common/util/time'\r\n\r\n\r\nexport default class IWebVttFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.SUBRIP\r\n\r\n  private queue: {\r\n    identifier?: string\r\n    startTs: int64\r\n    endTs: int64\r\n    context: string\r\n    pos: int64\r\n  }[]\r\n  private index: int32\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    this.queue = []\r\n  }\r\n\r\n  private async readChunk(formatContext: AVIFormatContext) {\r\n    let chunk = ''\r\n    const pos = formatContext.ioReader.getPos()\r\n    while (true) {\r\n      const line = await formatContext.ioReader.readLine()\r\n      if (line === '') {\r\n        break\r\n      }\r\n      chunk += line + '\\n'\r\n    }\r\n    return { chunk: chunk.trim(), pos }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    const stream = formatContext.createStream()\r\n    stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_SUBRIP\r\n    stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n    stream.timeBase.den = 1000\r\n    stream.timeBase.num = 1\r\n\r\n    this.index = 0\r\n    let lastStartTs = 0n\r\n\r\n    try {\r\n      while (true) {\r\n        const { chunk, pos } = await this.readChunk(formatContext)\r\n\r\n        if (chunk === '') {\r\n          continue\r\n        }\r\n\r\n        const lines = chunk.split('\\n')\r\n\r\n        let identifier: string = lines.shift().trim()\r\n\r\n        let times = lines.shift().split(/--?>/)\r\n        const startTs = hhColonDDColonSSCommaMill2Int64(times[0])\r\n        const endTs = hhColonDDColonSSCommaMill2Int64(times[1])\r\n\r\n        if (endTs <= startTs) {\r\n          continue\r\n        }\r\n\r\n        const context = lines.join('\\n').trim()\r\n\r\n        if (!context) {\r\n          continue\r\n        }\r\n\r\n        stream.nbFrames++\r\n        stream.duration = endTs\r\n\r\n        const cue = {\r\n          identifier,\r\n          context,\r\n          startTs,\r\n          endTs,\r\n          pos\r\n        }\r\n\r\n        if (startTs >= lastStartTs) {\r\n          this.queue.push(cue)\r\n          lastStartTs = startTs\r\n        }\r\n        else {\r\n          array.sortInsert(\r\n            this.queue,\r\n            cue,\r\n            (a) => {\r\n              if (a.startTs < cue.startTs) {\r\n                return 1\r\n              }\r\n              else {\r\n                return -1\r\n              }\r\n            }\r\n          )\r\n        }\r\n      }\r\n    }\r\n    catch (error) {\r\n      return 0\r\n    }\r\n\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    if (!this.queue.length) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n    if (this.index >= this.queue.length) {\r\n      return IOError.END\r\n    }\r\n\r\n    const stream = formatContext.streams.find((stream) => {\r\n      return stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n    })\r\n\r\n    const cue = this.queue[this.index++]\r\n\r\n    avpacket.streamIndex = stream.index\r\n    avpacket.timeBase.den = stream.timeBase.den\r\n    avpacket.timeBase.num = stream.timeBase.num\r\n\r\n    avpacket.dts = avpacket.pts = cue.startTs\r\n    avpacket.duration = cue.endTs - cue.startTs\r\n\r\n    if (cue.identifier) {\r\n      const buffer = text.encode(cue.identifier)\r\n      const data = avMalloc(buffer.length)\r\n      memcpyFromUint8Array(data, buffer.length, buffer)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_WEBVTT_IDENTIFIER, data, buffer.length)\r\n    }\r\n    const buffer = text.encode(cue.context)\r\n    const data = avMalloc(buffer.length)\r\n    memcpyFromUint8Array(data, buffer.length, buffer)\r\n    addAVPacketData(avpacket, data, buffer.length)\r\n\r\n    return 0\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n    if (flags & AVSeekFlags.BYTE) {\r\n      return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n    }\r\n    if (timestamp <= 0n) {\r\n      this.index = 0\r\n      return 0n\r\n    }\r\n    const index = array.binarySearch(this.queue, (item) => {\r\n      if (item.startTs > timestamp) {\r\n        return -1\r\n      }\r\n      return 1\r\n    })\r\n    if (index >= 0) {\r\n      logger.debug(`seek in cues, found index: ${index}, pts: ${this.queue[index].startTs}, pos: ${this.queue[index].pos}`)\r\n      this.index = Math.max(index - 1, 0)\r\n      while (this.index > 0) {\r\n        if (this.queue[this.index - 1].startTs === this.queue[this.index].startTs\r\n          || this.queue[this.index - 1].endTs > timestamp\r\n        ) {\r\n          this.index--\r\n        }\r\n        else {\r\n          break\r\n        }\r\n      }\r\n      return 0n\r\n    }\r\n    return static_cast<int64>(errorType.DATA_INVALID)\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return 1\r\n  }\r\n}\r\n","\r\nexport function hhColonDDColonSSDotMill2Int64(time: string) {\r\n  time = time.trim()\r\n\r\n  if (!time) {\r\n    return -1n\r\n  }\r\n\r\n  let list = time.split(':')\r\n\r\n  let ts = 0n\r\n\r\n  if (list.length === 3) {\r\n    ts += BigInt(+(list.shift().trim())) * 3600000n\r\n  }\r\n  ts += BigInt(+(list.shift().trim())) * 60000n\r\n\r\n  list = list.shift().trim().split('.')\r\n  ts += BigInt(+(list.shift().trim())) * 1000n\r\n  ts += BigInt(+(list.shift().trim()))\r\n\r\n  return ts\r\n}\r\n\r\nexport function hhColonDDColonSSCommaMill2Int64(time: string) {\r\n  time = time.trim()\r\n\r\n  if (!time) {\r\n    return -1n\r\n  }\r\n\r\n  let list = time.split(':')\r\n\r\n  let ts = 0n\r\n\r\n  if (list.length === 3) {\r\n    ts += BigInt(+(list.shift().trim())) * 3600000n\r\n  }\r\n  ts += BigInt(+(list.shift().trim())) * 60000n\r\n\r\n  list = list.shift().trim().split(',')\r\n  ts += BigInt(+(list.shift().trim())) * 1000n\r\n  ts += BigInt(+(list.shift().trim()))\r\n\r\n  return ts\r\n}\r\n"],"names":[],"sourceRoot":""}