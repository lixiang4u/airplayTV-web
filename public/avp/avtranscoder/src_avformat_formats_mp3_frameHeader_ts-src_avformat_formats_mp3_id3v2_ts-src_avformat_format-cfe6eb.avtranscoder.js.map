{"version":3,"file":"src_avformat_formats_mp3_frameHeader_ts-src_avformat_formats_mp3_id3v2_ts-src_avformat_format-cfe6eb.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/formats/mp3/frameHeader.ts","webpack://AVTranscoder/./src/avformat/formats/mp3/id3v2.ts","webpack://AVTranscoder/./src/avformat/formats/mp3/mp3.ts"],"sourcesContent":["/*\r\n * libmedia mp3 FrameHeader utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mp3 from '../../codecs/mp3'\r\n\r\nexport class FrameHeader {\r\n  version: uint32\r\n  layer: uint32\r\n  protection: uint32\r\n  bitrateIndex: uint32\r\n  samplingFrequency: uint32\r\n  padding: uint32\r\n  private: uint32\r\n  mode: uint32\r\n  modeExtension: uint32\r\n  copyright: uint32\r\n  original: uint32\r\n  emphasis: uint32\r\n}\r\n\r\nexport function parse(header: FrameHeader, value: uint32) {\r\n  header.version = (value >> 19) & 3\r\n  header.layer = (value >> 17) & 3\r\n  header.protection = (value >> 16) & 1\r\n  header.bitrateIndex = (value >> 12) & 0x0f\r\n  header.samplingFrequency = (value >> 10) & 3\r\n  header.padding = (value >> 9) & 1\r\n  header.mode = (value >> 6) & 3\r\n  header.modeExtension = (value >> 4) & 3\r\n  header.copyright = (value >> 3) & 1\r\n  header.original = (value >> 2) & 1\r\n  header.emphasis = value & 3\r\n}\r\n\r\nexport function getFrameLength(header: FrameHeader, sampleRate: int32) {\r\n\r\n  let frameSize = mp3.getBitRateByVersionLayerIndex(\r\n    header.version,\r\n    header.layer,\r\n    header.bitrateIndex\r\n  )\r\n\r\n  switch (header.layer) {\r\n    case 1:\r\n    default:\r\n      // Layer 3\r\n      frameSize = ((frameSize * 144000) / (sampleRate << ((header.version === 3) ? 0 : 1))) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 2:\r\n      // Layer 2\r\n      frameSize = ((frameSize * 144000) / sampleRate) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 3:\r\n      // Layer 1\r\n      frameSize = ((frameSize * 12000) / sampleRate) >>> 0\r\n      frameSize = (frameSize + header.padding) * 4\r\n      break\r\n  }\r\n\r\n  return frameSize\r\n}\r\n","/*\r\n * libmedia mp3 id3v2 utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { ID3V2, Mp3MetaData } from './type'\r\nimport * as logger from 'common/util/logger'\r\nimport * as text from 'common/util/text'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nconst enum ID3v2Encoding {\r\n  ISO8859,\r\n  UTF16BOM,\r\n  UTF16BE,\r\n  UTF8\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nasync function getSize(ioReader: IOReader, len: number) {\r\n  let v = 0\r\n  while (len--) {\r\n    v = (v << 7) + ((await ioReader.readUint8()) & 0x7F)\r\n  }\r\n  return v\r\n}\r\n\r\nfunction putSize(ioWriter: IOWriterSync, size: number) {\r\n  ioWriter.writeUint8(size >> 21 & 0x7f)\r\n  ioWriter.writeUint8(size >> 14 & 0x7f)\r\n  ioWriter.writeUint8(size >> 7 & 0x7f)\r\n  ioWriter.writeUint8(size & 0x7f)\r\n}\r\n\r\nfunction decodeString(encoding: ID3v2Encoding, buffer: Uint8Array) {\r\n  let label: string = 'utf-8'\r\n\r\n  if (encoding === ID3v2Encoding.ISO8859) {\r\n    label = 'iso-8859-1'\r\n  }\r\n  else if (encoding === ID3v2Encoding.UTF16BOM) {\r\n    label = 'utf-16'\r\n  }\r\n  else if (encoding === ID3v2Encoding.UTF16BE) {\r\n    label = 'utf-16be'\r\n  }\r\n\r\n  const decoder = new TextDecoder(label)\r\n  return decoder.decode(buffer)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function parse(ioReader: IOReader, len: int32, id3v2: ID3V2, metadata: Mp3MetaData) {\r\n  const isV34 = id3v2.version !== 2\r\n  const tagHeaderLen = isV34 ? 10 : 6\r\n\r\n  let end = ioReader.getPos() + static_cast<int64>(len)\r\n\r\n  async function error() {\r\n    await ioReader.seek(end)\r\n  }\r\n\r\n  if (isV34 && (id3v2.flags & 0x40)) {\r\n    let extLen = await getSize(ioReader, 4)\r\n    if (id3v2.version === 4) {\r\n      // in v2.4 the length includes the length field we just read.\r\n      extLen -= 4\r\n    }\r\n    if (extLen < 0) {\r\n      logger.error('invalid extended header length')\r\n      return await error()\r\n    }\r\n    await ioReader.skip(extLen)\r\n    len -= extLen + 4\r\n    if (len < 0) {\r\n      logger.error('extended header too long')\r\n      await ioReader.seek(end)\r\n      return await error()\r\n    }\r\n  }\r\n\r\n  while (len > tagHeaderLen) {\r\n    let type: string\r\n    let size: number\r\n    if (isV34) {\r\n      type = await ioReader.readString(4)\r\n      size = await ioReader.readUint32()\r\n\r\n      if (!size) {\r\n        logger.error('invalid frame size')\r\n        break\r\n      }\r\n\r\n      // flags\r\n      await ioReader.readUint16()\r\n    }\r\n    else {\r\n      type = await ioReader.readString(3)\r\n      size = await ioReader.readUint24()\r\n    }\r\n\r\n    if (type === 'APIC') {\r\n      metadata.poster = await ioReader.readBuffer(size)\r\n    }\r\n    else if (type === 'USLT') {\r\n      const encoding = await ioReader.readUint8()\r\n      const language = await ioReader.readString(3)\r\n      const buffer = await ioReader.readBuffer(size - 4)\r\n      metadata.lyrics = `${language} ${decodeString(encoding, buffer)}`\r\n    }\r\n    else if (type === 'COMM' || type === 'COM') {\r\n      const encoding = await ioReader.readUint8()\r\n      const language = await ioReader.readString(3)\r\n      const buffer = await ioReader.readBuffer(size - 4)\r\n      metadata.comment = `${language} ${decodeString(encoding, buffer)}`\r\n    }\r\n    else {\r\n      let content: string\r\n      if (type[0] === 'T') {\r\n        const encoding = await ioReader.readUint8()\r\n        const buffer = await ioReader.readBuffer(size - 1)\r\n        content = decodeString(encoding, buffer)\r\n      }\r\n      else {\r\n        // @ts-ignore\r\n        content = await ioReader.readBuffer(size)\r\n      }\r\n\r\n      switch (type) {\r\n        case 'TIT2':\r\n        case 'TT2':\r\n          metadata.title = content\r\n          break\r\n        case 'TPE1':\r\n        case 'TP1':\r\n          metadata.artist = content\r\n          break\r\n        case 'TPE2':\r\n        case 'TP2':\r\n          metadata.albumArtist = content\r\n          break\r\n        case 'TPOS':\r\n          metadata.disc = content\r\n          break\r\n        case 'TCOP':\r\n          metadata.copyright = content\r\n          break\r\n        case 'TALB':\r\n        case 'TAL':\r\n          metadata.album = content\r\n          break\r\n        case 'TRCK':\r\n        case 'TRK':\r\n          metadata.track = content\r\n          break\r\n        case 'TYER':\r\n        case 'TDRL':\r\n        case 'TDRC':\r\n          metadata.date = content\r\n          break\r\n        case 'COMM':\r\n        case 'COM':\r\n          metadata.comment = content\r\n          break\r\n        case 'TCON':\r\n        case 'TCO':\r\n          metadata.genre = content\r\n          break\r\n        case 'TSSE':\r\n        case 'TEN':\r\n          metadata.encoder = content\r\n          break\r\n        case 'TCOM':\r\n          metadata.composer = content\r\n          break\r\n        case 'TENC':\r\n          metadata.encodedBy = content\r\n          break\r\n        case 'TLAN':\r\n          metadata.language = content\r\n          break\r\n        case 'TPE3':\r\n        case 'TP3':\r\n          metadata.performer = content\r\n          break\r\n        case 'TPUB':\r\n          metadata.publisher = content\r\n          break\r\n        case 'TCMP':\r\n        case 'TCP':\r\n          metadata.compilation = content\r\n          break\r\n        case 'TDEN':\r\n          metadata.creationTime = content\r\n          break\r\n        case 'TSOA':\r\n          metadata.albumSort = content\r\n          break\r\n        case 'TSOP':\r\n          metadata.artistSort = content\r\n          break\r\n        case 'TSOT':\r\n          metadata.titleSort = content\r\n          break\r\n        case 'TIT1':\r\n          metadata.grouping = content\r\n          break\r\n        default:\r\n          metadata[type] = content\r\n          break\r\n      }\r\n    }\r\n\r\n    len -= size + tagHeaderLen\r\n  }\r\n\r\n  // footer preset, always 10 bytes, skip over it\r\n  if (id3v2.version == 4 && id3v2.flags & 0x10) {\r\n    end += 10n\r\n  }\r\n\r\n  await ioReader.seek(end)\r\n\r\n}\r\n\r\nexport function write(ioWriter: IOWriterSync, version: number, padding: int32, metadata: Mp3MetaData) {\r\n  let now = ioWriter.getPos()\r\n  ioWriter.writeString('ID3')\r\n  ioWriter.writeUint8(version)\r\n  ioWriter.writeUint16(0)\r\n  const sizePos = ioWriter.getPos()\r\n  ioWriter.writeUint32(0)\r\n\r\n  const enc = ID3v2Encoding.UTF8\r\n\r\n  function writeText(key: string, str: string) {\r\n    const buffer = text.encode(str)\r\n\r\n    ioWriter.writeString(key)\r\n    ioWriter.writeUint32(buffer.length + 1)\r\n    // flags\r\n    ioWriter.writeUint16(0)\r\n\r\n    ioWriter.writeUint8(enc)\r\n    ioWriter.writeBuffer(buffer)\r\n  }\r\n\r\n  function writeBuffer(key: string, buffer: Uint8Array) {\r\n    ioWriter.writeString(key)\r\n    ioWriter.writeUint32(buffer.length)\r\n    // flags\r\n    ioWriter.writeUint16(0)\r\n\r\n    ioWriter.writeBuffer(buffer)\r\n  }\r\n\r\n  if (metadata.poster) {\r\n    writeBuffer('APIC', metadata.poster)\r\n  }\r\n\r\n  if (metadata.title) {\r\n    writeText('TIT2', metadata.title)\r\n  }\r\n\r\n  if (metadata.artist) {\r\n    writeText('TPE1', metadata.artist)\r\n  }\r\n\r\n  if (metadata.albumArtist) {\r\n    writeText('TPE2', metadata.albumArtist)\r\n  }\r\n\r\n  if (metadata.disc) {\r\n    writeText('TPOS', metadata.disc)\r\n  }\r\n  if (metadata.copyright) {\r\n    writeText('TCOP', metadata.copyright)\r\n  }\r\n\r\n  if (metadata.album) {\r\n    writeText('TALB', metadata.album)\r\n  }\r\n\r\n  if (metadata.track) {\r\n    writeText('TRCK', metadata.track)\r\n  }\r\n\r\n  if (metadata.date) {\r\n    writeText('TDRC', metadata.date)\r\n  }\r\n\r\n  if (metadata.comment) {\r\n    let comment = metadata.comment\r\n    if (comment[3] === ' ') {\r\n      comment = comment.slice(0, 3) + comment.slice(4)\r\n    }\r\n    writeText('COMM', comment)\r\n  }\r\n\r\n  if (metadata.lyrics) {\r\n    let lyrics = metadata.lyrics\r\n    if (lyrics[3] === ' ') {\r\n      lyrics = lyrics.slice(0, 3) + lyrics.slice(4)\r\n    }\r\n    writeText('USLT', lyrics)\r\n  }\r\n\r\n  if (metadata.genre) {\r\n    writeText('TCON', metadata.genre + '')\r\n  }\r\n\r\n  if (metadata.encoder) {\r\n    writeText('TSSE', metadata.encoder)\r\n  }\r\n\r\n  if (metadata.composer) {\r\n    writeText('TCOM', metadata.composer)\r\n  }\r\n\r\n  if (metadata.encodedBy) {\r\n    writeText('TENC', metadata.encodedBy)\r\n  }\r\n\r\n  if (metadata.language) {\r\n    writeText('TLAN', metadata.language)\r\n  }\r\n\r\n  if (metadata.performer) {\r\n    writeText('TPE3', metadata.performer)\r\n  }\r\n\r\n  if (metadata.publisher) {\r\n    writeText('TPUB', metadata.publisher)\r\n  }\r\n\r\n  if (metadata.compilation) {\r\n    writeText('TCMP', metadata.compilation)\r\n  }\r\n\r\n  if (metadata.creationTime) {\r\n    writeText('TDEN', metadata.creationTime)\r\n  }\r\n\r\n  if (metadata.albumSort) {\r\n    writeText('TSOA', metadata.albumSort)\r\n  }\r\n\r\n  if (metadata.artistSort) {\r\n    writeText('TSOP', metadata.artistSort)\r\n  }\r\n\r\n  if (metadata.titleSort) {\r\n    writeText('TSOT', metadata.titleSort)\r\n  }\r\n\r\n  if (metadata.grouping) {\r\n    writeText('TIT1', metadata.grouping)\r\n  }\r\n\r\n  if (padding < 10) {\r\n    padding = 10\r\n  }\r\n\r\n  const len = static_cast<int32>(ioWriter.getPos() - now)\r\n\r\n  if (padding > 268435455 - len) {\r\n    padding = 268435455 - len\r\n  }\r\n\r\n  ioWriter.writeBuffer(new Uint8Array(padding).fill(0))\r\n\r\n  now = ioWriter.getPos()\r\n\r\n  ioWriter.seek(sizePos)\r\n  putSize(ioWriter, len)\r\n  ioWriter.seek(now)\r\n}\r\n","/*\r\n * libmedia mp3 utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport const enum XingFlag {\r\n  FRAMES = 0x01,\r\n  SIZE = 0x02,\r\n  TOC = 0x04,\r\n  QSCALE = 0x08\r\n}\r\n\r\nexport const XING_TOC_COUNT = 100\r\n\r\nexport const ID3V1_SIZE = 128\r\n\r\nexport const XING_SIZE = 156\r\n"],"names":[],"sourceRoot":""}