{"version":3,"file":"src_avformat_formats_flv_FlvHeader_ts-src_avformat_formats_flv_FlvScriptTag_ts.avtranscoder.js","mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAKY,MAAM,SAAS;IAC5B;;OAEG;IACI,SAAS,CAAQ;IAExB;;OAEG;IACI,OAAO,CAAQ;IAEtB;;OAEG;IACI,KAAK,CAAQ;IAEpB;;OAEG;IACI,UAAU,CAAQ;IAEzB;;OAEG;IACI,QAAQ,CAAS;IAExB;;OAEG;IACI,QAAQ,CAAS;IAExB;QAEE,IAAI,CAAC,SAAS,GAAG,KAAK;QACtB,IAAI,CAAC,OAAO,GAAG,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,CAAC;QACd,IAAI,CAAC,UAAU,GAAG,CAAC;QAEnB,IAAI,CAAC,QAAQ,GAAG,KAAK;QACrB,IAAI,CAAC,QAAQ,GAAG,KAAK;IACvB,CAAC;IAGM,KAAK,CAAC,IAAI,CAAC,QAAkB;QAClC,IAAI,CAAC,SAAS,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,OAAO,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;QACzC,IAAI,CAAC,KAAK,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;QACvC,IAAI,CAAC,UAAU,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE;QAE7C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,QAAkB;QAC7B,IAAI,CAAC,KAAK,GAAG,CAAC;QACd,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,KAAK,IAAI,IAAI;SACnB;QACD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,KAAK,IAAI,IAAI;SACnB;QAED,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC;QACpC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;QACjC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;QAC/B,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;IACvC,CAAC;CACF;;;;;;;;;;;;;;;;;;;;;;;ACrEgD;AAEb;AACM;AACE;AACiB;AACjB;AAIf;AACY;AAE1B,MAAM,YAAY;IAExB,UAAU,CAAsB;IAEvC;QACE,IAAI,CAAC,UAAU,GAAG;YAChB,YAAY,EAAE,EAAE;YAChB,YAAY,EAAE,KAAK;YACnB,KAAK,EAAE,CAAC;YACR,MAAM,EAAE,CAAC;YACT,MAAM,EAAE,IAAI;YACZ,YAAY,EAAE,CAAC;SAChB;IACH,CAAC;IAGO,KAAK,CAAC,WAAW,CAAC,QAAkB,EAAE,MAAc;QAC1D,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC;QAClE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC;QACrD,OAAO;YACL,GAAG;YACH,KAAK;SACN;IACH,CAAC;IAGO,KAAK,CAAC,UAAU,CAAC,QAAkB,EAAE,MAAc;QACzD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;QACvC,IAAI,KAAU;QAEd,QAAQ,IAAI,EAAE;YACZ,SAAS;YACT,KAAK,CAAC;gBACJ,KAAK,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE;gBACnC,MAAK;YACL,UAAU;YACZ,KAAK,CAAC;gBACJ,KAAK,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;gBACjD,MAAK;YACL,SAAS;YACX,KAAK,CAAC;gBACJ,KAAK,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC;gBAC9D,MAAK;YACL,SAAS;YACX,KAAK,CAAC;gBACJ,KAAK,GAAG,EAAE;gBACV,OAAO,QAAQ,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE;oBACjC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC;oBACpE,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG;oBAChB,IAAI,CAAC,CAAC,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE;wBACtD,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;wBACtB,MAAK;qBACN;iBACF;gBACD,MAAK;YACL,gCAAgC;YAClC,KAAK,CAAC;gBACJ,KAAK,GAAG,EAAE;gBACV,6BAA6B;gBAC7B,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtB,OAAO,QAAQ,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE;oBACjC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC;oBACpE,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG;oBAChB,IAAI,CAAC,CAAC,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE;wBACtD,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;wBACtB,MAAK;qBACN;iBACF;gBACD,MAAK;YACL,sBAAsB;YACxB,KAAK,CAAC;gBACJ,KAAK,GAAG,IAAI;gBACZ,MAAK;YACL,oBAAoB;YACtB,KAAK,EAAE;gBACL,KAAK,GAAG,EAAE;gBACV,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE;gBAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC/B,KAAK,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;iBACpD;gBACD,MAAK;YACL,OAAO;YACT,KAAK,EAAE;gBACL,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE;gBAC7C,MAAM,eAAe,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;gBAClD,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,GAAG,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC;gBACzD,MAAK;YACL,mBAAmB;YACrB,KAAK,EAAE;gBACL,KAAK,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC;gBAC9D,MAAK;YACP,QAAQ;SAET;QAED,OAAO,KAAK;IACd,CAAC;IAGM,KAAK,CAAC,IAAI,CAAC,QAAkB,EAAE,IAAY;QAChD,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,EAAE;QAC7B,MAAM,MAAM,GAAG,GAAG,qBAAsB,IAAI,EAAC;QAC7C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC;QACnD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC;QACrD,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK;QAEjB,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;QAC/C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE;QAExC,IAAI,OAAO,GAAG,EAAE,KAAK,IAAI,EAAE;YACzB,oDAAW,CAAC,gCAAgC,OAAO,GAAG,EAAE,sBAAsB,IAAI,EAAE,2BAAC;YAErF,OAAO,sDAAsB;SAC9B;QAED,OAAO,CAAC;IACV,CAAC;IAEO,UAAU,CAAC,QAAsB,EAAE,KAAU;QACnD,SAAS;QACT,IAAI,kDAAS,CAAC,KAAK,CAAC,EAAE;YACpB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC;SAC5B;aACI,IAAI,kDAAS,CAAC,KAAK,CAAC,EAAE;YACzB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACpC;QACD,UAAU;aACL,IAAI,mDAAU,CAAC,KAAK,CAAC,EAAE;YAC1B,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;QACD,SAAS;aACJ,IAAI,kDAAS,CAAC,KAAK,CAAC,EAAE;YACzB,cAAc;YACd,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,EAAE;gBACzB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBACvB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC;gBAClC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC;aAC5B;YACD,SAAS;iBACJ;gBACH,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;gBACtB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC;gBAClC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC;aAC5B;SACF;QACD,aAAa;aACR,IAAI,iDAAQ,CAAC,KAAK,CAAC,EAAE;YACxB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACvB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC;YAClC,mDAAU,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE;gBAC1B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC;YAClC,CAAC,CAAC;SACH;QACD,SAAS;aACJ,IAAI,kDAAS,CAAC,KAAK,CAAC,EAAE;YACzB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,oDAAW,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;gBAC/B,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC;gBAChC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC;gBACzB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;YACjC,CAAC,CAAC;YACF,kBAAkB;YAClB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;SACxB;aACI,IAAI,KAAK,YAAY,IAAI,EAAE;YAC9B,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACvB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACrC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;SACvB;IACH,CAAC;IACM,WAAW;QAChB,MAAM,KAAK,GAAG,EAAE;QAChB,MAAM,WAAW,GAAG,IAAI,8DAAY,EAAE;QACtC,WAAW,CAAC,OAAO,GAAG,CAAC,IAAI,EAAE,EAAE;YAC7B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACxB,OAAO,CAAC;QACV,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC;QAE7C,WAAW,CAAC,KAAK,EAAE;QAEnB,MAAM,MAAM,GAAG,2EAAe,CAAC,UAAU,EAAE,KAAK,CAAC;QAEjD,OAAO,MAAM,CAAC,MAAM;IACtB,CAAC;IAEM,KAAK,CAAC,QAAsB;QACjC,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,KAAK,GAAG,EAAE;YAChB,MAAM,WAAW,GAAG,IAAI,8DAAY,EAAE;YACtC,WAAW,CAAC,OAAO,GAAG,CAAC,IAAI,EAAE,EAAE;gBAC7B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACxB,OAAO,CAAC;YACV,CAAC;YAED,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC;YAC1C,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC;YAE7C,WAAW,CAAC,KAAK,EAAE;YAEnB,MAAM,MAAM,GAAG,2EAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAEjD,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,EAAE;YAE7B,aAAa;YACb,iDAAkB,CAAC,QAAQ,0BAAiB,MAAM,CAAC,MAAM,YAAK;YAE9D,WAAW;YACX,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;YAE5B,kBAAkB;YAClB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;SACtD;IACH,CAAC;IAEM,YAAY,CAAC,GAAW;QAC7B,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK;YAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa;YAExD,IAAI,CAAS;YACb,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACjC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACpB,KAAK,GAAG,CAAC;oBACT,MAAK;iBACN;qBACI,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE;oBACvB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBAC1B,MAAK;iBACN;aACF;YACD,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,MAAM,EAAE;gBAC3B,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;aACzB;YACD,OAAO;gBACL,GAAG,EAAE,QAAQ,CAAC,KAAK,CAAC;gBACpB,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC;aAClB;SACF;QAED,OAAO;YACL,GAAG,EAAE,CAAC,CAAC;YACP,GAAG,EAAE,CAAC,CAAC;SACR;IACH,CAAC;IAEM,YAAY,CAAC,GAAW;QAC7B,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK;YAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa;YACxD,IAAI,CAAC,GAAG,CAAC;YACT,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE;oBACrB,KAAK,GAAG,CAAC;oBACT,MAAK;iBACN;aACF;YACD,IAAI,CAAC,KAAK,QAAQ,CAAC,MAAM,EAAE;gBACzB,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;aAC3D;YACD,OAAO,KAAK,CAAC,KAAK,CAAC;SACpB;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IAEM,OAAO;QACZ,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS;eAC9B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa;eACvC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC;IACtD,CAAC;CACF;;;;;;;;;;;;;;;;;AC3TD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAyBI,MAAM,sBAAsB,GAAG;IACpC,uCAA2B,EAAE,EAAE;IAC/B,uCAA2B,EAAE,CAAC;IAC9B,yCAA6B,EAAE,EAAE;IACjC,6CAAiC,EAAE,CAAC;IACpC,8CAAkC,EAAE,CAAC;IACrC,4CAAgC,EAAE,CAAC;IACnC,6CAAiC,EAAE,CAAC;IAEpC,qCAA4B,EAAE,CAAC;IAC/B,sCAA4B,EAAE,EAAE;IAChC,qCAA2B,EAAE,EAAE;IAC/B,sCAA6B,EAAE,CAAC;IAChC,oCAA4B,EAAE,CAAC;IAC/B,wCAA+B,EAAE,CAAC;IAClC,qCAA4B,EAAE,CAAC;IAC/B,sCAA4B,EAAE,CAAC;IAC/B,0CAAgC,EAAE,CAAC;CACpC;AAEM,MAAM,2BAA2B,GAAG;IACzC,EAAE,uCAA2B;IAC7B,CAAC,uCAA2B;IAC5B,EAAE,yCAA6B;IAE/B,CAAC,6CAAiC;IAClC,CAAC,8CAAkC;IACnC,CAAC,8CAAkC;IACnC,CAAC,8CAAkC;IACnC,CAAC,4CAAgC;IACjC,CAAC,6CAAiC;CACnC;AAEM,MAAM,2BAA2B,GAAG;IACzC,CAAC,qCAA4B;IAC7B,EAAE,sCAA4B;IAC9B,EAAE,qCAA2B;IAC7B,CAAC,sCAA6B;IAE9B,CAAC,oCAA4B;IAC7B,CAAC,wCAA+B;IAChC,CAAC,qCAA4B;IAC7B,CAAC,sCAA4B;IAC7B,CAAC,0CAAgC;CAClC;AAEM,MAAM,oBAAoB,GAAG;IAClC,uCAA2B,EAAE,CAAC;IAC9B,uCAA2B,EAAE,CAAC;IAC9B,yCAA6B,EAAE,CAAC;IAChC,4CAAgC,EAAE,CAAC;IACnC,6CAAiC,EAAE,CAAC;IACpC,6CAAiC,EAAE,CAAC;IACpC,8CAAkC,EAAE,CAAC;IAErC,qCAA4B,EAAE,CAAC;IAC/B,sCAA6B,EAAE,CAAC;IAChC,sCAA4B,EAAE,CAAC;IAC/B,qCAA2B,EAAE,CAAC;IAC9B,qCAA2B,EAAE,CAAC;IAC9B,qCAA2B,EAAE,CAAC;IAC9B,oCAA4B,EAAE,CAAC;IAC/B,wCAA+B,EAAE,CAAC;IAClC,qCAA4B,EAAE,CAAC;IAC/B,sCAA4B,EAAE,CAAC;IAC/B,0CAAgC,EAAE,CAAC;CACpC;;;;;;;;;;;;;;;;;;AClHD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAMkE;AAE9D,SAAS,cAAc,CAC5B,QAAkB,EAClB,IAAY,EACZ,IAAY,EACZ,SAAiB;IAEjB,UAAU;IACV,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC;IACzB,OAAO;IACP,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC;IAC1B,YAAY;IACZ,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,mBAAY,CAAC,CAAC;IACnD,oBAAoB;IACpB,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,cAAO,CAAC,eAAQ,CAAC,CAAC;IACvD,oBAAoB;IACpB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;AACzB,CAAC;AAED;;;;;;;;;GASG;AACI,SAAS,uBAAuB,CAAC,QAAkB,EAAE,MAAc;IACxE;;;;OAIG;IACH,IAAI,MAAM,GAAG,IAAI;IACjB;;;;OAIG;IACH,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,0CAA8B,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE;QACpG,MAAM,IAAI,IAAI;KACf;IACD;;;;;;OAMG;IACH,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,0CAA8B,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,IAAI,KAAK,EAAE;QAChG,MAAM,IAAI,IAAI;KACf;SACI,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,IAAI,KAAK,EAAE;QAC5C,MAAM,IAAI,IAAI;KACf;SACI,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,IAAI,KAAK,EAAE;QAC5C,MAAM,IAAI,IAAI;KACf;IAED,MAAM,IAAI,CAAC,CAAC,wDAAsB,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;IAElE,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;AAC7B,CAAC;AAED;;;;;;;;GAQG;AACI,SAAS,uBAAuB,CAAC,QAAkB,EAAE,MAAc,EAAE,KAAoB;IAC9F,IAAI,MAAM,GAAG,wDAAsB,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI;IAEnE,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,wCAA+B;WACrD,MAAM,CAAC,QAAQ,CAAC,OAAO,yCAAgC;WACvD,MAAM,CAAC,QAAQ,CAAC,OAAO,yCAA+B;WACtD,MAAM,CAAC,QAAQ,CAAC,OAAO,wCAA8B,EACxD;QACA,IAAI,KAAK,wCAAgC,EAAE;YACzC,MAAM,IAAI,IAAQ;SACnB;aACI;YACH,MAAM,IAAI,IAAQ;SACnB;KACF;IACD,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;AAC7B,CAAC;AAEM,SAAS,0BAA0B,CAAC,QAAkB,EAAE,MAAc,EAAE,IAAmB,EAAE,KAAoB;IACtH,IAAI,MAAM,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,IAAI;IAEjC,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,wCAA+B;WACrD,MAAM,CAAC,QAAQ,CAAC,OAAO,yCAA+B;WACtD,MAAM,CAAC,QAAQ,CAAC,OAAO,wCAA8B;WACrD,MAAM,CAAC,QAAQ,CAAC,OAAO,wCAA8B;WACrD,MAAM,CAAC,QAAQ,CAAC,OAAO,wCAA8B,EACxD;QACA,IAAI,KAAK,wCAAgC,EAAE;YACzC,MAAM,IAAI,IAAQ;SACnB;aACI;YACH,MAAM,IAAI,IAAQ;SACnB;KACF;IACD,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;AAC7B,CAAC","sources":["webpack://AVTranscoder/./src/avformat/formats/flv/FlvHeader.ts","webpack://AVTranscoder/./src/avformat/formats/flv/FlvScriptTag.ts","webpack://AVTranscoder/./src/avformat/formats/flv/flv.ts","webpack://AVTranscoder/./src/avformat/formats/flv/oflv.ts"],"sourcesContent":["/*\r\n * libmedia flv header format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\n\r\nexport default class FlvHeader {\r\n  /**\r\n   * 3 bytes 签名\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 1 bytes 版本，比如 0x01 表示 FLV 版本 1\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes 第一位标记是否有视频，第 4 位标记是否有音频，其余位保留\r\n   */\r\n  public flags: number\r\n\r\n  /**\r\n   * 4 bytes FLV header 的大小，单位是字节，目前是 9\r\n   */\r\n  public dataOffset: number\r\n\r\n  /**\r\n   * 是否有视频\r\n   */\r\n  public hasVideo: boolean\r\n\r\n  /**\r\n   * 是否有音频\r\n   */\r\n  public hasAudio: boolean\r\n\r\n  constructor() {\r\n\r\n    this.signature = 'FLV'\r\n    this.version = 1\r\n    this.flags = 0\r\n    this.dataOffset = 9\r\n\r\n    this.hasAudio = false\r\n    this.hasVideo = false\r\n  }\r\n\r\n  @deasync\r\n  public async read(ioReader: IOReader) {\r\n    this.signature = await ioReader.readString(3)\r\n    this.version = await ioReader.readUint8()\r\n    this.flags = await ioReader.readUint8()\r\n    this.dataOffset = await ioReader.readUint32()\r\n\r\n    this.hasAudio = !!(this.flags & 0x04)\r\n    this.hasVideo = !!(this.flags & 0x01)\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    this.flags = 0\r\n    if (this.hasAudio) {\r\n      this.flags |= 0x04\r\n    }\r\n    if (this.hasVideo) {\r\n      this.flags |= 0x01\r\n    }\r\n\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint8(this.version)\r\n    ioWriter.writeUint8(this.flags)\r\n    ioWriter.writeUint32(this.dataOffset)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv script tag format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\nimport { FlvMetaData } from './type'\r\nimport { FlvTag } from './flv'\r\n\r\nimport * as flv from './oflv'\r\nimport * as errorType from 'avutil/error'\r\n\r\nexport default class FlvScriptTag {\r\n\r\n  public onMetaData: Partial<FlvMetaData>\r\n\r\n  constructor() {\r\n    this.onMetaData = {\r\n      audiocodecid: 10,\r\n      canSeekToEnd: false,\r\n      width: 0,\r\n      height: 0,\r\n      stereo: true,\r\n      videocodecid: 7\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async parseObject(ioReader: IOReader, endPos: bigint) {\r\n    const key = await ioReader.readString(await ioReader.readUint16())\r\n    const value = await this.parseValue(ioReader, endPos)\r\n    return {\r\n      key,\r\n      value\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async parseValue(ioReader: IOReader, endPos: bigint) {\r\n    const type = await ioReader.readUint8()\r\n    let value: any\r\n\r\n    switch (type) {\r\n      // double\r\n      case 0:\r\n        value = await ioReader.readDouble()\r\n        break\r\n        // boolean\r\n      case 1:\r\n        value = await ioReader.readUint8() ? true : false\r\n        break\r\n        // string\r\n      case 2:\r\n        value = await ioReader.readString(await ioReader.readUint16())\r\n        break\r\n        // object\r\n      case 3:\r\n        value = {}\r\n        while (ioReader.getPos() < endPos) {\r\n          const { key, value: val } = await this.parseObject(ioReader, endPos)\r\n          value[key] = val\r\n          if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n            await ioReader.skip(3)\r\n            break\r\n          }\r\n        }\r\n        break\r\n        // ECMA array type (Mixed array)\r\n      case 8:\r\n        value = {}\r\n        // skip ECMAArrayLength(UI32)\r\n        await ioReader.skip(4)\r\n        while (ioReader.getPos() < endPos) {\r\n          const { key, value: val } = await this.parseObject(ioReader, endPos)\r\n          value[key] = val\r\n          if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n            await ioReader.skip(3)\r\n            break\r\n          }\r\n        }\r\n        break\r\n        // ScriptDataObjectEnd\r\n      case 9:\r\n        value = null\r\n        break\r\n        // Strict array type\r\n      case 10:\r\n        value = []\r\n        const length = await ioReader.readUint32()\r\n        for (let i = 0; i < length; i++) {\r\n          value.push(await this.parseValue(ioReader, endPos))\r\n        }\r\n        break\r\n        // Date\r\n      case 11:\r\n        const timestamp = await ioReader.readDouble()\r\n        const localTimeOffset = await ioReader.readInt16()\r\n        value = new Date(timestamp + localTimeOffset * 60 * 1000)\r\n        break\r\n        // Long string type\r\n      case 12:\r\n        value = await ioReader.readString(await ioReader.readUint32())\r\n        break\r\n      default:\r\n\r\n    }\r\n\r\n    return value\r\n  }\r\n\r\n  @deasync\r\n  public async read(ioReader: IOReader, size: number) {\r\n    const now = ioReader.getPos()\r\n    const endPos = now + static_cast<int64>(size)\r\n    const key = await this.parseValue(ioReader, endPos)\r\n    const value = await this.parseValue(ioReader, endPos)\r\n    this[key] = value\r\n\r\n    const tagSize = Number(ioReader.getPos() - now)\r\n    const prev = await ioReader.readUint32()\r\n\r\n    if (tagSize + 11 !== prev) {\r\n      logger.warn(`script size not match, size: ${tagSize + 11}, previousTagSize: ${prev}`)\r\n\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private writeValue(ioWriter: IOWriterSync, value: any) {\r\n    // double\r\n    if (is.number(value)) {\r\n      ioWriter.writeUint8(0)\r\n      ioWriter.writeDouble(value)\r\n    }\r\n    else if (is.bigint(value)) {\r\n      ioWriter.writeUint8(0)\r\n      ioWriter.writeDouble(Number(value))\r\n    }\r\n    // boolean\r\n    else if (is.boolean(value)) {\r\n      ioWriter.writeUint8(1)\r\n      ioWriter.writeUint8(value ? 1 : 0)\r\n    }\r\n    // string\r\n    else if (is.string(value)) {\r\n      // long string\r\n      if (value.length >= 65536) {\r\n        ioWriter.writeUint8(12)\r\n        ioWriter.writeUint32(value.length)\r\n        ioWriter.writeString(value)\r\n      }\r\n      // string\r\n      else {\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint16(value.length)\r\n        ioWriter.writeString(value)\r\n      }\r\n    }\r\n    // array type\r\n    else if (is.array(value)) {\r\n      ioWriter.writeUint8(10)\r\n      ioWriter.writeUint32(value.length)\r\n      array.each(value, (value) => {\r\n        this.writeValue(ioWriter, value)\r\n      })\r\n    }\r\n    // object\r\n    else if (is.object(value)) {\r\n      ioWriter.writeUint8(3)\r\n      object.each(value, (item, key) => {\r\n        ioWriter.writeUint16(key.length)\r\n        ioWriter.writeString(key)\r\n        this.writeValue(ioWriter, item)\r\n      })\r\n      // object end flag\r\n      ioWriter.writeUint24(9)\r\n    }\r\n    else if (value instanceof Date) {\r\n      ioWriter.writeUint8(11)\r\n      ioWriter.writeDouble(value.getTime())\r\n      ioWriter.writeInt16(0)\r\n    }\r\n  }\r\n  public computeSize() {\r\n    const cache = []\r\n    const cacheWriter = new IOWriterSync()\r\n    cacheWriter.onFlush = (data) => {\r\n      cache.push(data.slice())\r\n      return 0\r\n    }\r\n    this.writeValue(cacheWriter, 'onMetaData')\r\n    this.writeValue(cacheWriter, this.onMetaData)\r\n\r\n    cacheWriter.flush()\r\n\r\n    const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n    return buffer.length\r\n  }\r\n\r\n  public write(ioWriter: IOWriterSync) {\r\n    if (this.onMetaData) {\r\n      const cache = []\r\n      const cacheWriter = new IOWriterSync()\r\n      cacheWriter.onFlush = (data) => {\r\n        cache.push(data.slice())\r\n        return 0\r\n      }\r\n\r\n      this.writeValue(cacheWriter, 'onMetaData')\r\n      this.writeValue(cacheWriter, this.onMetaData)\r\n\r\n      cacheWriter.flush()\r\n\r\n      const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n      const now = ioWriter.getPos()\r\n\r\n      // tag header\r\n      flv.writeTagHeader(ioWriter, FlvTag.SCRIPT, buffer.length, 0n)\r\n\r\n      // tag body\r\n      ioWriter.writeBuffer(buffer)\r\n\r\n      // previousTagSize\r\n      ioWriter.writeUint32(Number(ioWriter.getPos() - now))\r\n    }\r\n  }\r\n\r\n  public dts2Position(dts: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n\r\n      let i: number\r\n      for (i = 0; i < times.length; i++) {\r\n        if (times[i] === dts) {\r\n          index = i\r\n          break\r\n        }\r\n        else if (times[i] > dts) {\r\n          index = Math.max(i - 1, 0)\r\n          break\r\n        }\r\n      }\r\n      if (i && i === times.length) {\r\n        index = times.length - 1\r\n      }\r\n      return {\r\n        pos: position[index],\r\n        dts: times[index]\r\n      }\r\n    }\r\n\r\n    return {\r\n      pos: -1,\r\n      dts: -1\r\n    }\r\n  }\r\n\r\n  public position2DTS(pos: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n      let i = 0\r\n      for (i = 0; i < position.length; i++) {\r\n        if (position[i] > pos) {\r\n          index = i\r\n          break\r\n        }\r\n      }\r\n      if (i === position.length) {\r\n        return this.onMetaData.duration ?? times[times.length - 1]\r\n      }\r\n      return times[index]\r\n    }\r\n    return -1\r\n  }\r\n\r\n  public canSeek(): boolean {\r\n    return !!(this.onMetaData.keyframes\r\n      && this.onMetaData.keyframes.filepositions\r\n      && this.onMetaData.keyframes.filepositions.length)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum FlvTag {\r\n  AUDIO = 8,\r\n  VIDEO = 9,\r\n  SCRIPT = 18\r\n}\r\n\r\nexport const enum PacketTypeExt {\r\n  PacketTypeSequenceStart = 0,\r\n  PacketTypeCodedFrames = 1,\r\n  PacketTypeSequenceEnd = 2,\r\n  PacketTypeCodedFramesX = 3,\r\n  PacketTypeMetadata = 4,\r\n  PacketTypeMPEG2TSSequenceStart = 5\r\n}\r\n\r\nexport const enum AVCPacketType {\r\n  AVC_SEQUENCE_HEADER,\r\n  AVC_NALU,\r\n  AVC_END_OF_ENQUENCE\r\n}\r\n\r\nexport const AVCodecID2FlvCodecType = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 10,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 2,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 11,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 1,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 6,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 7,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 8,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 7,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 12,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 13,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 9,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 2,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 3,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 5,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 6\r\n}\r\n\r\nexport const FlvAudioCodecType2AVCodecID = {\r\n  10: AVCodecID.AV_CODEC_ID_AAC,\r\n  2: AVCodecID.AV_CODEC_ID_MP3,\r\n  11: AVCodecID.AV_CODEC_ID_SPEEX,\r\n\r\n  1: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  4: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  5: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  6: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  7: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  8: AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n}\r\n\r\nexport const FlvVideoCodecType2AVCodecID = {\r\n  7: AVCodecID.AV_CODEC_ID_H264,\r\n  12: AVCodecID.AV_CODEC_ID_HEVC,\r\n  13: AVCodecID.AV_CODEC_ID_VVC,\r\n  9: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  2: AVCodecID.AV_CODEC_ID_H263,\r\n  3: AVCodecID.AV_CODEC_ID_FLASHSV,\r\n  4: AVCodecID.AV_CODEC_ID_VP6F,\r\n  5: AVCodecID.AV_CODEC_ID_VP6A,\r\n  6: AVCodecID.AV_CODEC_ID_FLASHSV2\r\n}\r\n\r\nexport const FlvCodecHeaderLength = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 1,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 0,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 0,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 0,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 0,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 4,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 4,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 4,\r\n  [AVCodecID.AV_CODEC_ID_AV1]: 4,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 0,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 0,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 0,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 0,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 0\r\n}\r\n","/*\r\n * libmedia flv encode\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../../AVStream'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { AVCodecID2FlvCodecType, FlvTag, PacketTypeExt } from './flv'\r\n\r\nexport function writeTagHeader(\r\n  ioWriter: IOWriter,\r\n  type: FlvTag,\r\n  size: number,\r\n  timestamp: bigint\r\n) {\r\n  // tagType\r\n  ioWriter.writeUint8(type)\r\n  // size\r\n  ioWriter.writeUint24(size)\r\n  // timestamp\r\n  ioWriter.writeUint24(Number(timestamp & 0xffffffn))\r\n  // timestampExtended\r\n  ioWriter.writeUint8(Number((timestamp >> 24n) & 0xffn))\r\n  // streamId always 0\r\n  ioWriter.writeUint24(0)\r\n}\r\n\r\n/**\r\n * \r\n *   0  1  2  3    4    5      6         7   \r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n *  |SoundFormat|SoundRate|SoundSize| SoundType| SoundData\r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n * \r\n * @param ioWriter \r\n * @param stream \r\n */\r\nexport function writeAudioTagDataHeader(ioWriter: IOWriter, stream: Stream) {\r\n  /**\r\n   * SoundSize 采样精度，对于压缩过的音频，永远是 16 位\r\n   * - 0 snd8Bit\r\n   * - 1 snd16Bit\r\n   */\r\n  let header = 0x02\r\n  /**\r\n   * SoundType 声道类型，对 Nellymoser 来说，永远是单声道；对 AAC 来说，永远是双声道\r\n   * - 0 sndMono 单声道\r\n   * - 1 sndStereo 双声道\r\n   */\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.chLayout.nbChannels > 1) {\r\n    header |= 0x01\r\n  }\r\n  /**\r\n   * SoundRate 采样率，对 AAC 来说，永远等于 3\r\n   * - 0 5.5-kHz\r\n   * - 1 1-kHz\r\n   * - 2 22-kHz\r\n   * - 3 44-kHz\r\n   */\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.sampleRate >= 44000) {\r\n    header |= 0x0c\r\n  }\r\n  else if (stream.codecpar.sampleRate >= 22000) {\r\n    header |= 0x08\r\n  }\r\n  else if (stream.codecpar.sampleRate >= 11000) {\r\n    header |= 0x04\r\n  }\r\n\r\n  header |= ((AVCodecID2FlvCodecType[stream.codecpar.codecId]) << 4)\r\n\r\n  ioWriter.writeUint8(header)\r\n}\r\n\r\n/**\r\n * \r\n *   0 1  2  3  4 5 6 7   \r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\r\n *  |FrameType|CodecID| VideoData\r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n * @param ioWriter \r\n * @param stream \r\n */\r\nexport function writeVideoTagDataHeader(ioWriter: IOWriter, stream: Stream, flags: AVPacketFlags) {\r\n  let header = AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n  ) {\r\n    if (flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n      header |= (1 << 4)\r\n    }\r\n    else {\r\n      header |= (1 << 5)\r\n    }\r\n  }\r\n  ioWriter.writeUint8(header)\r\n}\r\n\r\nexport function writeVideoTagExtDataHeader(ioWriter: IOWriter, stream: Stream, type: PacketTypeExt, flags: AVPacketFlags) {\r\n  let header = (type & 0x0f) | 0x80\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n  ) {\r\n    if (flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n      header |= (1 << 4)\r\n    }\r\n    else {\r\n      header |= (1 << 5)\r\n    }\r\n  }\r\n  ioWriter.writeUint8(header)\r\n}\r\n"],"names":[],"sourceRoot":""}