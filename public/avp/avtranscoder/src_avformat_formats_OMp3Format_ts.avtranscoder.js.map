{"version":3,"file":"src_avformat_formats_OMp3Format_ts.avtranscoder.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2B+B;AAGa;AAEH;AACL;AACO;AACC;AACG;AACC;AACiB;AAChB;AACb;AACY;AACR;AACI;AAE5C,MAAM,aAAa,GAAG,GAAG;AAyBzB,MAAM,uBAAuB,GAAqB;IAChD,YAAY,EAAE,CAAC;IACf,QAAQ,EAAE,KAAK;IACf,OAAO,EAAE,IAAI;CACd;AAEc,MAAM,UAAW,SAAQ,gDAAO;IAEtC,IAAI,yBAAyB;IAE5B,OAAO,CAAkB;IAEzB,OAAO,CAAY;IAEnB,UAAU,CAAc;IAEhC,YAAY,UAA4B,EAAE;QACxC,KAAK,EAAE;QACP,IAAI,CAAC,OAAO,GAAG,uDAAa,CAAC,EAAE,EAAE,uBAAuB,EAAE,OAAO,CAAC;IACpE,CAAC;IAEM,IAAI,CAAC,aAA+B;QACzC,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;QAEtC,IAAI,CAAC,OAAO,GAAG;YACb,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,CAAC;YACT,IAAI,EAAE,CAAC;YACP,IAAI,EAAE,CAAC;YACP,GAAG,EAAE,EAAE;YACP,GAAG,EAAE,CAAC;YAEN,cAAc,EAAE,CAAC;YACjB,kBAAkB,EAAE,KAAK;YACzB,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,CAAC;YAER,WAAW,EAAE,IAAI,yDAAW,EAAE;YAC9B,UAAU,EAAE,CAAC,CAAC;YACd,aAAa,EAAE,CAAC;YAChB,eAAe,WAAI;YACnB,YAAY,WAAI;YAChB,SAAS,EAAE,CAAC;YAEZ,UAAU,WAAI;SACf;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,8DAAY,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;QAExD,MAAM,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACnD,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,0CAA8B;QAC9D,CAAC,CAAC;QAEF,IAAI,CAAC,MAAM,EAAE;YACX,qDAAY,CAAC,qCAAqC,2BAAC;YACnD,OAAO,0DAA0B;SAClC;QAED,OAAO,CAAC;IACV,CAAC;IAEO,YAAY,CAAC,aAA+B;QAClD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACzB,OAAM;SACP;QAED,MAAM,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACnD,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,0CAA8B;QAC9D,CAAC,CAAC;QAEF,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,QAAQ,GAAG,CAAC;QAChB,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,IAAI,gBAAgB,UAAsB,sDAAS,OAAC;QACpD,IAAI,GAAG,GAAG,CAAC;QACX,IAAI,WAAW,GAAG,CAAC;QAEnB,MAAM,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;QAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;YACvB,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,KAAK,IAAI,EAAE;gBACvC,SAAS;gBACT,GAAG,GAAG,GAAG;aACV;iBACI,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,KAAK,IAAI,GAAG,CAAC,EAAE;gBAChD,SAAS;gBACT,GAAG,GAAG,GAAG;aACV;iBACI,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,KAAK,IAAI,GAAG,CAAC,EAAE;gBAChD,WAAW;gBACX,GAAG,GAAG,GAAG;aACV;iBACI;gBACH,SAAQ;aACT;YACD,OAAO,GAAG,CAAC;SACZ;QACD,IAAI,OAAO,KAAK,OAAO,CAAC,MAAM,EAAE;YAC9B,oDAAW,CAAC,mDAAmD,2BAAC;YAChE,OAAM;SACP;QAED,QAAQ,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE;YAC3C,KAAK,CAAC;gBACJ,WAAW;gBACX,QAAQ,GAAG,CAAC;gBACZ,MAAK;YACP,KAAK,CAAC;gBACJ,aAAa;gBACb,QAAQ,GAAG,CAAC;gBACZ,MAAK;YACP;gBACE,oDAAW,CAAC,0DAA0D,2BAAC;gBACvE,OAAM;SACT;QAED,OAAO;QACP,IAAI,MAAM,YAAa;QACvB,sCAAsC;QACtC,MAAM,IAAI,CAAC,MAAW,GAAG,IAAI,CAAC,IAAW,GAAG,GAAG,CAAC,IAAI,EAAE;QACtD,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC;QAC7B,MAAM,IAAI,QAAQ,IAAI,CAAC;QAEvB,KAAK,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,EAAE,EAAE,UAAU,EAAE,EAAE;YAClD,IAAI,OAAO,qBAAsB,IAAI,GAAG,sEAAiC,CAAC,GAAG,KAAS,UAAU,CAAC,EAAC;YAClG,IAAI,KAAK,GAAG,mDAAU,CAAC,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;YAEzD,IAAI,KAAK,GAAG,gBAAgB,EAAE;gBAC5B,gBAAgB,GAAG,KAAK;gBACxB,cAAc,GAAG,UAAU;aAC5B;SACF;QAED,KAAK,UAAU,GAAG,cAAc,GAAI,UAAU,EAAE,EAAE;YAChD,IAAI,IAAI,GAAG,UAAU,IAAI,IAAO;YAChC,IAAI,EAAE,IAAI,UAAU,EAAE;gBACpB,OAAM;aACP;YACD,MAAM,IAAI,IAAI;YAEd,mDAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC;YAEnD,MAAM,eAAe,GAAe,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAEpF,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;YACpH,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,+CAAS;YAEjD,IAAI,WAAW,IAAI,4DAA0B,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;gBACnG,MAAK;aACN;YAED,MAAM,IAAI,CAAC,IAAI;SAChB;QAED,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;QACnC,kCAAkC;QAClC,IAAI,CAAC,UAAU,CAAC,WAAW,IAA2B;QAEtD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,4DAA0B,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;QACpG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC;QACrB,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC;QACrB,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;QACpB,SAAS;QACT,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9B,OAAO;QACP,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAE9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oDAAc,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,oDAAc,CAAC,KAAK,CAAC,CAAC;SAC7D;QAED,cAAc;QACd,0EAA0E;QAC1E,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAE9B,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAuB;QAE/C,IAAI,QAAQ,EAAE,OAAO,EAAE;YACrB,MAAM,MAAM,GAAG,qDAAW,CAAC,QAAQ,CAAC,OAAO,CAAC;YAC5C,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACnD;aACI;YACH,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;YACnC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACvD;QAED,sCAAsC;QACtC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QAE7B,+BAA+B;QAC/B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QAE7B,0BAA0B;QAC1B,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEtD,yBAAyB;QACzB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7B,8BAA8B;QAC9B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7B,8BAA8B;QAC9B,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAE9B,OAAO;QACP,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7B,UAAU;QACV,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7B,SAAS;QACT,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAE9B,eAAe;QACf,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9B,YAAY;QACZ,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9B,UAAU;QACV,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAE9B,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpF,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;QAErD,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;QAE9D,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;QAEpE,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa;IACrD,CAAC;IAEO,YAAY,CAAC,QAA2B;QAC9C,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACrB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;QACnB,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,2EAAQ,MAAK;QAElC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAC3C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI;YAEtD,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,KAAK,aAAa,EAAE;gBACxC,iEAAiE;gBACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,IAAI,CAAC,EAAE;oBACzC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC/C;gBACD,mCAAmC;gBACnC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;gBACtB,oDAAoD;gBACpD,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,aAAa,IAAI,CAAC;aACtC;YACD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC;SACtB;IACH,CAAC;IAEO,UAAU,CAAC,aAA+B;QAChD,IAAI,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;YACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;YAC7C,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;SACpC;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAChD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAE9C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;QAEhD,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC;QACnF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oDAAc,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,oDAAc,CAAC,KAAK,CAAC;YACrD,MAAM,SAAS,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;YACvE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC;SAClC;QAED,MAAM,GAAG,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;QAC3C,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;QACzD,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;QACpE,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;IAClC,CAAC;IAEM,WAAW,CAAC,aAA+B;QAEhD,MAAM,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACnD,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,0CAA8B;QAC9D,CAAC,CAAC;QAEF,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;YAC7B,8CAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,aAAa,CAAC,qBAAqB,EAAE,MAAM,CAAC,QAAQ,CAAC;SACrH;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;SACjC;QAED,OAAO,CAAC;IACV,CAAC;IACM,aAAa,CAAC,aAA+B,EAAE,QAA2B;QAE/E,IAAI,CAAC,2EAAQ,MAAK,EAAE;YAClB,oDAAW,CAAC,wBAAwB,2EAAQ,MAAY,aAAa,2BAAC;YACtE,OAAM;SACP;QAED,MAAM,MAAM,GAAG,aAAa,CAAC,gBAAgB,CAAC,2EAAQ,OAAa;QAEnE,IAAI,CAAC,MAAM,EAAE;YACX,oDAAW,CAAC,6DAA6D,2EAAQ,MAAY,aAAa,2BAAC;YAC3G,OAAM;SACP;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,0CAA8B,EAAE;YACzD,oDAAW,CAAC,iCAAiC,2EAAQ,MAAY,aAAa,2BAAC;YAC/E,OAAM;SACP;QAED,IAAI,2EAAQ,UAAS,2EAAQ,SAAQ,CAAC,EAAE;YACtC,mDAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,qIAA2C,QAAQ,QAAQ;YAEvG,MAAM,OAAO,GAAG,sEAAiC,CAC/C,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,EAChC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAC9B,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,CACtC;YACD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;gBAChC,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,OAAO;aACtC;iBACI,IAAI,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;gBAChD,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI;aACvC;YAED,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YAE3B,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,gEAAa,CAAC,2EAAQ,2EAAO,QAAQ,OAAM,CAAC;SAChF;QAED,OAAO,CAAC;IACV,CAAC;IAEM,YAAY,CAAC,aAA+B;QAEjD,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YAEzB,MAAM,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBACnD,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,0CAA8B;YAC9D,CAAC,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAuB;YAE/C,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,gDAAU,CAAC;YAC5C,MAAM,SAAS,GAAG,IAAI,8DAAY,CAAC,SAAS,CAAC;YAC7C,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC;YAE5B,SAAS,SAAS,CAAC,GAAW;gBAC5B,MAAM,MAAM,GAAG,qDAAW,CAAC,GAAG,CAAC;gBAC/B,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC7C,IAAI,MAAM,CAAC,MAAM,GAAG,EAAE,EAAE;oBACtB,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;iBACnC;YACH,CAAC;YAED,IAAI,QAAQ,CAAC,KAAK,EAAE;gBAClB,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC;aAC1B;iBACI;gBACH,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;aACnB;YACD,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACnB,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC3B;iBACI;gBACH,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;aACnB;YACD,IAAI,QAAQ,CAAC,KAAK,EAAE;gBAClB,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC;aAC1B;iBACI;gBACH,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;aACnB;YAED,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI;YACrB,IAAI,QAAQ,CAAC,KAAK,EAAE;gBAClB,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK;aACjC;YAED,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;SAC9C;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;SAC/B;QAED,aAAa,CAAC,QAAQ,CAAC,KAAK,EAAE;QAE9B,OAAO,CAAC;IACV,CAAC;IAEM,KAAK,CAAC,aAA+B;QAC1C,aAAa,CAAC,QAAQ,CAAC,KAAK,EAAE;QAC9B,OAAO,CAAC;IACV,CAAC;CAEF;;;;;;;;;;;;;;;;;ACrdD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAEoC;AAEhC,MAAM,WAAW;IACtB,OAAO,CAAQ;IACf,KAAK,CAAQ;IACb,UAAU,CAAQ;IAClB,YAAY,CAAQ;IACpB,iBAAiB,CAAQ;IACzB,OAAO,CAAQ;IACf,OAAO,CAAQ;IACf,IAAI,CAAQ;IACZ,aAAa,CAAQ;IACrB,SAAS,CAAQ;IACjB,QAAQ,CAAQ;IAChB,QAAQ,CAAQ;CACjB;AAEM,SAAS,KAAK,CAAC,MAAmB,EAAE,KAAa;IACtD,MAAM,CAAC,OAAO,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,CAAC;IAClC,MAAM,CAAC,KAAK,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,CAAC;IAChC,MAAM,CAAC,UAAU,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,CAAC;IACrC,MAAM,CAAC,YAAY,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI;IAC1C,MAAM,CAAC,iBAAiB,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,CAAC;IAC5C,MAAM,CAAC,OAAO,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC;IACjC,MAAM,CAAC,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC;IAC9B,MAAM,CAAC,aAAa,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC;IACvC,MAAM,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC;IACnC,MAAM,CAAC,QAAQ,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC;IAClC,MAAM,CAAC,QAAQ,GAAG,KAAK,GAAG,CAAC;AAC7B,CAAC;AAEM,SAAS,cAAc,CAAC,MAAmB,EAAE,UAAiB;IAEnE,IAAI,SAAS,GAAG,sEAAiC,CAC/C,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,KAAK,EACZ,MAAM,CAAC,YAAY,CACpB;IAED,QAAQ,MAAM,CAAC,KAAK,EAAE;QACpB,KAAK,CAAC,CAAC;QACP;YACE,UAAU;YACV,SAAS,GAAG,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAC3F,SAAS,IAAI,MAAM,CAAC,OAAO;YAC3B,MAAK;QACP,KAAK,CAAC;YACJ,UAAU;YACV,SAAS,GAAG,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;YACrD,SAAS,IAAI,MAAM,CAAC,OAAO;YAC3B,MAAK;QACP,KAAK,CAAC;YACJ,UAAU;YACV,SAAS,GAAG,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;YACpD,SAAS,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YAC5C,MAAK;KACR;IAED,OAAO,SAAS;AAClB,CAAC;;;;;;;;;;;;;;;;;;ACzD2C;AACJ;AAUxC,aAAa;AAEb,KAAK,UAAU,OAAO,CAAC,QAAkB,EAAE,GAAW;IACpD,IAAI,CAAC,GAAG,CAAC;IACT,OAAO,GAAG,EAAE,EAAE;QACZ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,QAAQ,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,CAAC;KACrD;IACD,OAAO,CAAC;AACV,CAAC;AAED,SAAS,OAAO,CAAC,QAAsB,EAAE,IAAY;IACnD,QAAQ,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC;IACtC,QAAQ,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC;IACtC,QAAQ,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC;IACrC,QAAQ,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;AAClC,CAAC;AAED,SAAS,YAAY,CAAC,QAAuB,EAAE,MAAkB;IAC/D,IAAI,KAAK,GAAW,OAAO;IAE3B,IAAI,QAAQ,kCAA0B,EAAE;QACtC,KAAK,GAAG,YAAY;KACrB;SACI,IAAI,QAAQ,mCAA2B,EAAE;QAC5C,KAAK,GAAG,QAAQ;KACjB;SACI,IAAI,QAAQ,kCAA0B,EAAE;QAC3C,KAAK,GAAG,UAAU;KACnB;IAED,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC;IACtC,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;AAC/B,CAAC;AAED,aAAa;AAEN,KAAK,UAAU,KAAK,CAAC,QAAkB,EAAE,GAAU,EAAE,KAAY,EAAE,QAAqB;IAC7F,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,KAAK,CAAC;IACjC,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEnC,IAAI,GAAG,GAAG,QAAQ,CAAC,MAAM,EAAE,UAAsB,GAAG,OAAC;IAErD,KAAK,UAAU,KAAK;QAClB,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;IAC1B,CAAC;IAED,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE;QACjC,IAAI,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvC,IAAI,KAAK,CAAC,OAAO,KAAK,CAAC,EAAE;YACvB,6DAA6D;YAC7D,MAAM,IAAI,CAAC;SACZ;QACD,IAAI,MAAM,GAAG,CAAC,EAAE;YACd,qDAAY,CAAC,gCAAgC,0BAAC;YAC9C,OAAO,MAAM,KAAK,EAAE;SACrB;QACD,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;QAC3B,GAAG,IAAI,MAAM,GAAG,CAAC;QACjB,IAAI,GAAG,GAAG,CAAC,EAAE;YACX,qDAAY,CAAC,0BAA0B,0BAAC;YACxC,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;YACxB,OAAO,MAAM,KAAK,EAAE;SACrB;KACF;IAED,OAAO,GAAG,GAAG,YAAY,EAAE;QACzB,IAAI,IAAY;QAChB,IAAI,IAAY;QAChB,IAAI,KAAK,EAAE;YACT,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YACnC,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE;YAElC,IAAI,CAAC,IAAI,EAAE;gBACT,qDAAY,CAAC,oBAAoB,2BAAC;gBAClC,MAAK;aACN;YAED,QAAQ;YACR,MAAM,QAAQ,CAAC,UAAU,EAAE;SAC5B;aACI;YACH,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YACnC,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE;SACnC;QAED,IAAI,IAAI,KAAK,MAAM,EAAE;YACnB,QAAQ,CAAC,MAAM,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC;SAClD;aACI,IAAI,IAAI,KAAK,MAAM,EAAE;YACxB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;YAC3C,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7C,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;YAClD,QAAQ,CAAC,MAAM,GAAG,GAAG,QAAQ,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE;SAClE;aACI,IAAI,IAAI,KAAK,MAAM,IAAI,IAAI,KAAK,KAAK,EAAE;YAC1C,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;YAC3C,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7C,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;YAClD,QAAQ,CAAC,OAAO,GAAG,GAAG,QAAQ,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE;SACnE;aACI;YACH,IAAI,OAAe;YACnB,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACnB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;gBAC3C,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;gBAClD,OAAO,GAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC;aACzC;iBACI;gBACH,aAAa;gBACb,OAAO,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC;aAC1C;YAED,QAAQ,IAAI,EAAE;gBACZ,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,KAAK,GAAG,OAAO;oBACxB,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,MAAM,GAAG,OAAO;oBACzB,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,WAAW,GAAG,OAAO;oBAC9B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,IAAI,GAAG,OAAO;oBACvB,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,SAAS,GAAG,OAAO;oBAC5B,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,KAAK,GAAG,OAAO;oBACxB,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,KAAK,GAAG,OAAO;oBACxB,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,MAAM,CAAC;gBACZ,KAAK,MAAM;oBACT,QAAQ,CAAC,IAAI,GAAG,OAAO;oBACvB,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,OAAO,GAAG,OAAO;oBAC1B,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,KAAK,GAAG,OAAO;oBACxB,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,OAAO,GAAG,OAAO;oBAC1B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,QAAQ,GAAG,OAAO;oBAC3B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,SAAS,GAAG,OAAO;oBAC5B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,QAAQ,GAAG,OAAO;oBAC3B,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,SAAS,GAAG,OAAO;oBAC5B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,SAAS,GAAG,OAAO;oBAC5B,MAAK;gBACP,KAAK,MAAM,CAAC;gBACZ,KAAK,KAAK;oBACR,QAAQ,CAAC,WAAW,GAAG,OAAO;oBAC9B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,YAAY,GAAG,OAAO;oBAC/B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,SAAS,GAAG,OAAO;oBAC5B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,UAAU,GAAG,OAAO;oBAC7B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,SAAS,GAAG,OAAO;oBAC5B,MAAK;gBACP,KAAK,MAAM;oBACT,QAAQ,CAAC,QAAQ,GAAG,OAAO;oBAC3B,MAAK;gBACP;oBACE,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO;oBACxB,MAAK;aACR;SACF;QAED,GAAG,IAAI,IAAI,GAAG,YAAY;KAC3B;IAED,+CAA+C;IAC/C,IAAI,KAAK,CAAC,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,IAAI,EAAE;QAC5C,GAAG,cAAO;KACX;IAED,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;AAE1B,CAAC;AAEM,SAAS,KAAK,CAAC,QAAsB,EAAE,OAAe,EAAE,OAAc,EAAE,QAAqB;IAClG,IAAI,GAAG,GAAG,QAAQ,CAAC,MAAM,EAAE;IAC3B,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC;IAC3B,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC;IAC5B,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;IACvB,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,EAAE;IACjC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;IAEvB,MAAM,GAAG,6BAAqB;IAE9B,SAAS,SAAS,CAAC,GAAW,EAAE,GAAW;QACzC,MAAM,MAAM,GAAG,oDAAW,CAAC,GAAG,CAAC;QAE/B,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC;QACzB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACvC,QAAQ;QACR,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;QAEvB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;QACxB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED,SAAS,WAAW,CAAC,GAAW,EAAE,MAAkB;QAClD,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC;QACzB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC;QACnC,QAAQ;QACR,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;QAEvB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED,IAAI,QAAQ,CAAC,MAAM,EAAE;QACnB,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC;KACrC;IAED,IAAI,QAAQ,CAAC,KAAK,EAAE;QAClB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC;KAClC;IAED,IAAI,QAAQ,CAAC,MAAM,EAAE;QACnB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC;KACnC;IAED,IAAI,QAAQ,CAAC,WAAW,EAAE;QACxB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,WAAW,CAAC;KACxC;IAED,IAAI,QAAQ,CAAC,IAAI,EAAE;QACjB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC;KACjC;IACD,IAAI,QAAQ,CAAC,SAAS,EAAE;QACtB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;KACtC;IAED,IAAI,QAAQ,CAAC,KAAK,EAAE;QAClB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC;KAClC;IAED,IAAI,QAAQ,CAAC,KAAK,EAAE;QAClB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC;KAClC;IAED,IAAI,QAAQ,CAAC,IAAI,EAAE;QACjB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC;KACjC;IAED,IAAI,QAAQ,CAAC,OAAO,EAAE;QACpB,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO;QAC9B,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACtB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;SACjD;QACD,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC;KAC3B;IAED,IAAI,QAAQ,CAAC,MAAM,EAAE;QACnB,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM;QAC5B,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACrB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SAC9C;QACD,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC;KAC1B;IAED,IAAI,QAAQ,CAAC,KAAK,EAAE;QAClB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC;KACvC;IAED,IAAI,QAAQ,CAAC,OAAO,EAAE;QACpB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,OAAO,CAAC;KACpC;IAED,IAAI,QAAQ,CAAC,QAAQ,EAAE;QACrB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC;KACrC;IAED,IAAI,QAAQ,CAAC,SAAS,EAAE;QACtB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;KACtC;IAED,IAAI,QAAQ,CAAC,QAAQ,EAAE;QACrB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC;KACrC;IAED,IAAI,QAAQ,CAAC,SAAS,EAAE;QACtB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;KACtC;IAED,IAAI,QAAQ,CAAC,SAAS,EAAE;QACtB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;KACtC;IAED,IAAI,QAAQ,CAAC,WAAW,EAAE;QACxB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,WAAW,CAAC;KACxC;IAED,IAAI,QAAQ,CAAC,YAAY,EAAE;QACzB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,YAAY,CAAC;KACzC;IAED,IAAI,QAAQ,CAAC,SAAS,EAAE;QACtB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;KACtC;IAED,IAAI,QAAQ,CAAC,UAAU,EAAE;QACvB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,UAAU,CAAC;KACvC;IAED,IAAI,QAAQ,CAAC,SAAS,EAAE;QACtB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;KACtC;IAED,IAAI,QAAQ,CAAC,QAAQ,EAAE;QACrB,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC;KACrC;IAED,IAAI,OAAO,GAAG,EAAE,EAAE;QAChB,OAAO,GAAG,EAAE;KACb;IAED,MAAM,GAAG,WAAsB,QAAQ,CAAC,MAAM,EAAE,GAAG,GAAG,qBAAC;IAEvD,IAAI,OAAO,GAAG,SAAS,GAAG,GAAG,EAAE;QAC7B,OAAO,GAAG,SAAS,GAAG,GAAG;KAC1B;IAED,QAAQ,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAErD,GAAG,GAAG,QAAQ,CAAC,MAAM,EAAE;IAEvB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;IACtB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;AACpB,CAAC;;;;;;;;;;;;;;;;AC9YD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASI,MAAM,cAAc,GAAG,GAAG;AAE1B,MAAM,UAAU,GAAG,GAAG;AAEtB,MAAM,SAAS,GAAG,GAAG;;;;;;;;;;;;;;;;ACpCrB,SAAS,GAAG,CAAC,CAAS;IAC3B,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC;AAEM,SAAS,GAAG,CAAC,CAAS,EAAE,CAAS;IACtC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AAEM,SAAS,GAAG,CAAC,CAAS,EAAE,CAAS;IACtC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC","sources":["webpack://AVTranscoder/./src/avformat/formats/OMp3Format.ts","webpack://AVTranscoder/./src/avformat/formats/mp3/frameHeader.ts","webpack://AVTranscoder/./src/avformat/formats/mp3/id3v2.ts","webpack://AVTranscoder/./src/avformat/formats/mp3/mp3.ts","webpack://AVTranscoder/./src/common/util/bigint.ts"],"sourcesContent":["/*\r\n * libmedia lvf encoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVOFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport OFormat from './OFormat'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVFormat } from '../avformat'\r\nimport * as logger from 'common/util/logger'\r\nimport { Mp3FormatOptions, Mp3MetaData } from './mp3/type'\r\nimport * as errorType from 'avutil/error'\r\nimport * as mp3 from '../codecs/mp3'\r\nimport { INT32_MAX } from 'avutil/constant'\r\nimport * as bigint from 'common/util/bigint'\r\nimport { FrameHeader } from './mp3/frameHeader'\r\nimport * as frameHeader from './mp3/frameHeader'\r\nimport { ID3V1_SIZE, XING_SIZE, XING_TOC_COUNT } from './mp3/mp3'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport * as id3v2 from './mp3/id3v2'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as text from 'common/util/text'\r\nimport * as object from 'common/util/object'\r\n\r\nconst XING_NUM_BAGS = 400\r\n\r\nexport interface Mp3Context {\r\n  size: uint32\r\n  frames: uint32\r\n  seen: uint32\r\n  want: uint32\r\n  bag: uint32[]\r\n  pos: uint32\r\n\r\n  initialBitrate: int32\r\n  hasVariableBitrate: boolean\r\n  padding: int32\r\n  delay: int32\r\n\r\n  frameHeader: FrameHeader,\r\n  xingOffset: int32\r\n  xingFrameSize: int32\r\n  xingFrameOffset: int64\r\n  xingFramePos: int64\r\n  audioSize: int32\r\n\r\n  id3SizePos: int64\r\n}\r\n\r\nconst defaultMp3FormatOptions: Mp3FormatOptions = {\r\n  id3v2Version: 4,\r\n  hasID3v1: false,\r\n  hasXing: true\r\n}\r\n\r\nexport default class OMp3Format extends OFormat {\r\n\r\n  public type: AVFormat = AVFormat.MP3\r\n\r\n  private options: Mp3FormatOptions\r\n\r\n  private context: Mp3Context\r\n\r\n  private xingWriter: BufferWriter\r\n\r\n  constructor(options: Mp3FormatOptions = {}) {\r\n    super()\r\n    this.options = object.extend({}, defaultMp3FormatOptions, options)\r\n  }\r\n\r\n  public init(formatContext: AVOFormatContext): number {\r\n    formatContext.ioWriter.setEndian(true)\r\n\r\n    this.context = {\r\n      size: 0,\r\n      frames: 0,\r\n      seen: 0,\r\n      want: 1,\r\n      bag: [],\r\n      pos: 0,\r\n\r\n      initialBitrate: 0,\r\n      hasVariableBitrate: false,\r\n      padding: 0,\r\n      delay: 0,\r\n\r\n      frameHeader: new FrameHeader(),\r\n      xingOffset: -1,\r\n      xingFrameSize: 0,\r\n      xingFrameOffset: 0n,\r\n      xingFramePos: 0n,\r\n      audioSize: 0,\r\n\r\n      id3SizePos: 0n\r\n    }\r\n\r\n    this.xingWriter = new BufferWriter(new Uint8Array(5000))\r\n\r\n    const stream = formatContext.streams.find((stream) => {\r\n      return stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3\r\n    })\r\n\r\n    if (!stream) {\r\n      logger.error('can not found stream with mp3 codec')\r\n      return errorType.INVALID_ARGUMENT\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private writeXingTag(formatContext: AVOFormatContext) {\r\n    if (!this.options.hasXing) {\r\n      return\r\n    }\r\n\r\n    const stream = formatContext.streams.find((stream) => {\r\n      return stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3\r\n    })\r\n\r\n    let rateIdx = -1\r\n    let channels = 0\r\n    let bitrateIdx = -1\r\n    let bestBitrateIdx = -1\r\n    let bestBitrateError = static_cast<int64>(INT32_MAX)\r\n    let ver = 0\r\n    let bytesNeeded = 0\r\n\r\n    const freqTab = [44100, 48000, 32000]\r\n\r\n    for (let i = 0; i < freqTab.length; i++) {\r\n      const freq = freqTab[i]\r\n      if (stream.codecpar.sampleRate === freq) {\r\n        // MPEG 1\r\n        ver = 0x3\r\n      }\r\n      else if (stream.codecpar.sampleRate === freq / 2) {\r\n        // MPEG 2\r\n        ver = 0x2\r\n      }\r\n      else if (stream.codecpar.sampleRate === freq / 4) {\r\n        // MPEG 2.5\r\n        ver = 0x0\r\n      }\r\n      else {\r\n        continue\r\n      }\r\n      rateIdx = i\r\n    }\r\n    if (rateIdx === freqTab.length) {\r\n      logger.warn('unsupported sample rate, not writing Xing header.')\r\n      return\r\n    }\r\n\r\n    switch (stream.codecpar.chLayout.nbChannels) {\r\n      case 1:\r\n        // MPA_MONO\r\n        channels = 3\r\n        break\r\n      case 2:\r\n        // MPA_STEREO\r\n        channels = 0\r\n        break\r\n      default:\r\n        logger.warn('unsupported number of channels, not writing Xing header.')\r\n        return\r\n    }\r\n\r\n    // sync\r\n    let header = 0xff << 24\r\n    // sync/audio-version/layer 3/no crc*/\r\n    header |= (0x7 << 5 | ver << 3 | 0x1 << 1 | 0x1) << 16\r\n    header |= (rateIdx << 2) << 8\r\n    header |= channels << 6\r\n\r\n    for (bitrateIdx = 1; bitrateIdx < 15; bitrateIdx++) {\r\n      let bitRate = static_cast<int64>(1000 * mp3.getBitRateByVersionLayerIndex(ver, 3 - 1, bitrateIdx))\r\n      let error = bigint.abs(bitRate - stream.codecpar.bitRate)\r\n\r\n      if (error < bestBitrateError) {\r\n        bestBitrateError = error\r\n        bestBitrateIdx = bitrateIdx\r\n      }\r\n    }\r\n\r\n    for (bitrateIdx = bestBitrateIdx; ; bitrateIdx++) {\r\n      let mask = bitrateIdx << (4 + 8)\r\n      if (15 == bitrateIdx) {\r\n        return\r\n      }\r\n      header |= mask\r\n\r\n      frameHeader.parse(this.context.frameHeader, header)\r\n\r\n      const xingOffsetTable: number[][] = [[0, 9, 17], [0, 0, 0], [0, 9, 17], [0, 17, 32]]\r\n\r\n      this.context.xingOffset = xingOffsetTable[this.context.frameHeader.version][stream.codecpar.chLayout.nbChannels] + 4\r\n      bytesNeeded = this.context.xingOffset + XING_SIZE\r\n\r\n      if (bytesNeeded <= frameHeader.getFrameLength(this.context.frameHeader, stream.codecpar.sampleRate)) {\r\n        break\r\n      }\r\n\r\n      header &= ~mask\r\n    }\r\n\r\n    this.xingWriter.writeUint32(header)\r\n    this.xingWriter.writeBuffer(new Uint8Array(this.context.xingOffset - 4).fill(0))\r\n    this.xingWriter.writeString('Xing')\r\n    // frames / size / TOC / vbr scale\r\n    this.xingWriter.writeUint32(0x01 | 0x02 | 0x04 | 0x08)\r\n\r\n    this.context.size = frameHeader.getFrameLength(this.context.frameHeader, stream.codecpar.sampleRate)\r\n    this.context.want = 1\r\n    this.context.seen = 0\r\n    this.context.pos = 0\r\n    // frames\r\n    this.xingWriter.writeUint32(0)\r\n    // size\r\n    this.xingWriter.writeUint32(0)\r\n\r\n    for (let i = 0; i < XING_TOC_COUNT; i++) {\r\n      this.xingWriter.writeUint8((255 * i / XING_TOC_COUNT) >>> 0)\r\n    }\r\n\r\n    // vbr quality\r\n    // we write it, because some (broken) tools always expect it to be present\r\n    this.xingWriter.writeUint32(0)\r\n\r\n    const metadata = stream.metadata as Mp3MetaData\r\n\r\n    if (metadata?.encoder) {\r\n      const buffer = text.encode(metadata.encoder)\r\n      this.xingWriter.writeBuffer(buffer.subarray(0, 9))\r\n    }\r\n    else {\r\n      this.xingWriter.writeString('Lavf')\r\n      this.xingWriter.writeBuffer(new Uint8Array(5).fill(0))\r\n    }\r\n\r\n    // tag revision 0 / unknown vbr method\r\n    this.xingWriter.writeUint8(0)\r\n\r\n    // unknown lowpass filter value\r\n    this.xingWriter.writeUint8(0)\r\n\r\n    // empty replaygain fields\r\n    this.xingWriter.writeBuffer(new Uint8Array(8).fill(0))\r\n\r\n    // unknown encoding flags\r\n    this.xingWriter.writeUint8(0)\r\n    // unknown abr/minimal bitrate\r\n    this.xingWriter.writeUint8(0)\r\n    // empty encoder delay/padding\r\n    this.xingWriter.writeUint24(0)\r\n\r\n    // misc\r\n    this.xingWriter.writeUint8(0)\r\n    // mp3gain\r\n    this.xingWriter.writeUint8(0)\r\n    // preset\r\n    this.xingWriter.writeUint16(0)\r\n\r\n    // music length\r\n    this.xingWriter.writeUint32(0)\r\n    // music crc\r\n    this.xingWriter.writeUint16(0)\r\n    // tag crc\r\n    this.xingWriter.writeUint16(0)\r\n\r\n    this.xingWriter.writeBuffer(new Uint8Array(this.context.size - bytesNeeded).fill(0))\r\n\r\n    this.context.xingFrameSize = this.xingWriter.getPos()\r\n\r\n    this.context.xingFrameOffset = formatContext.ioWriter.getPos()\r\n\r\n    formatContext.ioWriter.writeBuffer(this.xingWriter.getWroteBuffer())\r\n\r\n    this.context.audioSize = this.context.xingFrameSize\r\n  }\r\n\r\n  private xingAddFrame(avpacket: pointer<AVPacket>) {\r\n    this.context.frames++\r\n    this.context.seen++\r\n    this.context.size += avpacket.size\r\n\r\n    if (this.context.want === this.context.seen) {\r\n      this.context.bag[this.context.pos] = this.context.size\r\n\r\n      if (++this.context.pos === XING_NUM_BAGS) {\r\n        /* shrink table to half size by throwing away each second bag. */\r\n        for (let i = 1; i < XING_NUM_BAGS; i += 2) {\r\n          this.context.bag[i >> 1] = this.context.bag[i]\r\n        }\r\n        /* double wanted amount per bag. */\r\n        this.context.want *= 2\r\n        /* adjust current position to half of table size. */\r\n        this.context.pos = XING_NUM_BAGS >> 1\r\n      }\r\n      this.context.seen = 0\r\n    }\r\n  }\r\n\r\n  private updateXing(formatContext: AVOFormatContext) {\r\n    if (this.context.hasVariableBitrate) {\r\n      this.xingWriter.seek(this.context.xingOffset)\r\n      this.xingWriter.writeString('Info')\r\n    }\r\n    this.xingWriter.seek(this.context.xingOffset + 8)\r\n    this.xingWriter.writeUint32(this.context.frames)\r\n    this.xingWriter.writeUint32(this.context.size)\r\n\r\n    this.xingWriter.seek(this.context.xingFrameSize)\r\n\r\n    const toc = this.xingWriter.getWroteBuffer().subarray(this.context.xingOffset + 16)\r\n    toc[0] = 0\r\n    for (let i = 1; i < XING_TOC_COUNT; i++) {\r\n      let j = (i * this.context.pos / XING_TOC_COUNT) >>> 0\r\n      const seekPoint = (256 * this.context.bag[j] / this.context.size) >>> 0\r\n      toc[i] = Math.min(seekPoint, 255)\r\n    }\r\n\r\n    const now = formatContext.ioWriter.getPos()\r\n    formatContext.ioWriter.seek(this.context.xingFrameOffset)\r\n    formatContext.ioWriter.writeBuffer(this.xingWriter.getWroteBuffer())\r\n    formatContext.ioWriter.seek(now)\r\n  }\r\n\r\n  public writeHeader(formatContext: AVOFormatContext): number {\r\n\r\n    const stream = formatContext.streams.find((stream) => {\r\n      return stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3\r\n    })\r\n\r\n    if (this.options.id3v2Version) {\r\n      id3v2.write(formatContext.ioWriter, this.options.id3v2Version, formatContext.metadataHeaderPadding, stream.metadata)\r\n    }\r\n\r\n    if (this.options.hasXing) {\r\n      this.writeXingTag(formatContext)\r\n    }\r\n\r\n    return 0\r\n  }\r\n  public writeAVPacket(formatContext: AVOFormatContext, avpacket: pointer<AVPacket>): number {\r\n\r\n    if (!avpacket.size) {\r\n      logger.warn(`packet\\'s size is 0: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    const stream = formatContext.getStreamByIndex(avpacket.streamIndex)\r\n\r\n    if (!stream) {\r\n      logger.warn(`can not found the stream width the packet\\'s streamIndex: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    if (stream.codecpar.codecId !== AVCodecID.AV_CODEC_ID_MP3) {\r\n      logger.warn(`packet\\'s codecId is not mp3: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    if (avpacket.data && avpacket.size > 4) {\r\n      frameHeader.parse(this.context.frameHeader, accessof(reinterpret_cast<pointer<uint32>>(avpacket.data)))\r\n\r\n      const bitRate = mp3.getBitRateByVersionLayerIndex(\r\n        this.context.frameHeader.version,\r\n        this.context.frameHeader.layer,\r\n        this.context.frameHeader.bitrateIndex\r\n      )\r\n      if (!this.context.initialBitrate) {\r\n        this.context.initialBitrate = bitRate\r\n      }\r\n      else if (bitRate !== this.context.initialBitrate) {\r\n        this.context.hasVariableBitrate = true\r\n      }\r\n\r\n      this.xingAddFrame(avpacket)\r\n\r\n      formatContext.ioWriter.writeBuffer(mapUint8Array(avpacket.data, avpacket.size))\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public writeTrailer(formatContext: AVOFormatContext): number {\r\n\r\n    if (this.options.hasID3v1) {\r\n\r\n      const stream = formatContext.streams.find((stream) => {\r\n        return stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3\r\n      })\r\n\r\n      const metadata = stream.metadata as Mp3MetaData\r\n\r\n      const id1Buffer = new Uint8Array(ID3V1_SIZE)\r\n      const id1Writer = new BufferWriter(id1Buffer)\r\n      id1Writer.writeString('TAG')\r\n\r\n      function writeText(str: string) {\r\n        const buffer = text.encode(str)\r\n        id1Writer.writeBuffer(buffer.subarray(0, 30))\r\n        if (buffer.length < 30) {\r\n          id1Writer.skip(30 - buffer.length)\r\n        }\r\n      }\r\n\r\n      if (metadata.title) {\r\n        writeText(metadata.title)\r\n      }\r\n      else {\r\n        id1Writer.skip(30)\r\n      }\r\n      if (metadata.artist) {\r\n        writeText(metadata.artist)\r\n      }\r\n      else {\r\n        id1Writer.skip(30)\r\n      }\r\n      if (metadata.album) {\r\n        writeText(metadata.album)\r\n      }\r\n      else {\r\n        id1Writer.skip(30)\r\n      }\r\n\r\n      id1Buffer[127] = 0xff\r\n      if (metadata.genre) {\r\n        id1Buffer[127] = +metadata.genre\r\n      }\r\n\r\n      formatContext.ioWriter.writeBuffer(id1Buffer)\r\n    }\r\n\r\n    if (this.options.hasXing) {\r\n      this.updateXing(formatContext)\r\n    }\r\n\r\n    formatContext.ioWriter.flush()\r\n\r\n    return 0\r\n  }\r\n\r\n  public flush(formatContext: AVOFormatContext): number {\r\n    formatContext.ioWriter.flush()\r\n    return 0\r\n  }\r\n\r\n}\r\n","/*\r\n * libmedia mp3 FrameHeader utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mp3 from '../../codecs/mp3'\r\n\r\nexport class FrameHeader {\r\n  version: uint32\r\n  layer: uint32\r\n  protection: uint32\r\n  bitrateIndex: uint32\r\n  samplingFrequency: uint32\r\n  padding: uint32\r\n  private: uint32\r\n  mode: uint32\r\n  modeExtension: uint32\r\n  copyright: uint32\r\n  original: uint32\r\n  emphasis: uint32\r\n}\r\n\r\nexport function parse(header: FrameHeader, value: uint32) {\r\n  header.version = (value >> 19) & 3\r\n  header.layer = (value >> 17) & 3\r\n  header.protection = (value >> 16) & 1\r\n  header.bitrateIndex = (value >> 12) & 0x0f\r\n  header.samplingFrequency = (value >> 10) & 3\r\n  header.padding = (value >> 9) & 1\r\n  header.mode = (value >> 6) & 3\r\n  header.modeExtension = (value >> 4) & 3\r\n  header.copyright = (value >> 3) & 1\r\n  header.original = (value >> 2) & 1\r\n  header.emphasis = value & 3\r\n}\r\n\r\nexport function getFrameLength(header: FrameHeader, sampleRate: int32) {\r\n\r\n  let frameSize = mp3.getBitRateByVersionLayerIndex(\r\n    header.version,\r\n    header.layer,\r\n    header.bitrateIndex\r\n  )\r\n\r\n  switch (header.layer) {\r\n    case 1:\r\n    default:\r\n      // Layer 3\r\n      frameSize = ((frameSize * 144000) / (sampleRate << ((header.version === 3) ? 0 : 1))) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 2:\r\n      // Layer 2\r\n      frameSize = ((frameSize * 144000) / sampleRate) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 3:\r\n      // Layer 1\r\n      frameSize = ((frameSize * 12000) / sampleRate) >>> 0\r\n      frameSize = (frameSize + header.padding) * 4\r\n      break\r\n  }\r\n\r\n  return frameSize\r\n}\r\n","/*\r\n * libmedia mp3 id3v2 utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { ID3V2, Mp3MetaData } from './type'\r\nimport * as logger from 'common/util/logger'\r\nimport * as text from 'common/util/text'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nconst enum ID3v2Encoding {\r\n  ISO8859,\r\n  UTF16BOM,\r\n  UTF16BE,\r\n  UTF8\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nasync function getSize(ioReader: IOReader, len: number) {\r\n  let v = 0\r\n  while (len--) {\r\n    v = (v << 7) + ((await ioReader.readUint8()) & 0x7F)\r\n  }\r\n  return v\r\n}\r\n\r\nfunction putSize(ioWriter: IOWriterSync, size: number) {\r\n  ioWriter.writeUint8(size >> 21 & 0x7f)\r\n  ioWriter.writeUint8(size >> 14 & 0x7f)\r\n  ioWriter.writeUint8(size >> 7 & 0x7f)\r\n  ioWriter.writeUint8(size & 0x7f)\r\n}\r\n\r\nfunction decodeString(encoding: ID3v2Encoding, buffer: Uint8Array) {\r\n  let label: string = 'utf-8'\r\n\r\n  if (encoding === ID3v2Encoding.ISO8859) {\r\n    label = 'iso-8859-1'\r\n  }\r\n  else if (encoding === ID3v2Encoding.UTF16BOM) {\r\n    label = 'utf-16'\r\n  }\r\n  else if (encoding === ID3v2Encoding.UTF16BE) {\r\n    label = 'utf-16be'\r\n  }\r\n\r\n  const decoder = new TextDecoder(label)\r\n  return decoder.decode(buffer)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function parse(ioReader: IOReader, len: int32, id3v2: ID3V2, metadata: Mp3MetaData) {\r\n  const isV34 = id3v2.version !== 2\r\n  const tagHeaderLen = isV34 ? 10 : 6\r\n\r\n  let end = ioReader.getPos() + static_cast<int64>(len)\r\n\r\n  async function error() {\r\n    await ioReader.seek(end)\r\n  }\r\n\r\n  if (isV34 && (id3v2.flags & 0x40)) {\r\n    let extLen = await getSize(ioReader, 4)\r\n    if (id3v2.version === 4) {\r\n      // in v2.4 the length includes the length field we just read.\r\n      extLen -= 4\r\n    }\r\n    if (extLen < 0) {\r\n      logger.error('invalid extended header length')\r\n      return await error()\r\n    }\r\n    await ioReader.skip(extLen)\r\n    len -= extLen + 4\r\n    if (len < 0) {\r\n      logger.error('extended header too long')\r\n      await ioReader.seek(end)\r\n      return await error()\r\n    }\r\n  }\r\n\r\n  while (len > tagHeaderLen) {\r\n    let type: string\r\n    let size: number\r\n    if (isV34) {\r\n      type = await ioReader.readString(4)\r\n      size = await ioReader.readUint32()\r\n\r\n      if (!size) {\r\n        logger.error('invalid frame size')\r\n        break\r\n      }\r\n\r\n      // flags\r\n      await ioReader.readUint16()\r\n    }\r\n    else {\r\n      type = await ioReader.readString(3)\r\n      size = await ioReader.readUint24()\r\n    }\r\n\r\n    if (type === 'APIC') {\r\n      metadata.poster = await ioReader.readBuffer(size)\r\n    }\r\n    else if (type === 'USLT') {\r\n      const encoding = await ioReader.readUint8()\r\n      const language = await ioReader.readString(3)\r\n      const buffer = await ioReader.readBuffer(size - 4)\r\n      metadata.lyrics = `${language} ${decodeString(encoding, buffer)}`\r\n    }\r\n    else if (type === 'COMM' || type === 'COM') {\r\n      const encoding = await ioReader.readUint8()\r\n      const language = await ioReader.readString(3)\r\n      const buffer = await ioReader.readBuffer(size - 4)\r\n      metadata.comment = `${language} ${decodeString(encoding, buffer)}`\r\n    }\r\n    else {\r\n      let content: string\r\n      if (type[0] === 'T') {\r\n        const encoding = await ioReader.readUint8()\r\n        const buffer = await ioReader.readBuffer(size - 1)\r\n        content = decodeString(encoding, buffer)\r\n      }\r\n      else {\r\n        // @ts-ignore\r\n        content = await ioReader.readBuffer(size)\r\n      }\r\n\r\n      switch (type) {\r\n        case 'TIT2':\r\n        case 'TT2':\r\n          metadata.title = content\r\n          break\r\n        case 'TPE1':\r\n        case 'TP1':\r\n          metadata.artist = content\r\n          break\r\n        case 'TPE2':\r\n        case 'TP2':\r\n          metadata.albumArtist = content\r\n          break\r\n        case 'TPOS':\r\n          metadata.disc = content\r\n          break\r\n        case 'TCOP':\r\n          metadata.copyright = content\r\n          break\r\n        case 'TALB':\r\n        case 'TAL':\r\n          metadata.album = content\r\n          break\r\n        case 'TRCK':\r\n        case 'TRK':\r\n          metadata.track = content\r\n          break\r\n        case 'TYER':\r\n        case 'TDRL':\r\n        case 'TDRC':\r\n          metadata.date = content\r\n          break\r\n        case 'COMM':\r\n        case 'COM':\r\n          metadata.comment = content\r\n          break\r\n        case 'TCON':\r\n        case 'TCO':\r\n          metadata.genre = content\r\n          break\r\n        case 'TSSE':\r\n        case 'TEN':\r\n          metadata.encoder = content\r\n          break\r\n        case 'TCOM':\r\n          metadata.composer = content\r\n          break\r\n        case 'TENC':\r\n          metadata.encodedBy = content\r\n          break\r\n        case 'TLAN':\r\n          metadata.language = content\r\n          break\r\n        case 'TPE3':\r\n        case 'TP3':\r\n          metadata.performer = content\r\n          break\r\n        case 'TPUB':\r\n          metadata.publisher = content\r\n          break\r\n        case 'TCMP':\r\n        case 'TCP':\r\n          metadata.compilation = content\r\n          break\r\n        case 'TDEN':\r\n          metadata.creationTime = content\r\n          break\r\n        case 'TSOA':\r\n          metadata.albumSort = content\r\n          break\r\n        case 'TSOP':\r\n          metadata.artistSort = content\r\n          break\r\n        case 'TSOT':\r\n          metadata.titleSort = content\r\n          break\r\n        case 'TIT1':\r\n          metadata.grouping = content\r\n          break\r\n        default:\r\n          metadata[type] = content\r\n          break\r\n      }\r\n    }\r\n\r\n    len -= size + tagHeaderLen\r\n  }\r\n\r\n  // footer preset, always 10 bytes, skip over it\r\n  if (id3v2.version == 4 && id3v2.flags & 0x10) {\r\n    end += 10n\r\n  }\r\n\r\n  await ioReader.seek(end)\r\n\r\n}\r\n\r\nexport function write(ioWriter: IOWriterSync, version: number, padding: int32, metadata: Mp3MetaData) {\r\n  let now = ioWriter.getPos()\r\n  ioWriter.writeString('ID3')\r\n  ioWriter.writeUint8(version)\r\n  ioWriter.writeUint16(0)\r\n  const sizePos = ioWriter.getPos()\r\n  ioWriter.writeUint32(0)\r\n\r\n  const enc = ID3v2Encoding.UTF8\r\n\r\n  function writeText(key: string, str: string) {\r\n    const buffer = text.encode(str)\r\n\r\n    ioWriter.writeString(key)\r\n    ioWriter.writeUint32(buffer.length + 1)\r\n    // flags\r\n    ioWriter.writeUint16(0)\r\n\r\n    ioWriter.writeUint8(enc)\r\n    ioWriter.writeBuffer(buffer)\r\n  }\r\n\r\n  function writeBuffer(key: string, buffer: Uint8Array) {\r\n    ioWriter.writeString(key)\r\n    ioWriter.writeUint32(buffer.length)\r\n    // flags\r\n    ioWriter.writeUint16(0)\r\n\r\n    ioWriter.writeBuffer(buffer)\r\n  }\r\n\r\n  if (metadata.poster) {\r\n    writeBuffer('APIC', metadata.poster)\r\n  }\r\n\r\n  if (metadata.title) {\r\n    writeText('TIT2', metadata.title)\r\n  }\r\n\r\n  if (metadata.artist) {\r\n    writeText('TPE1', metadata.artist)\r\n  }\r\n\r\n  if (metadata.albumArtist) {\r\n    writeText('TPE2', metadata.albumArtist)\r\n  }\r\n\r\n  if (metadata.disc) {\r\n    writeText('TPOS', metadata.disc)\r\n  }\r\n  if (metadata.copyright) {\r\n    writeText('TCOP', metadata.copyright)\r\n  }\r\n\r\n  if (metadata.album) {\r\n    writeText('TALB', metadata.album)\r\n  }\r\n\r\n  if (metadata.track) {\r\n    writeText('TRCK', metadata.track)\r\n  }\r\n\r\n  if (metadata.date) {\r\n    writeText('TDRC', metadata.date)\r\n  }\r\n\r\n  if (metadata.comment) {\r\n    let comment = metadata.comment\r\n    if (comment[3] === ' ') {\r\n      comment = comment.slice(0, 3) + comment.slice(4)\r\n    }\r\n    writeText('COMM', comment)\r\n  }\r\n\r\n  if (metadata.lyrics) {\r\n    let lyrics = metadata.lyrics\r\n    if (lyrics[3] === ' ') {\r\n      lyrics = lyrics.slice(0, 3) + lyrics.slice(4)\r\n    }\r\n    writeText('USLT', lyrics)\r\n  }\r\n\r\n  if (metadata.genre) {\r\n    writeText('TCON', metadata.genre + '')\r\n  }\r\n\r\n  if (metadata.encoder) {\r\n    writeText('TSSE', metadata.encoder)\r\n  }\r\n\r\n  if (metadata.composer) {\r\n    writeText('TCOM', metadata.composer)\r\n  }\r\n\r\n  if (metadata.encodedBy) {\r\n    writeText('TENC', metadata.encodedBy)\r\n  }\r\n\r\n  if (metadata.language) {\r\n    writeText('TLAN', metadata.language)\r\n  }\r\n\r\n  if (metadata.performer) {\r\n    writeText('TPE3', metadata.performer)\r\n  }\r\n\r\n  if (metadata.publisher) {\r\n    writeText('TPUB', metadata.publisher)\r\n  }\r\n\r\n  if (metadata.compilation) {\r\n    writeText('TCMP', metadata.compilation)\r\n  }\r\n\r\n  if (metadata.creationTime) {\r\n    writeText('TDEN', metadata.creationTime)\r\n  }\r\n\r\n  if (metadata.albumSort) {\r\n    writeText('TSOA', metadata.albumSort)\r\n  }\r\n\r\n  if (metadata.artistSort) {\r\n    writeText('TSOP', metadata.artistSort)\r\n  }\r\n\r\n  if (metadata.titleSort) {\r\n    writeText('TSOT', metadata.titleSort)\r\n  }\r\n\r\n  if (metadata.grouping) {\r\n    writeText('TIT1', metadata.grouping)\r\n  }\r\n\r\n  if (padding < 10) {\r\n    padding = 10\r\n  }\r\n\r\n  const len = static_cast<int32>(ioWriter.getPos() - now)\r\n\r\n  if (padding > 268435455 - len) {\r\n    padding = 268435455 - len\r\n  }\r\n\r\n  ioWriter.writeBuffer(new Uint8Array(padding).fill(0))\r\n\r\n  now = ioWriter.getPos()\r\n\r\n  ioWriter.seek(sizePos)\r\n  putSize(ioWriter, len)\r\n  ioWriter.seek(now)\r\n}\r\n","/*\r\n * libmedia mp3 utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport const enum XingFlag {\r\n  FRAMES = 0x01,\r\n  SIZE = 0x02,\r\n  TOC = 0x04,\r\n  QSCALE = 0x08\r\n}\r\n\r\nexport const XING_TOC_COUNT = 100\r\n\r\nexport const ID3V1_SIZE = 128\r\n\r\nexport const XING_SIZE = 156\r\n","export function abs(a: bigint) {\r\n  return a > 0 ? a : -a\r\n}\r\n\r\nexport function max(a: bigint, b: bigint) {\r\n  return a > b ? a : b\r\n}\r\n\r\nexport function min(a: bigint, b: bigint) {\r\n  return a > b ? b : a\r\n}\r\n"],"names":[],"sourceRoot":""}