{"version":3,"file":"src_avformat_formats_OMatroskaFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/formats/OMatroskaFormat.ts","webpack://AVTranscoder/./src/avformat/formats/matroska/matroska.ts","webpack://AVTranscoder/./src/avformat/formats/matroska/omatroska.ts","webpack://AVTranscoder/./src/avutil/util/crypto.ts","webpack://AVTranscoder/./src/avutil/util/pixel.ts","webpack://AVTranscoder/./src/common/math/align.ts"],"sourcesContent":["/*\r\n * libmedia matroska encoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVOFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport OFormat from './OFormat'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { AVFormat } from '../avformat'\r\nimport * as logger from 'common/util/logger'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { getAVPacketData } from 'avutil/util/avpacket'\r\nimport * as object from 'common/util/object'\r\nimport { OMatroskaContext, TrackEntry } from './matroska/type'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport * as omatroska from './matroska/omatroska'\r\nimport { EBMLId, MATROSKATrackType, MkvTag2CodecId, WebmTag2CodecId } from './matroska/matroska'\r\nimport * as crypto from 'avutil/util/crypto'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport { chromaLocation2Pos } from 'avutil/util/pixel'\r\nimport { AV_MILLI_TIME_BASE_Q } from 'avutil/constant'\r\nimport * as string from 'common/util/string'\r\nimport AVStream from '../AVStream'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\n\r\nexport interface OMatroskaFormatOptions {\r\n  isLive?: boolean\r\n  docType?: string\r\n}\r\n\r\nconst defaultOMatroskaFormatOptions: OMatroskaFormatOptions = {\r\n  isLive: false,\r\n  docType: 'matroska'\r\n}\r\n\r\nfunction formatTimestamp(milliseconds: int64) {\r\n  const hours = milliseconds / BigInt(1000 * 60 * 60)\r\n  const remainingMilliseconds = milliseconds % BigInt(1000 * 60 * 60)\r\n\r\n  const minutes = remainingMilliseconds / BigInt(1000 * 60)\r\n  const remainingMillisecondsAfterMinutes = remainingMilliseconds % BigInt(1000 * 60)\r\n\r\n  const seconds = remainingMillisecondsAfterMinutes / 1000n\r\n\r\n  const ms = remainingMillisecondsAfterMinutes % 1000n\r\n\r\n  return string.format(\r\n    '%02d:%02d:%02d.%03d000000\\x00\\x00',\r\n    static_cast<int32>(hours),\r\n    static_cast<int32>(minutes),\r\n    static_cast<int32>(seconds),\r\n    static_cast<int32>(ms)\r\n  )\r\n}\r\n\r\nexport default class OMatroskaFormat extends OFormat {\r\n\r\n  public type: AVFormat = AVFormat.MATROSKA\r\n\r\n  private options: OMatroskaFormatOptions\r\n\r\n  private context: OMatroskaContext\r\n\r\n  private random: Uint8Array\r\n  private randomView: DataView\r\n\r\n  constructor(options: OMatroskaFormatOptions = {}) {\r\n    super()\r\n    this.options = object.extend({}, defaultOMatroskaFormatOptions, options)\r\n\r\n    this.random = new Uint8Array(8)\r\n    this.randomView = new DataView(this.random.buffer)\r\n  }\r\n\r\n  public init(formatContext: AVOFormatContext): number {\r\n    formatContext.ioWriter.setEndian(false)\r\n\r\n    const context: OMatroskaContext = {\r\n      isLive: this.options.isLive,\r\n      segmentStart: -1n,\r\n      seekHeadEnd: -1n,\r\n      header: {\r\n        version: 1,\r\n        readVersion: 1,\r\n        maxIdLength: 4,\r\n        maxSizeLength: 8,\r\n        docType: this.options.docType,\r\n        docTypeVersion: 4,\r\n        docTypeReadVersion: 2\r\n      },\r\n      seekHead: {\r\n        entry: []\r\n      },\r\n      info: {\r\n        muxingApp: defined(VERSION),\r\n        writingApp: defined(VERSION),\r\n        timestampScale: 1000000,\r\n        duration: 0,\r\n        segmentUUID: -1n\r\n      },\r\n      tracks: {\r\n        entry: []\r\n      },\r\n      attachments: {\r\n        entry: []\r\n      },\r\n      chapters: {\r\n        entry: []\r\n      },\r\n      cues: {\r\n        entry: []\r\n      },\r\n      tags: {\r\n        entry: [\r\n          {\r\n            tag: {\r\n              name: 'ENCODER',\r\n              string: defined(VERSION)\r\n            }\r\n          }\r\n        ]\r\n      },\r\n\r\n      elePositionInfos: [],\r\n      eleCaches: [],\r\n      eleWriter: new IOWriterSync(),\r\n      currentCluster: {\r\n        timeCode: -1n,\r\n        pos: -1n\r\n      },\r\n      hasVideo: false\r\n    }\r\n\r\n    if (context.header.docType === 'webm') {\r\n      context.header.docTypeVersion = 2\r\n      context.header.docTypeReadVersion = 2\r\n    }\r\n\r\n    context.eleWriter.onFlush = (data) => {\r\n      context.eleCaches.push(data.slice())\r\n      return 0\r\n    }\r\n\r\n    crypto.random(this.random)\r\n    context.info.segmentUUID = this.randomView.getBigUint64(0)\r\n\r\n    formatContext.privateData = this.context = context\r\n\r\n    const tag2CodecId = this.context.header.docType === 'webm' ? WebmTag2CodecId : MkvTag2CodecId\r\n\r\n    function codecId2Tag(codecpar: AVCodecParameters) {\r\n      let tag = ''\r\n      object.each(tag2CodecId, (id, t) => {\r\n        if (id === codecpar.codecId) {\r\n          tag = t\r\n        }\r\n      })\r\n      if (codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_F64LE\r\n        || codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_F32LE\r\n      ) {\r\n        tag = 'A_PCM/FLOAT/IEEE'\r\n      }\r\n      if (codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S16BE\r\n        || codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S24BE\r\n        || codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S32BE\r\n      ) {\r\n        tag = 'A_PCM/INT/BIG'\r\n      }\r\n      if (codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_U8\r\n        || codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n        || codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S24LE\r\n        || codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S32LE\r\n      ) {\r\n        tag = 'A_PCM/INT/LIT'\r\n      }\r\n      return tag\r\n    }\r\n\r\n    formatContext.streams.forEach((stream) => {\r\n      if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_ATTACHMENT) {\r\n        crypto.random(this.random)\r\n        context.attachments.entry.push({\r\n          uid: this.randomView.getBigUint64(0),\r\n          name: stream.metadata['name'] || 'unknown',\r\n          mime: stream.metadata['mime'] || 'unknown',\r\n          data: {\r\n            data: mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize),\r\n            size: static_cast<int64>(stream.codecpar.extradataSize),\r\n            pos: -1n\r\n          },\r\n          description: stream.metadata['description'] || 'unknown'\r\n        })\r\n      }\r\n      else {\r\n        const track: TrackEntry = {}\r\n        crypto.random(this.random)\r\n        track.uid = this.randomView.getBigUint64(0)\r\n        track.codecId = codecId2Tag(stream.codecpar)\r\n        track.number = stream.index + 1\r\n        if (stream.codecpar.extradata) {\r\n          track.codecPrivate = {\r\n            data: mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize).slice(),\r\n            pos: -1n,\r\n            size: static_cast<int64>(stream.codecpar.extradataSize)\r\n          }\r\n        }\r\n        track.language = stream.metadata['language'] || 'und'\r\n\r\n        switch (stream.codecpar.codecType) {\r\n          case AVMediaType.AVMEDIA_TYPE_AUDIO: {\r\n            track.type = MATROSKATrackType.AUDIO\r\n            track.audio = {\r\n              channels: stream.codecpar.chLayout.nbChannels,\r\n              sampleRate: reinterpret_cast<float>(stream.codecpar.sampleRate),\r\n              bitDepth: stream.codecpar.bitsPerRawSample\r\n            }\r\n            break\r\n          }\r\n          case AVMediaType.AVMEDIA_TYPE_VIDEO: {\r\n            context.hasVideo = true\r\n            track.type = MATROSKATrackType.VIDEO\r\n            track.video = {\r\n              pixelWidth: stream.codecpar.width,\r\n              pixelHeight: stream.codecpar.height,\r\n              color: {\r\n                matrixCoefficients: stream.codecpar.colorSpace,\r\n                primaries: stream.codecpar.colorPrimaries,\r\n                transferCharacteristics: stream.codecpar.colorTrc,\r\n                range: stream.codecpar.colorRange\r\n              }\r\n            }\r\n            const result = chromaLocation2Pos(stream.codecpar.chromaLocation)\r\n            if (result) {\r\n              track.video.color.chromaSitingVert = (result.x >>> 7) + 1\r\n              track.video.color.chromaSitingHorz = (result.y >>> 7) + 1\r\n            }\r\n            break\r\n          }\r\n          case AVMediaType.AVMEDIA_TYPE_SUBTITLE: {\r\n            track.type = MATROSKATrackType.SUBTITLE\r\n            break\r\n          }\r\n        }\r\n\r\n        stream.privData = track\r\n\r\n        context.tracks.entry.push(track)\r\n      }\r\n    })\r\n\r\n    return 0\r\n  }\r\n\r\n  public writeHeader(formatContext: AVOFormatContext): number {\r\n    omatroska.writeHeader(formatContext.ioWriter, this.context, this.context.header)\r\n\r\n    omatroska.writeEbmlId(formatContext.ioWriter, EBMLId.SEGMENT)\r\n\r\n    const now = formatContext.ioWriter.getPos()\r\n    omatroska.writeEbmlLengthUnknown(formatContext.ioWriter, 8)\r\n    this.context.elePositionInfos.push({\r\n      pos: now,\r\n      length: 0,\r\n      bytes: 8\r\n    })\r\n\r\n    this.context.segmentStart = formatContext.ioWriter.getPos()\r\n    // SeekHead 占位\r\n    formatContext.ioWriter.skip(96)\r\n    this.context.seekHeadEnd = formatContext.ioWriter.getPos()\r\n\r\n    return 0\r\n  }\r\n\r\n  private writeBlock(stream: AVStream, avpacket: pointer<AVPacket>) {\r\n    const track = stream.privData as TrackEntry\r\n    omatroska.writeEbmlId(this.context.eleWriter, EBMLId.SIMPLE_BLOCK)\r\n    omatroska.writeEbmlLength(this.context.eleWriter, omatroska.ebmlLengthSize(track.number) + 2 + 1 + avpacket.size)\r\n    omatroska.writeEbmlNum(this.context.eleWriter, track.number, omatroska.ebmlLengthSize(track.number))\r\n    const pts = avRescaleQ(avpacket.pts, avpacket.timeBase, AV_MILLI_TIME_BASE_Q)\r\n\r\n    this.context.eleWriter.writeInt16(static_cast<int32>(pts - this.context.currentCluster.timeCode))\r\n\r\n    if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY || stream.codecpar.codecType !== AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      this.context.eleWriter.writeUint8(0x80)\r\n    }\r\n    else {\r\n      this.context.eleWriter.writeUint8(0x00)\r\n    }\r\n    this.context.eleWriter.writeBuffer(getAVPacketData(avpacket))\r\n  }\r\n\r\n  private writeCluster(formatContext: AVOFormatContext) {\r\n    if (this.context.currentCluster.pos === -1n) {\r\n      return\r\n    }\r\n\r\n    formatContext.ioWriter.flush()\r\n    this.context.eleWriter.flush()\r\n\r\n    let block = concatTypeArray(Uint8Array, this.context.eleCaches)\r\n\r\n    if (!block.length) {\r\n      return\r\n    }\r\n\r\n    this.context.eleCaches.length = 0\r\n    omatroska.writeEbmlUint(this.context.eleWriter, EBMLId.CLUSTER_TIME_CODE, this.context.currentCluster.timeCode)\r\n    this.context.eleWriter.flush()\r\n    block = concatTypeArray(Uint8Array, [...this.context.eleCaches, block])\r\n\r\n\r\n    omatroska.writeEbmlId(formatContext.ioWriter, EBMLId.CLUSTER)\r\n    omatroska.writeEbmlLength(formatContext.ioWriter, block.length)\r\n    formatContext.ioWriter.writeBuffer(block)\r\n\r\n    formatContext.ioWriter.flush()\r\n    this.context.eleCaches.length = 0\r\n  }\r\n\r\n  public writeAVPacket(formatContext: AVOFormatContext, avpacket: pointer<AVPacket>): number {\r\n\r\n    if (!avpacket.size) {\r\n      logger.warn(`packet\\'s size is 0: ${avpacket.streamIndex}, ignore it`)\r\n      return 0\r\n    }\r\n\r\n    const stream = formatContext.getStreamByIndex(avpacket.streamIndex)\r\n\r\n    if (!stream) {\r\n      logger.warn(`can not found the stream width the avpacket\\'s streamIndex: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    const track = stream.privData as TrackEntry\r\n\r\n    const pts = avRescaleQ(avpacket.pts, avpacket.timeBase, AV_MILLI_TIME_BASE_Q)\r\n\r\n    if (!track.maxPts || track.maxPts < pts) {\r\n      track.maxPts = pts\r\n    }\r\n\r\n    if (this.options.isLive\r\n      || (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)\r\n        && (\r\n          stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO\r\n          || !this.context.hasVideo\r\n            && (pts - this.context.currentCluster.timeCode > 5000n)\r\n        )\r\n    ) {\r\n      this.writeCluster(formatContext)\r\n      this.context.currentCluster.timeCode = pts\r\n      this.context.currentCluster.pos = formatContext.ioWriter.getPos() - this.context.segmentStart\r\n      this.context.cues.entry.push({\r\n        time: this.context.currentCluster.timeCode,\r\n        pos: [{\r\n          pos: this.context.currentCluster.pos,\r\n          track: track.number\r\n        }]\r\n      })\r\n    }\r\n\r\n    this.writeBlock(stream, avpacket)\r\n\r\n    return 0\r\n  }\r\n\r\n  public writeTrailer(formatContext: AVOFormatContext): number {\r\n\r\n    this.writeCluster(formatContext)\r\n\r\n    formatContext.streams.forEach((stream) => {\r\n      const track = stream.privData as TrackEntry\r\n\r\n      if (!this.options.isLive) {\r\n        const duration = track.maxPts\r\n        if (duration > this.context.info.duration) {\r\n          this.context.info.duration = reinterpret_cast<float>(static_cast<int32>(duration))\r\n        }\r\n        this.context.tags.entry.push({\r\n          tag: {\r\n            name: 'DURATION',\r\n            string: formatTimestamp(duration)\r\n          },\r\n          target: {\r\n            trackUid: track.uid\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    formatContext.ioWriter.flush()\r\n    this.context.eleWriter.flush()\r\n    this.context.eleCaches.length = 0\r\n\r\n    this.context.eleWriter.reset()\r\n\r\n    const now = formatContext.ioWriter.getPos()\r\n    let segmentLength = now - this.context.segmentStart\r\n\r\n    this.context.seekHead.entry.push({\r\n      id: EBMLId.INFO,\r\n      pos: this.context.eleWriter.getPos() + this.context.seekHeadEnd - this.context.segmentStart\r\n    })\r\n    omatroska.writeInfo(this.context.eleWriter, this.context, this.context.info)\r\n    this.context.seekHead.entry.push({\r\n      id: EBMLId.TRACKS,\r\n      pos: this.context.eleWriter.getPos() + this.context.seekHeadEnd - this.context.segmentStart\r\n    })\r\n    omatroska.writeTracks(this.context.eleWriter, this.context, this.context.tracks)\r\n    this.context.seekHead.entry.push({\r\n      id: EBMLId.TAGS,\r\n      pos: this.context.eleWriter.getPos() + this.context.seekHeadEnd - this.context.segmentStart\r\n    })\r\n    omatroska.writeTags(this.context.eleWriter, this.context, this.context.tags)\r\n    this.context.eleWriter.flush()\r\n\r\n    const buffer = concatTypeArray(Uint8Array, this.context.eleCaches)\r\n    formatContext.ioWriter.onFlush(buffer, this.context.seekHeadEnd)\r\n\r\n    segmentLength += static_cast<int64>(buffer.length)\r\n\r\n    this.context.cues.entry.forEach((cue) => {\r\n      cue.pos.forEach((item) => {\r\n        item.pos += static_cast<int64>(buffer.length)\r\n      })\r\n    })\r\n\r\n    if (this.context.cues.entry.length) {\r\n      this.context.seekHead.entry.push({\r\n        id: EBMLId.CUES,\r\n        pos: formatContext.ioWriter.getPos() - this.context.segmentStart + static_cast<int64>(buffer.length)\r\n      })\r\n      omatroska.writeCues(formatContext.ioWriter, this.context, this.context.cues)\r\n    }\r\n    if (this.context.attachments.entry.length) {\r\n      this.context.seekHead.entry.push({\r\n        id: EBMLId.ATTACHMENTS,\r\n        pos: formatContext.ioWriter.getPos() - this.context.segmentStart + static_cast<int64>(buffer.length)\r\n      })\r\n      omatroska.writeAttachments(formatContext.ioWriter, this.context, this.context.attachments)\r\n    }\r\n\r\n    formatContext.ioWriter.flush()\r\n    segmentLength += formatContext.ioWriter.getPos() - now\r\n\r\n    formatContext.ioWriter.seek(this.context.segmentStart)\r\n    omatroska.writeSeekHeader(formatContext.ioWriter, this.context, this.context.seekHead)\r\n    const seekHeadLen = formatContext.ioWriter.getPos() - this.context.segmentStart\r\n    omatroska.writeEbmlId(formatContext.ioWriter, EBMLId.VOID)\r\n    omatroska.writeEbmlLength(formatContext.ioWriter, this.context.seekHeadEnd - this.context.segmentStart - seekHeadLen - 2n, 1)\r\n    formatContext.ioWriter.flush()\r\n\r\n    this.context.elePositionInfos[0].length = segmentLength\r\n    omatroska.updatePositionSize(formatContext.ioWriter, this.context)\r\n\r\n    this.context.eleCaches.length = 0\r\n\r\n    return 0\r\n  }\r\n\r\n  public flush(formatContext: AVOFormatContext): number {\r\n    formatContext.ioWriter.flush()\r\n    this.context.currentCluster.timeCode = -1n\r\n    this.context.currentCluster.pos = -1n\r\n    return 0\r\n  }\r\n\r\n}\r\n","/*\r\n * libmedia matroska defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum EbmlType {\r\n  NONE,\r\n  UINT,\r\n  UINT64,\r\n  SINT,\r\n  SINT64,\r\n  FLOAT,\r\n  DOUBLE,\r\n  STRING,\r\n  BUFFER,\r\n  OBJECT,\r\n  BOOL\r\n}\r\n\r\nexport const enum EBMLId {\r\n  HEADER = 0x1A45DFA3,\r\n  SEGMENT = 0x18538067,\r\n\r\n  EBML_VERSION = 0x4286,\r\n  EBML_READ_VERSION = 0x42F7,\r\n  EBML_MAX_ID_LENGTH = 0x42F2,\r\n  EBML_MAX_SIZE_LENGTH = 0x42F3,\r\n  DOCTYPE = 0x4282,\r\n  DOC_TYPE_VERSION = 0x4287,\r\n  DOC_TYPE_READ_VERSION = 0x4285,\r\n  VOID = 0xEC,\r\n  CRC32 = 0xBF,\r\n\r\n  // Matroska top-level master ID\r\n  INFO = 0x1549A966,\r\n  TRACKS = 0x1654AE6B,\r\n  CUES = 0x1C53BB6B,\r\n  TAGS = 0x1254C367,\r\n  SEEK_HEAD = 0x114D9B74,\r\n  ATTACHMENTS = 0x1941A469,\r\n  CLUSTER = 0x1F43B675,\r\n  CHAPTERS = 0x1043A770,\r\n\r\n  /* IDs in the info master */\r\n  TIME_CODE_SCALE = 0x2AD7B1,\r\n  DURATION = 0x4489,\r\n  TITLE = 0x7BA9,\r\n  WRITING_APP = 0x5741,\r\n  MUXING_APP = 0x4D80,\r\n  DATE_UTC = 0x4461,\r\n  SEGMENT_UID = 0x73A4,\r\n\r\n  /* ID in the tracks master */\r\n  TRACK_ENTRY = 0xAE,\r\n\r\n  /* IDs in the track entry master */\r\n  TRACK_NUMBER = 0xD7,\r\n  TRACK_UID = 0x73C5,\r\n  TRACK_TYPE = 0x83,\r\n  TRACK_VIDEO = 0xE0,\r\n  TRACK_AUDIO = 0xE1,\r\n  TRACK_OPERATION = 0xE2,\r\n  TRACK_COMBINE_PLANES = 0xE3,\r\n  TRACK_PLANE = 0xE4,\r\n  TRACK_PLANE_UID = 0xE5,\r\n  TRACK_PLANE_TYPE = 0xE6,\r\n  CODEC_ID = 0x86,\r\n  CODEC_PRIVATE = 0x63A2,\r\n  CODEC_NAME = 0x258688,\r\n  CODEC_INFO_URL = 0x3B4040,\r\n  CODEC_DOWN_LOAD_URL = 0x26B240,\r\n  CODEC_DECODE_ALL = 0xAA,\r\n  CODEC_DELAY = 0x56AA,\r\n  SEEK_PREROLL = 0x56BB,\r\n  TRACK_NAME = 0x536E,\r\n  TRACK_LANGUAGE = 0x22B59C,\r\n  TRACK_FLAG_ENABLED = 0xB9,\r\n  TRACK_FLAG_DEFAULT = 0x88,\r\n  TRACK_FLAG_FORCED = 0x55AA,\r\n  TRACK_FLAG_LACING = 0x9C,\r\n  TRACK_MIN_CACHE = 0x6DE7,\r\n  TRACK_MAX_CACHE = 0x6DF8,\r\n  TRACK_DEFAULT_DURATION = 0x23E383,\r\n  TRACK_CONTENT_ENCODINGS = 0x6D80,\r\n  TRACK_CONTENT_ENCODING = 0x6240,\r\n  TRACK_TIME_CODE_SCALE = 0x23314F,\r\n  TRACK_MAX_BLK_ADD_ID = 0x55EE,\r\n\r\n  /* IDs in the track video master */\r\n  VIDEO_FRAMERATE = 0x2383E3,\r\n  VIDEO_DISPLAY_WIDTH = 0x54B0,\r\n  VIDEO_DISPLAY_HEIGHT = 0x54BA,\r\n  VIDEO_PIXEL_WIDTH = 0xB0,\r\n  VIDEO_PIXEL_HEIGHT = 0xBA,\r\n  VIDEO_PIXEL_CROP_B = 0x54AA,\r\n  VIDEO_PIXEL_CROP_T = 0x54BB,\r\n  VIDEO_PIXEL_CROP_L = 0x54CC,\r\n  VIDEO_PIXEL_CROP_R = 0x54DD,\r\n  VIDEO_DISPLAY_UNIT = 0x54B2,\r\n  VIDEO_FLAG_INTERLACED = 0x9A,\r\n  VIDEO_FIELD_ORDER = 0x9D,\r\n  VIDEO_STEREO_MODE = 0x53B8,\r\n  VIDEO_ALPHA_MODE = 0x53C0,\r\n  VIDEO_ASPECT_RATIO = 0x54B3,\r\n  VIDEO_COLORSPACE = 0x2EB524,\r\n  VIDEO_COLOR = 0x55B0,\r\n\r\n  VIDEO_COLOR_MATRIX_COEFF = 0x55B1,\r\n  VIDEO_COLOR_BITS_PER_CHANNEL = 0x55B2,\r\n  VIDEO_COLOR_CHROMA_SUB_HORZ = 0x55B3,\r\n  VIDEO_COLOR_CHROMA_SUB_VERT = 0x55B4,\r\n  VIDEO_COLOR_CB_SUB_HORZ = 0x55B5,\r\n  VIDEO_COLOR_CB_SUB_VERT = 0x55B6,\r\n  VIDEO_COLOR_CHROMA_SITING_HORZ = 0x55B7,\r\n  VIDEO_COLOR_CHROMA_SITING_VERT = 0x55B8,\r\n  VIDEO_COLOR_RANGE = 0x55B9,\r\n  VIDEO_COLOR_TRANSFER_CHARACTERISTICS = 0x55BA,\r\n\r\n  VIDEO_COLOR_PRIMARIES = 0x55BB,\r\n  VIDEO_COLOR_MAX_CLL = 0x55BC,\r\n  VIDEO_COLOR_MAX_FALL = 0x55BD,\r\n\r\n  VIDEO_COLOR_MASTERING_META = 0x55D0,\r\n  VIDEO_COLOR_RX = 0x55D1,\r\n  VIDEO_COLOR_RY = 0x55D2,\r\n  VIDEO_COLOR_GX = 0x55D3,\r\n  VIDEO_COLOR_GY = 0x55D4,\r\n  VIDEO_COLOR_BX = 0x55D5,\r\n  VIDEO_COLOR_BY = 0x55D6,\r\n  VIDEO_COLOR_WHITE_X = 0x55D7,\r\n  VIDEO_COLOR_WHITE_Y = 0x55D8,\r\n  VIDEO_COLOR_LUMINA_NCE_MAX = 0x55D9,\r\n  VIDEO_COLOR_LUMINA_NCE_MIN = 0x55DA,\r\n\r\n  VIDEO_PROJECTION = 0x7670,\r\n  VIDEO_PROJECTION_TYPE = 0x7671,\r\n  VIDEO_PROJECTION_PRIVATE = 0x7672,\r\n  VIDEO_PROJECTION_POSE_YAW = 0x7673,\r\n  VIDEO_PROJECTION_POSE_PITCH = 0x7674,\r\n  VIDEO_PROJECTION_POSE_ROLL = 0x7675,\r\n\r\n  /* IDs in the track audio master */\r\n  AUDIO_SAMPLING_FREQ = 0xB5,\r\n  AUDIO_OUT_SAMPLING_FREQ = 0x78B5,\r\n\r\n  AUDIO_BITDEPTH = 0x6264,\r\n  AUDIO_CHANNELS = 0x9F,\r\n\r\n  /* IDs in the content encoding master */\r\n  ENCODING_ORDER = 0x5031,\r\n  ENCODING_SCOPE = 0x5032,\r\n  ENCODING_TYPE = 0x5033,\r\n  ENCODING_COMPRESSION = 0x5034,\r\n  ENCODING_COMP_ALGO = 0x4254,\r\n  ENCODING_COMP_SETTINGS = 0x4255,\r\n\r\n  ENCODING_ENCRYPTION = 0x5035,\r\n  ENCODING_ENC_AES_SETTINGS = 0x47E7,\r\n  ENCODING_ENC_ALGO = 0x47E1,\r\n  ENCODING_ENC_KEY_ID = 0x47E2,\r\n  ENCODING_SIG_ALGO = 0x47E5,\r\n  ENCODING_SIG_HASH_ALGO = 0x47E6,\r\n  ENCODING_SIG_KEY_ID = 0x47E4,\r\n  ENCODING_SIG_NATURE = 0x47E3,\r\n\r\n  /* ID in the cues master */\r\n  POINT_ENTRY = 0xBB,\r\n\r\n  /* IDs in the point entry master */\r\n  CUE_TIME = 0xB3,\r\n  CUE_TRACK_POSITION = 0xB7,\r\n\r\n  /* IDs in the cue track position master */\r\n  CUE_TRACK = 0xF7,\r\n  CUE_CLUSTER_POSITION = 0xF1,\r\n  CUE_RELATIVE_POSITION = 0xF0,\r\n  CUE_DURATION = 0xB2,\r\n  CUE_BLOCKNUMBER = 0x5378,\r\n\r\n  /* IDs in the tags master */\r\n  TAG = 0x7373,\r\n  TAG_SIMPLE = 0x67C8,\r\n  TAG_NAME = 0x45A3,\r\n  TAG_STRING = 0x4487,\r\n  TAG_LANG = 0x447A,\r\n  TAG_DEFAULT = 0x4484,\r\n  TAG_DEFAULT_BUG = 0x44B4,\r\n  TAG_TARGETS = 0x63C0,\r\n  TAG_TARGETS_TYPE = 0x63CA,\r\n  TAG_TARGETS_TYPE_VALUE = 0x68CA,\r\n  TAG_TARGETS_TRACK_UID = 0x63C5,\r\n  TAG_TARGETS_CHAPTER_UID = 0x63C4,\r\n  TAG_TARGETS_ATTACH_UID = 0x63C6,\r\n\r\n  /* IDs in the seek head master */\r\n  SEEK_ENTRY = 0x4DBB,\r\n\r\n  /* IDs in the seek point master */\r\n  SEEK_ID = 0x53AB,\r\n  SEEK_POSITION = 0x53AC,\r\n\r\n  /* IDs in the cluster master */\r\n  CLUSTER_TIME_CODE = 0xE7,\r\n  CLUSTER_POSITION = 0xA7,\r\n  CLUSTER_PREV_SIZE = 0xAB,\r\n  BLOCK_GROUP = 0xA0,\r\n  BLOCK_ADDITIONS = 0x75A1,\r\n  BLOCK_MORE = 0xA6,\r\n  BLOCK_ADD_ID = 0xEE,\r\n  BLOCK_ADDITIONAL = 0xA5,\r\n  SIMPLE_BLOCK = 0xA3,\r\n\r\n  /* IDs in the block group master */\r\n  BLOCK = 0xA1,\r\n  BLOCK_DURATION = 0x9B,\r\n  BLOCK_REFERENCE = 0xFB,\r\n  CODEC_STATE = 0xA4,\r\n  DISCARD_PADDING = 0x75A2,\r\n\r\n  /* IDs in the attachments master */\r\n  ATTACHED_FILE = 0x61A7,\r\n  FILE_DESC = 0x467E,\r\n  FILE_NAME = 0x466E,\r\n  FILE_MIMETYPE = 0x4660,\r\n  FILE_DATA = 0x465C,\r\n  FILE_UID = 0x46AE,\r\n\r\n  /* IDs in the chapters master */\r\n  EDITION_ENTRY = 0x45B9,\r\n  CHAPTER_ATOM = 0xB6,\r\n  CHAPTER_TIME_START = 0x91,\r\n  CHAPTER_TIME_END = 0x92,\r\n  CHAPTER_DISPLAY = 0x80,\r\n  CHAP_STRING = 0x85,\r\n  CHAP_LANG = 0x437C,\r\n  CHAP_COUNTRY = 0x437E,\r\n  EDITION_UID = 0x45BC,\r\n  EDITION_FLAG_HIDDEN = 0x45BD,\r\n  EDITION_FLAG_DEFAULT = 0x45DB,\r\n  EDITION_FLAG_ORDERED = 0x45DD,\r\n  CHAPTER_UID = 0x73C4,\r\n  CHAPTER_FLAG_HIDDEN = 0x98,\r\n  CHAPTER_FLAG_ENABLED = 0x4598,\r\n  CHAPTER_PHYS_EQUIV = 0x63C3\r\n}\r\n\r\nexport const enum MATROSKATrackType {\r\n  NONE = 0x0,\r\n  VIDEO = 0x1,\r\n  AUDIO = 0x2,\r\n  COMPLEX = 0x3,\r\n  LOGO = 0x10,\r\n  SUBTITLE = 0x11,\r\n  BUTTONS = 0x12,\r\n  CONTROL = 0x20,\r\n  METADATA = 0x21,\r\n}\r\n\r\nexport const enum MATROSKATrackEncodingComp {\r\n  Z_LIB = 0,\r\n  BZ_LIB = 1,\r\n  LZO = 2,\r\n  HEADER_STRIP = 3\r\n}\r\n\r\nexport const enum MATROSKAVideoInterlaceFlag {\r\n  UNDETERMINED = 0,\r\n  INTERLACED = 1,\r\n  PROGRESSIVE = 2\r\n}\r\n\r\nexport const enum MATROSKAVideoFieldOrder {\r\n  PROGRESSIVE = 0,\r\n  TT = 1,\r\n  UNDETERMINED = 2,\r\n  BB = 6,\r\n  TB = 9,\r\n  BT = 14\r\n}\r\n\r\nexport const enum MATROSKAVideoStereoModeType {\r\n  MONO = 0,\r\n  LEFT_RIGHT = 1,\r\n  BOTTOM_TOP = 2,\r\n  TOP_BOTTOM = 3,\r\n  CHECKERBOARD_RL = 4,\r\n  CHECKERBOARD_LR = 5,\r\n  ROW_INTERLEAVED_RL = 6,\r\n  ROW_INTERLEAVED_LR = 7,\r\n  COL_INTERLEAVED_RL = 8,\r\n  COL_INTERLEAVED_LR = 9,\r\n  ANAGLYPH_CYAN_RED  = 10,\r\n  RIGHT_LEFT = 11,\r\n  ANAGLYPH_GREEN_MAG = 12,\r\n  BOTH_EYES_BLOCK_LR = 13,\r\n  BOTH_EYES_BLOCK_RL = 14,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAVideoDisplayUint {\r\n  PIXELS = 0,\r\n  CENTIMETERS = 1,\r\n  INCHES = 2,\r\n  DAR = 3,\r\n  UNKNOWN = 4\r\n}\r\n\r\nexport const enum MATROSKAColourChromaSitingHorz {\r\n  UNDETERMINED = 0,\r\n  LEFT = 1,\r\n  HALF = 2,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAColourChromaSitingVert {\r\n  UNDETERMINED = 0,\r\n  TOP = 1,\r\n  HALF = 2,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAVideoProjectionType {\r\n  RECTANGULAR = 0,\r\n  EQUIRECTANGULAR = 1,\r\n  CUBE_MAP = 2,\r\n  MESH = 3\r\n}\r\n\r\nexport const enum MATROSKALacingMode {\r\n  NO_LACING = 0,\r\n  XIPH = 1,\r\n  FIXED_SIZE = 2,\r\n  EBML = 3\r\n}\r\n\r\nexport const enum MATROSKABlockAddIdType {\r\n  DEFAULT = 0,\r\n  OPAQUE = 1,\r\n  ITU_T_T35 = 4,\r\n  DVCC = 0x64766343,\r\n  DVVC = 0x64767643\r\n}\r\n\r\nexport const enum MATROSKATrackEncodingComp {\r\n  MATROSKA_TRACK_ENCODING_COMP_ZLIB        = 0,\r\n  MATROSKA_TRACK_ENCODING_COMP_BZLIB       = 1,\r\n  MATROSKA_TRACK_ENCODING_COMP_LZO         = 2,\r\n  MATROSKA_TRACK_ENCODING_COMP_HEADERSTRIP = 3\r\n}\r\n\r\nexport const MkvTag2CodecId: Record<string, AVCodecID> = {\r\n  'A_AAC': AVCodecID.AV_CODEC_ID_AAC,\r\n  'A_AC3': AVCodecID.AV_CODEC_ID_AC3,\r\n  'A_ALAC': AVCodecID.AV_CODEC_ID_ALAC,\r\n  'A_DTS': AVCodecID.AV_CODEC_ID_DTS,\r\n  'A_EAC3': AVCodecID.AV_CODEC_ID_EAC3,\r\n  'A_FLAC': AVCodecID.AV_CODEC_ID_FLAC,\r\n  'A_MLP': AVCodecID.AV_CODEC_ID_MLP,\r\n  'A_MPEG/L2': AVCodecID.AV_CODEC_ID_MP2,\r\n  'A_MPEG/L1': AVCodecID.AV_CODEC_ID_MP1,\r\n  'A_MPEG/L3': AVCodecID.AV_CODEC_ID_MP3,\r\n  'A_OPUS': AVCodecID.AV_CODEC_ID_OPUS,\r\n  'A_OPUS/EXPERIMENTAL': AVCodecID.AV_CODEC_ID_OPUS,\r\n  'A_PCM/FLOAT/IEEE': AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  'A_PCM/INT/BIG': AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n  'A_PCM/INT/LIT': AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  'A_QUICKTIME/QDMC': AVCodecID.AV_CODEC_ID_QDMC,\r\n  'A_QUICKTIME/QDM2': AVCodecID.AV_CODEC_ID_QDM2,\r\n  'A_REAL/14_4': AVCodecID.AV_CODEC_ID_RA_144,\r\n  'A_REAL/28_8': AVCodecID.AV_CODEC_ID_RA_288,\r\n  'A_REAL/ATRC': AVCodecID.AV_CODEC_ID_ATRAC3,\r\n  'A_REAL/COOK': AVCodecID.AV_CODEC_ID_COOK,\r\n  'A_REAL/SIPR': AVCodecID.AV_CODEC_ID_SIPR,\r\n  'A_TRUEHD': AVCodecID.AV_CODEC_ID_TRUEHD,\r\n  'A_TTA1': AVCodecID.AV_CODEC_ID_TTA,\r\n  'A_VORBIS': AVCodecID.AV_CODEC_ID_VORBIS,\r\n  'A_WAVPACK4': AVCodecID.AV_CODEC_ID_WAVPACK,\r\n\r\n  'D_WEBVTT/SUBTITLES': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/CAPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/DESCRIPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/METADATA': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n\r\n  'S_TEXT/UTF8': AVCodecID.AV_CODEC_ID_SUBRIP,\r\n  'S_TEXT/ASCII': AVCodecID.AV_CODEC_ID_TEXT,\r\n  'S_TEXT/ASS': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_TEXT/SSA': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_ASS': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_SSA': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_VOBSUB': AVCodecID.AV_CODEC_ID_DVD_SUBTITLE,\r\n  'S_DVBSUB': AVCodecID.AV_CODEC_ID_DVB_SUBTITLE,\r\n  'S_HDMV/PGS': AVCodecID.AV_CODEC_ID_HDMV_PGS_SUBTITLE,\r\n  'S_HDMV/TEXTST': AVCodecID.AV_CODEC_ID_HDMV_TEXT_SUBTITLE,\r\n\r\n  'V_AV1': AVCodecID.AV_CODEC_ID_AV1,\r\n  'V_DIRAC': AVCodecID.AV_CODEC_ID_DIRAC,\r\n  'V_FFV1': AVCodecID.AV_CODEC_ID_FFV1,\r\n  'V_MJPEG': AVCodecID.AV_CODEC_ID_MJPEG,\r\n  'V_MPEG1': AVCodecID.AV_CODEC_ID_MPEG1VIDEO,\r\n  'V_MPEG2': AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  'V_MPEG4/ISO/ASP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/AP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/SP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/AVC': AVCodecID.AV_CODEC_ID_H264,\r\n  'V_MPEGH/ISO/HEVC': AVCodecID.AV_CODEC_ID_HEVC,\r\n  'V_MPEGH/ISO/VVC': AVCodecID.AV_CODEC_ID_VVC,\r\n  'V_MPEG4/MS/V3': AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  'V_PRORES': AVCodecID.AV_CODEC_ID_PRORES,\r\n  'V_REAL/RV10': AVCodecID.AV_CODEC_ID_RV10,\r\n  'V_REAL/RV20': AVCodecID.AV_CODEC_ID_RV20,\r\n  'V_REAL/RV30': AVCodecID.AV_CODEC_ID_RV30,\r\n  'V_REAL/RV40': AVCodecID.AV_CODEC_ID_RV40,\r\n  'V_SNOW': AVCodecID.AV_CODEC_ID_SNOW,\r\n  'V_THEORA': AVCodecID.AV_CODEC_ID_THEORA,\r\n  'V_UNCOMPRESSED': AVCodecID.AV_CODEC_ID_RAWVIDEO,\r\n  'V_VP8': AVCodecID.AV_CODEC_ID_VP8,\r\n  'V_VP9': AVCodecID.AV_CODEC_ID_VP9\r\n}\r\n\r\nexport const WebmTag2CodecId: Record<string, AVCodecID> = {\r\n  'V_VP8': AVCodecID.AV_CODEC_ID_VP8,\r\n  'V_VP9': AVCodecID.AV_CODEC_ID_VP9,\r\n  'V_AV1': AVCodecID.AV_CODEC_ID_AV1,\r\n\r\n  'A_VORBIS': AVCodecID.AV_CODEC_ID_VORBIS,\r\n  'A_OPUS': AVCodecID.AV_CODEC_ID_OPUS,\r\n\r\n  'D_WEBVTT/SUBTITLES': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/CAPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/DESCRIPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/METADATA': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n}\r\n","/*\r\n * libmedia matroska encoder util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { BytesWriterSync } from 'common/io/interface'\r\nimport { EBMLId } from './matroska'\r\nimport * as is from 'common/util/is'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport * as text from 'common/util/text'\r\nimport { Attachment, Attachments, AudioTrack, Chapter, ChapterAtom, ChapterDisplay,\r\n  Chapters, CuePoint, CuePointPos, Cues, ElePositionInfo, Header, Info, OMatroskaContext,\r\n  SeekHead, SeekHeadEntry, SimpleTag, Tag, TagTargets, Tags, TrackEntry, Tracks, VideoColor, VideoTrack\r\n} from './type'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\n\r\nexport function ebmlIdSize(id: EBMLId) {\r\n  return Math.floor((Math.log2(id) + 7) / 8)\r\n}\r\n\r\nexport function ebmlNumSize(value: number | bigint) {\r\n  let bytes = 0\r\n  do {\r\n    bytes++\r\n    // @ts-ignore\r\n  } while (value >>= (is.bigint(value) ? 7n : 7))\r\n\r\n  return bytes\r\n}\r\n\r\nexport function ebmlLengthSize(value: number | bigint) {\r\n  return is.bigint(value) ? ebmlNumSize(value + 1n) : ebmlNumSize(value + 1)\r\n}\r\n\r\nexport function writeEbmlNum(writer: BytesWriterSync, value: number | bigint, bytes: int32) {\r\n  if (is.bigint(value)) {\r\n    value |= (1n << BigInt(bytes * 7))\r\n    for (let i = bytes - 1; i >= 0; i--) {\r\n      writer.writeUint8(Number((value >> BigInt(i * 8)) & 0xffn))\r\n    }\r\n  }\r\n  else {\r\n    value |= (1 << bytes * 7)\r\n    for (let i = bytes - 1; i >= 0; i--) {\r\n      writer.writeUint8((value >> (i * 8)) & 0xff)\r\n    }\r\n  }\r\n}\r\n\r\nexport function writeEbmlId(writer: BytesWriterSync, id: EBMLId) {\r\n  let len = ebmlIdSize(id)\r\n  while (len--) {\r\n    writer.writeUint8(id >> (len * 8))\r\n  }\r\n}\r\n\r\nexport function writeEbmlLength(writer: BytesWriterSync, length:  number | bigint, bytes: int32 = 0) {\r\n  let need = ebmlLengthSize(length)\r\n\r\n  if (bytes === 0) {\r\n    bytes = need\r\n  }\r\n\r\n  writeEbmlNum(writer, length, bytes)\r\n}\r\n\r\nexport function writeEbmlLengthUnknown(writer: BytesWriterSync, bytes: int32) {\r\n  writer.writeUint8(0x1ff >> bytes)\r\n  for (let i = 0; i < bytes - 1; i++) {\r\n    writer.writeUint8(0xff)\r\n  }\r\n}\r\n\r\nexport function writeEbmlUid(writer: IOWriterSync, id: EBMLId, uid: uint64) {\r\n  writeEbmlId(writer, id)\r\n  writeEbmlLength(writer, 8)\r\n  writer.writeUint64(uid)\r\n}\r\n\r\nexport function writeEbmlUint(writer: IOWriterSync, id: EBMLId, value: number | bigint) {\r\n  let bytes = 1\r\n  let tmp = value\r\n\r\n  if (is.bigint(tmp)) {\r\n    while (tmp >>= 8n) {\r\n      bytes++\r\n    }\r\n  }\r\n  else {\r\n    while (tmp >>= 8) {\r\n      bytes++\r\n    }\r\n  }\r\n\r\n  writeEbmlId(writer, id)\r\n  writeEbmlLength(writer, bytes)\r\n  for (let i = bytes - 1; i >= 0; i--) {\r\n    writer.writeUint8(is.bigint(value) ? Number(value >> BigInt(i * 8)) : (value >> i * 8))\r\n  }\r\n}\r\n\r\nexport function writeEbmlFloat(writer: IOWriterSync, id: EBMLId, value: float) {\r\n  writeEbmlId(writer, id)\r\n  writeEbmlLength(writer, 4)\r\n  writer.writeFloat(value)\r\n}\r\n\r\nexport function writeEbmlDouble(writer: IOWriterSync, id: EBMLId, value: double) {\r\n  writeEbmlId(writer, id)\r\n  writeEbmlLength(writer, 8)\r\n  writer.writeDouble(value)\r\n}\r\n\r\nexport function writeEbmlBuffer(writer: IOWriterSync, id: EBMLId, value: Uint8Array) {\r\n  writeEbmlId(writer, id)\r\n  writeEbmlLength(writer, value.length)\r\n  writer.writeBuffer(value)\r\n}\r\n\r\nexport function writeEbmlString(writer: IOWriterSync, id: EBMLId, value: string) {\r\n  const buffer = text.encode(value)\r\n  writeEbmlBuffer(writer, id, buffer)\r\n}\r\n\r\nexport function writeEbmlVoid(writer: IOWriterSync, size: int32) {\r\n  writeEbmlId(writer, EBMLId.VOID)\r\n  if (size < 10) {\r\n    size -= 2\r\n    writeEbmlLength(writer, size)\r\n  }\r\n  else {\r\n    size -= 9\r\n    writeEbmlLength(writer, size, 8)\r\n  }\r\n  writer.writeBuffer(new Uint8Array(size).fill(0))\r\n}\r\n\r\nexport function updatePositionSize(ioWriter: IOWriterSync, context: OMatroskaContext) {\r\n  const pos = ioWriter.getPos()\r\n  const pointer = ioWriter.getPointer()\r\n  const minPos = pos - static_cast<int64>(pointer)\r\n\r\n  const seeks: ElePositionInfo[] = []\r\n\r\n  array.each(context.elePositionInfos, (item) => {\r\n    if (item.pos < pos && item.pos >= minPos) {\r\n      ioWriter.seekInline(pointer + Number(item.pos - pos))\r\n      writeEbmlLength(ioWriter, item.length, item.bytes)\r\n    }\r\n    else {\r\n      seeks.push(item)\r\n    }\r\n  })\r\n\r\n  array.each(seeks, (item) => {\r\n    ioWriter.seek(item.pos)\r\n    writeEbmlLength(ioWriter, item.length, item.bytes)\r\n  })\r\n\r\n  if (seeks.length) {\r\n    ioWriter.seek(pos)\r\n  }\r\n  else {\r\n    ioWriter.seekInline(pointer)\r\n  }\r\n  ioWriter.flush()\r\n  context.elePositionInfos = []\r\n}\r\n\r\nexport function writeEleData(writer: IOWriterSync, context: OMatroskaContext, id: EBMLId, data: (eleWriter: IOWriterSync) => void) {\r\n  context.eleWriter.flush()\r\n  const oldCache = context.eleCaches\r\n\r\n  context.eleCaches = []\r\n  data(context.eleWriter)\r\n  context.eleWriter.flush()\r\n  const buffer = concatTypeArray(Uint8Array, context.eleCaches)\r\n\r\n  context.eleCaches = oldCache\r\n  writeEbmlBuffer(writer, id, buffer)\r\n}\r\n\r\nexport function writeHeader(writer: IOWriterSync, context: OMatroskaContext, header: Header) {\r\n  writeEleData(writer, context, EBMLId.HEADER, (eleWriter) => {\r\n    writeEbmlUint(eleWriter, EBMLId.EBML_VERSION, header.version)\r\n    writeEbmlUint(eleWriter, EBMLId.EBML_READ_VERSION, header.readVersion)\r\n    writeEbmlUint(eleWriter, EBMLId.EBML_MAX_ID_LENGTH, header.maxIdLength)\r\n    writeEbmlUint(eleWriter, EBMLId.EBML_MAX_SIZE_LENGTH, header.maxSizeLength)\r\n    writeEbmlString(eleWriter, EBMLId.DOCTYPE, header.docType)\r\n    writeEbmlUint(eleWriter, EBMLId.DOC_TYPE_VERSION, header.docTypeVersion)\r\n    writeEbmlUint(eleWriter, EBMLId.DOC_TYPE_READ_VERSION, header.docTypeReadVersion)\r\n  })\r\n}\r\n\r\nexport function writeSeekHeaderEntry(writer: IOWriterSync, context: OMatroskaContext, entry: SeekHeadEntry) {\r\n  writeEleData(writer, context, EBMLId.SEEK_ENTRY, (eleWriter) => {\r\n    writeEbmlUint(eleWriter, EBMLId.SEEK_ID, entry.id)\r\n    writeEbmlUint(eleWriter, EBMLId.SEEK_POSITION, entry.pos)\r\n  })\r\n}\r\n\r\nexport function writeSeekHeader(writer: IOWriterSync, context: OMatroskaContext, header: SeekHead) {\r\n  writeEleData(writer, context, EBMLId.SEEK_HEAD, (eleWriter) => {\r\n    header.entry.forEach((entry) => {\r\n      writeSeekHeaderEntry(eleWriter, context, entry)\r\n    })\r\n  })\r\n}\r\n\r\nexport function writeInfo(writer: IOWriterSync, context: OMatroskaContext, info: Info) {\r\n  writeEleData(writer, context, EBMLId.INFO, (eleWriter) => {\r\n    writeEbmlUid(eleWriter, EBMLId.SEGMENT_UID, info.segmentUUID)\r\n    writeEbmlUint(eleWriter, EBMLId.TIME_CODE_SCALE, info.timestampScale)\r\n    writeEbmlDouble(eleWriter, EBMLId.DURATION, static_cast<double>(info.duration))\r\n    writeEbmlString(eleWriter, EBMLId.MUXING_APP, info.muxingApp)\r\n    writeEbmlString(eleWriter, EBMLId.WRITING_APP, info.writingApp)\r\n  })\r\n}\r\n\r\nexport function writeVideoColor(writer: IOWriterSync, context: OMatroskaContext, color: VideoColor) {\r\n  writeEleData(writer, context, EBMLId.VIDEO_COLOR, (eleWriter) => {\r\n    if (object.has(color, 'matrixCoefficients')) {\r\n      writeEbmlUint(eleWriter, EBMLId.VIDEO_COLOR_MATRIX_COEFF, color.matrixCoefficients)\r\n    }\r\n    if (object.has(color, 'primaries')) {\r\n      writeEbmlUint(eleWriter, EBMLId.VIDEO_COLOR_PRIMARIES, color.primaries)\r\n    }\r\n    if (object.has(color, 'transferCharacteristics')) {\r\n      writeEbmlUint(eleWriter, EBMLId.VIDEO_COLOR_TRANSFER_CHARACTERISTICS, color.transferCharacteristics)\r\n    }\r\n    if (object.has(color, 'range')) {\r\n      writeEbmlUint(eleWriter, EBMLId.VIDEO_COLOR_RANGE, color.range)\r\n    }\r\n    if (object.has(color, 'chromaSitingVert')) {\r\n      writeEbmlUint(eleWriter, EBMLId.VIDEO_COLOR_CHROMA_SITING_VERT, color.chromaSitingVert)\r\n    }\r\n    if (object.has(color, 'chromaSitingHorz')) {\r\n      writeEbmlUint(eleWriter, EBMLId.VIDEO_COLOR_CHROMA_SITING_HORZ, color.chromaSitingHorz)\r\n    }\r\n  })\r\n}\r\n\r\nexport function writeVideoTrack(writer: IOWriterSync, context: OMatroskaContext, video: VideoTrack) {\r\n  writeEleData(writer, context, EBMLId.TRACK_VIDEO, (eleWriter) => {\r\n    writeEbmlUint(eleWriter, EBMLId.VIDEO_PIXEL_WIDTH, video.pixelWidth)\r\n    writeEbmlUint(eleWriter, EBMLId.VIDEO_PIXEL_HEIGHT, video.pixelHeight)\r\n    if (video.color) {\r\n      writeVideoColor(eleWriter, context, video.color)\r\n    }\r\n  })\r\n}\r\n\r\nexport function writeAudioTrack(writer: IOWriterSync, context: OMatroskaContext, audio: AudioTrack) {\r\n  writeEleData(writer, context, EBMLId.TRACK_AUDIO, (eleWriter) => {\r\n    writeEbmlDouble(eleWriter, EBMLId.AUDIO_SAMPLING_FREQ, reinterpret_cast<double>(audio.sampleRate))\r\n    if (audio.outSampleRate) {\r\n      writeEbmlDouble(eleWriter, EBMLId.AUDIO_SAMPLING_FREQ, reinterpret_cast<double>(audio.outSampleRate))\r\n    }\r\n    writeEbmlUint(eleWriter, EBMLId.AUDIO_BITDEPTH, audio.bitDepth)\r\n    writeEbmlUint(eleWriter, EBMLId.AUDIO_CHANNELS, audio.channels)\r\n  })\r\n}\r\n\r\nexport function writeTrack(writer: IOWriterSync, context: OMatroskaContext, track: TrackEntry) {\r\n  writeEleData(writer, context, EBMLId.TRACK_ENTRY, (eleWriter) => {\r\n    writeEbmlUint(eleWriter, EBMLId.TRACK_NUMBER, track.number)\r\n    writeEbmlUid(eleWriter, EBMLId.TRACK_UID, track.uid)\r\n    writeEbmlUint(eleWriter, EBMLId.TRACK_TYPE, track.type)\r\n    writeEbmlString(eleWriter, EBMLId.TRACK_LANGUAGE, track.language)\r\n    writeEbmlString(eleWriter, EBMLId.CODEC_ID, track.codecId)\r\n\r\n    if (track.codecPrivate) {\r\n      writeEbmlBuffer(eleWriter, EBMLId.CODEC_PRIVATE, track.codecPrivate.data)\r\n    }\r\n\r\n    if (track.audio) {\r\n      writeAudioTrack(eleWriter, context, track.audio)\r\n    }\r\n    else if (track.video) {\r\n      writeVideoTrack(eleWriter, context, track.video)\r\n    }\r\n  })\r\n}\r\n\r\nexport function writeTracks(writer: IOWriterSync, context: OMatroskaContext, tracks: Tracks) {\r\n  writeEleData(writer, context, EBMLId.TRACKS, (eleWriter) => {\r\n    tracks.entry.forEach((track) => {\r\n      writeTrack(eleWriter, context, track)\r\n    })\r\n  })\r\n}\r\n\r\nexport function writeTagTag(writer: IOWriterSync, context: OMatroskaContext, tag: SimpleTag) {\r\n  writeEleData(writer, context, EBMLId.TAG_SIMPLE, (eleWriter) => {\r\n    if (tag.name) {\r\n      writeEbmlString(eleWriter, EBMLId.TAG_NAME, tag.name)\r\n    }\r\n    if (tag.string) {\r\n      writeEbmlString(eleWriter, EBMLId.TAG_STRING, tag.string)\r\n    }\r\n    if (tag.language) {\r\n      writeEbmlString(eleWriter, EBMLId.TAG_LANG, tag.language)\r\n    }\r\n    if (object.has(tag, 'default')) {\r\n      writeEbmlUint(eleWriter, EBMLId.TAG_DEFAULT, tag.default)\r\n    }\r\n    if (tag.sub) {\r\n      writeTagTag(eleWriter, context, tag.sub)\r\n    }\r\n  })\r\n}\r\n\r\nexport function writeTagTarget(writer: IOWriterSync, context: OMatroskaContext, target: TagTargets) {\r\n  writeEleData(writer, context, EBMLId.TAG_TARGETS, (eleWriter) => {\r\n    if (target.type) {\r\n      writeEbmlString(eleWriter, EBMLId.TAG_TARGETS_TYPE, target.type)\r\n    }\r\n    if (object.has(target, 'typeValue')) {\r\n      writeEbmlUint(eleWriter, EBMLId.TAG_TARGETS_TYPE_VALUE, target.typeValue)\r\n    }\r\n    if (object.has(target, 'trackUid')) {\r\n      writeEbmlUid(eleWriter, EBMLId.TAG_TARGETS_TRACK_UID, target.trackUid)\r\n    }\r\n    if (object.has(target, 'chapterUid')) {\r\n      writeEbmlUid(eleWriter, EBMLId.TAG_TARGETS_CHAPTER_UID, target.chapterUid)\r\n    }\r\n    if (object.has(target, 'attachUid')) {\r\n      writeEbmlUid(eleWriter, EBMLId.TAG_TARGETS_CHAPTER_UID, target.attachUid)\r\n    }\r\n  })\r\n}\r\n\r\nexport function writeTag(writer: IOWriterSync, context: OMatroskaContext, tag: Tag) {\r\n  writeEleData(writer, context, EBMLId.TAG, (eleWriter) => {\r\n    if (tag.tag) {\r\n      writeTagTag(eleWriter, context, tag.tag)\r\n    }\r\n    if (tag.target) {\r\n      writeTagTarget(eleWriter, context, tag.target)\r\n    }\r\n  })\r\n}\r\n\r\nexport function writeTags(writer: IOWriterSync, context: OMatroskaContext, tags: Tags) {\r\n  writeEleData(writer, context, EBMLId.TAGS, (eleWriter) => {\r\n    tags.entry.forEach((tag) => {\r\n      writeTag(eleWriter, context, tag)\r\n    })\r\n  })\r\n}\r\n\r\nexport function writeCuePosition(writer: IOWriterSync, context: OMatroskaContext, pos: CuePointPos) {\r\n  writeEleData(writer, context, EBMLId.CUE_TRACK_POSITION, (eleWriter) => {\r\n    writeEbmlUint(eleWriter, EBMLId.CUE_TRACK, pos.track)\r\n    writeEbmlUint(eleWriter, EBMLId.CUE_CLUSTER_POSITION, pos.pos)\r\n  })\r\n}\r\n\r\nexport function writeCue(writer: IOWriterSync, context: OMatroskaContext, cue: CuePoint) {\r\n  writeEleData(writer, context, EBMLId.POINT_ENTRY, (eleWriter) => {\r\n    writeEbmlUint(eleWriter, EBMLId.CUE_TIME, cue.time)\r\n    cue.pos.forEach((p) => {\r\n      writeCuePosition(eleWriter, context, p)\r\n    })\r\n  })\r\n}\r\n\r\nexport function writeCues(writer: IOWriterSync, context: OMatroskaContext, cues: Cues) {\r\n  writeEleData(writer, context, EBMLId.CUES, (eleWriter) => {\r\n    cues.entry.forEach((cue) => {\r\n      writeCue(eleWriter, context, cue)\r\n    })\r\n  })\r\n}\r\n\r\nexport function writeChapterAtomDisplay(writer: IOWriterSync, context: OMatroskaContext, display: ChapterDisplay) {\r\n  writeEleData(writer, context, EBMLId.CHAPTER_DISPLAY, (eleWriter) => {\r\n    writeEbmlString(eleWriter, EBMLId.CHAP_STRING, display.title)\r\n    writeEbmlString(eleWriter, EBMLId.CHAP_LANG, display.language)\r\n  })\r\n}\r\n\r\nexport function writeChapterAtom(writer: IOWriterSync, context: OMatroskaContext, atom: ChapterAtom) {\r\n  writeEleData(writer, context, EBMLId.CHAPTER_ATOM, (eleWriter) => {\r\n    writeEbmlUint(eleWriter, EBMLId.CHAPTER_TIME_START, atom.start)\r\n    writeEbmlUint(eleWriter, EBMLId.CHAPTER_TIME_END, atom.end)\r\n    writeEbmlUid(eleWriter, EBMLId.CHAPTER_UID, atom.uid)\r\n    if (atom.display) {\r\n      writeChapterAtomDisplay(eleWriter, context, atom.display)\r\n    }\r\n  })\r\n}\r\n\r\nexport function writeChapter(writer: IOWriterSync, context: OMatroskaContext, chapter: Chapter) {\r\n  writeEleData(writer, context, EBMLId.EDITION_ENTRY, (eleWriter) => {\r\n    array.each(chapter.atom, (item) => {\r\n      writeChapterAtom(eleWriter, context, item)\r\n    })\r\n  })\r\n}\r\n\r\nexport function writeChapters(writer: IOWriterSync, context: OMatroskaContext, chapters: Chapters) {\r\n  writeEleData(writer, context, EBMLId.CHAPTERS, (eleWriter) => {\r\n    chapters.entry.forEach((chapter) => {\r\n      writeChapter(eleWriter, context, chapter)\r\n    })\r\n  })\r\n}\r\n\r\nexport function writeAttachment(writer: IOWriterSync, context: OMatroskaContext, attachment: Attachment) {\r\n\r\n  writeEbmlId(writer, EBMLId.ATTACHED_FILE)\r\n\r\n  const info: ElePositionInfo = {\r\n    pos: writer.getPos(),\r\n    length: 0,\r\n    bytes: 8\r\n  }\r\n  writeEbmlLength(writer, 0, 8)\r\n\r\n  const now = writer.getPos()\r\n  writeEbmlUid(writer, EBMLId.FILE_UID, attachment.uid)\r\n  writeEbmlString(writer, EBMLId.FILE_NAME, attachment.name)\r\n  writeEbmlString(writer, EBMLId.FILE_MIMETYPE, attachment.mime)\r\n  if (attachment.description) {\r\n    writeEbmlString(writer, EBMLId.FILE_DESC, attachment.description)\r\n  }\r\n  if (attachment.data) {\r\n    writeEbmlBuffer(writer, EBMLId.FILE_DATA, attachment.data.data)\r\n  }\r\n  info.length = writer.getPos() - now\r\n  context.elePositionInfos.push(info)\r\n}\r\n\r\nexport function writeAttachments(writer: IOWriterSync, context: OMatroskaContext, attachments: Attachments) {\r\n  const old = context.elePositionInfos\r\n  context.elePositionInfos = []\r\n\r\n  writeEbmlId(writer, EBMLId.ATTACHMENTS)\r\n\r\n  const info: ElePositionInfo = {\r\n    pos: writer.getPos(),\r\n    length: 0,\r\n    bytes: 8\r\n  }\r\n  writeEbmlLength(writer, 0, 8)\r\n\r\n  const now = writer.getPos()\r\n  attachments.entry.forEach((attachment) => {\r\n    writeAttachment(writer, context, attachment)\r\n  })\r\n\r\n  info.length = writer.getPos() - now\r\n  context.elePositionInfos.push(info)\r\n\r\n  updatePositionSize(writer, context)\r\n\r\n  context.elePositionInfos = old\r\n}\r\n","/*\r\n * libmedia crypto util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport function random(buffer: Uint8Array) {\r\n  if (defined(ENV_NODE)) {\r\n    const crypto = require('crypto')\r\n    crypto.randomFillSync(buffer)\r\n  }\r\n  else {\r\n    crypto.getRandomValues(buffer)\r\n  }\r\n}\r\n","/*\r\n * libmedia video pixel util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { PixelFormatDescriptor, PixelFormatDescriptorsMap, PixelFormatFlags } from '../pixelFormatDescriptor'\r\nimport { AVChromaLocation, AVPixelFormat } from '../pixfmt'\r\nimport * as errorType from '../error'\r\nimport { INT32_MAX } from '../constant'\r\nimport { memset } from 'cheap/std/memory'\r\nimport * as stack from 'cheap/stack'\r\nimport { avFree, avMalloc } from './mem'\r\nimport alignFunc from 'common/math/align'\r\n\r\nexport function chromaLocation2Pos(pos: AVChromaLocation) {\r\n  if (pos <= AVChromaLocation.AVCHROMA_LOC_UNSPECIFIED || pos >= AVChromaLocation.AVCHROMA_LOC_NB) {\r\n    return\r\n  }\r\n  return {\r\n    x: (pos & 1) * 128,\r\n    y: ((pos >>> 1) ^ (pos < 4 ? 1 : 0)) * 128\r\n  }\r\n}\r\n\r\nfunction getMaxPixSteps(desc: PixelFormatDescriptor) {\r\n  const maxPixSteps: int32[] = [0, 0, 0, 0]\r\n  const maxPixStepsComps: int32[] = [0, 0, 0, 0]\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    if (desc.comp[i] && desc.comp[i].step > maxPixSteps[desc.comp[i].plane]) {\r\n      maxPixSteps[desc.comp[i].plane] = desc.comp[i].step\r\n      maxPixStepsComps[desc.comp[i].plane] = i\r\n    }\r\n  }\r\n\r\n  return {\r\n    maxPixSteps,\r\n    maxPixStepsComps\r\n  }\r\n}\r\n\r\nfunction setSystematicPal(pal: pointer<uint32>, pixfmt: AVPixelFormat) {\r\n  for (let i = 0; i < 256; i++) {\r\n    let r, g, b\r\n\r\n    switch (pixfmt) {\r\n      case AVPixelFormat.AV_PIX_FMT_RGB8:\r\n        r = (i >> 5) * 36\r\n        g = ((i >> 2) & 7) * 36\r\n        b = (i & 3) * 85\r\n        break\r\n      case AVPixelFormat.AV_PIX_FMT_BGR8:\r\n        b = (i >> 6) * 85\r\n        g = ((i >> 3) & 7) * 36\r\n        r = (i & 7) * 36\r\n        break\r\n      case AVPixelFormat.AV_PIX_FMT_RGB4_BYTE:\r\n        r = (i >> 3) * 255\r\n        g = ((i >> 1) & 3) * 85\r\n        b = (i & 1) * 255\r\n        break\r\n      case AVPixelFormat.AV_PIX_FMT_BGR4_BYTE:\r\n        b = (i >> 3) * 255\r\n        g = ((i >> 1) & 3) * 85\r\n        r = (i & 1) * 255\r\n        break\r\n      case AVPixelFormat.AV_PIX_FMT_GRAY8:\r\n        r = b = g = i\r\n        break\r\n      default:\r\n        return errorType.INVALID_ARGUMENT\r\n    }\r\n    pal[i] = b + (g << 8) + (r << 16) + (0xFF << 24)\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nfunction pixelGetLinesize_(width: int32, plane: int32, maxStep: int32, maxStepComp: int32, desc: PixelFormatDescriptor) {\r\n  if (!desc) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  if (width < 0) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  const s = ( maxStepComp === 1 || maxStepComp === 2) ? desc.log2ChromaW : 0\r\n\r\n  const shiftedW = ((width + (1 << s) - 1)) >>> s\r\n\r\n  if (shiftedW && maxStep > INT32_MAX / shiftedW) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  let linesize = maxStep * shiftedW\r\n\r\n  if (desc.flags & PixelFormatFlags.BIT_STREAM) {\r\n    linesize = (linesize + 7) >>> 3\r\n  }\r\n\r\n  return linesize\r\n}\r\n\r\nexport function pixelGetLinesize(pixfmt: AVPixelFormat, width: int32, plane: int32) {\r\n  const desc = PixelFormatDescriptorsMap[pixfmt]\r\n\r\n  if (!desc) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  const { maxPixSteps, maxPixStepsComps } = getMaxPixSteps(desc)\r\n\r\n  return pixelGetLinesize_(width, plane, maxPixSteps[plane], maxPixStepsComps[plane], desc)\r\n}\r\n\r\nexport function pixelFillLinesizes(linesizes: pointer<int32>, pixfmt: AVPixelFormat, width: int32) {\r\n  const desc = PixelFormatDescriptorsMap[pixfmt]\r\n\r\n  if (!desc) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  const { maxPixSteps, maxPixStepsComps } = getMaxPixSteps(desc)\r\n\r\n  memset(linesizes, 0, 4 * sizeof(linesizes[0]))\r\n\r\n  let ret = 0\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    if ((ret = pixelGetLinesize_(width, i, maxPixSteps[i], maxPixStepsComps[i], desc)) < 0) {\r\n      return ret\r\n    }\r\n    linesizes[i] = ret\r\n  }\r\n}\r\n\r\nexport function pixelFillPlaneSizes(sizes: pointer<int32>, pixfmt: AVPixelFormat, height: int32, linesizes: pointer<int32>) {\r\n  const hasPlane = [0, 0, 0, 0]\r\n\r\n  const desc = PixelFormatDescriptorsMap[pixfmt]\r\n\r\n  if (!desc) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  memset(sizes, 0, 4 * sizeof(sizes[0]))\r\n\r\n  if (linesizes[0] > INT32_MAX / height) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  sizes[0] = linesizes[0] * height\r\n\r\n  if (desc.flags & PixelFormatFlags.PALETTE) {\r\n    sizes[1] = 256 * 4\r\n    return 0\r\n  }\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    if (desc.comp[i]) {\r\n      hasPlane[desc.comp[i].plane] = 1\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 4 && hasPlane[i]; i++) {\r\n    let s = (i === 1 || i === 2) ? desc.log2ChromaH : 0\r\n    let h = (height + (1 << s) - 1) >> s\r\n\r\n    if (linesizes[i] > INT32_MAX / h) {\r\n      return errorType.INVALID_ARGUMENT\r\n    }\r\n\r\n    sizes[i] = h * linesizes[i]\r\n  }\r\n  return 0\r\n}\r\n\r\nexport function pixelFillPointer(\r\n  data: pointer<pointer<uint8>>,\r\n  pixfmt: AVPixelFormat,\r\n  height: int32,\r\n  ptr: pointer<uint8>,\r\n  linesizes: pointer<int32>\r\n) {\r\n  const linesizes1 = reinterpret_cast<pointer<int32>>(stack.malloc(sizeof(linesizes[0]) * 4))\r\n  const sizes = reinterpret_cast<pointer<size>>(stack.malloc(sizeof(size) * 4))\r\n\r\n  memset(data, 0, 4 * sizeof(data[0]))\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    linesizes1[i] = linesizes[i]\r\n  }\r\n\r\n  let ret = pixelFillPlaneSizes(sizes, pixfmt, height, linesizes1)\r\n\r\n  if (ret < 0) {\r\n    defer()\r\n    return ret\r\n  }\r\n\r\n  ret = 0\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    if (sizes[i] > INT32_MAX - ret) {\r\n      defer()\r\n      return errorType.INVALID_ARGUMENT\r\n    }\r\n    ret += sizes[i]\r\n  }\r\n\r\n  if (!ptr) {\r\n    defer()\r\n    return ret\r\n  }\r\n\r\n  data[0] = ptr\r\n  for (let i = 1; i < 4 && sizes[i]; i++) {\r\n    data[i] = reinterpret_cast<pointer<uint8>>(data[i - 1] + sizes[i - 1])\r\n  }\r\n\r\n  defer()\r\n  return ret\r\n\r\n  function defer() {\r\n    stack.free(sizeof(linesizes[0]) * 4)\r\n    stack.free(sizeof(size) * 4)\r\n  }\r\n}\r\n\r\nexport function pixelAlloc(\r\n  pointers: pointer<pointer<uint8>>,\r\n  linesizes: pointer<int32>,\r\n  w: int32,\r\n  h: int32,\r\n  pixfmt: AVPixelFormat,\r\n  align: int32 = 1\r\n) {\r\n\r\n  const desc = PixelFormatDescriptorsMap[pixfmt]\r\n\r\n  if (!desc) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  const linesizes1 = reinterpret_cast<pointer<int32>>(stack.malloc(sizeof(linesizes[0]) * 4))\r\n  const sizes = reinterpret_cast<pointer<size>>(stack.malloc(sizeof(size) * 4))\r\n\r\n  let ret = 0\r\n\r\n  if ((ret = pixelFillLinesizes(linesizes, pixfmt, align > 7 ? alignFunc(w, 8) : w)) < 0) {\r\n    defer()\r\n    return ret\r\n  }\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    linesizes[i] = alignFunc(linesizes[i], align)\r\n    linesizes1[i] = linesizes[i]\r\n  }\r\n\r\n  if ((ret = pixelFillPlaneSizes(sizes, pixfmt, h, linesizes1)) < 0) {\r\n    defer()\r\n    return ret\r\n  }\r\n\r\n  let totalSize = align\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    if (totalSize > INT32_MAX - sizes[i]) {\r\n      defer()\r\n      return errorType.INVALID_ARGUMENT\r\n    }\r\n    totalSize += sizes[i]\r\n  }\r\n\r\n  const buf = avMalloc(totalSize)\r\n\r\n  if (!buf) {\r\n    defer()\r\n    return errorType.NO_MEMORY\r\n  }\r\n\r\n  if ((ret = pixelFillPointer(pointers, pixfmt, h, buf, linesizes)) < 0) {\r\n    defer()\r\n    return ret\r\n  }\r\n\r\n  if (desc.flags & PixelFormatFlags.PALETTE) {\r\n    if (align < 4) {\r\n      avFree(buf)\r\n      defer()\r\n      return ret\r\n    }\r\n    setSystematicPal(reinterpret_cast<pointer<uint32>>(pointers[1]), pixfmt)\r\n  }\r\n\r\n  if ((desc.flags & PixelFormatFlags.PALETTE)\r\n    && pointers[1]\r\n    && pointers[1] - pointers[0] > linesizes[0] * h\r\n  ) {\r\n    /* zero-initialize the padding before the palette */\r\n    memset(pointers[0] + linesizes[0] * h, 0, pointers[1] - pointers[0] - linesizes[0] * h)\r\n  }\r\n\r\n  defer()\r\n  return ret\r\n\r\n  function defer() {\r\n    stack.free(sizeof(linesizes[0]) * 4)\r\n    stack.free(sizeof(size) * 4)\r\n  }\r\n}\r\n\r\nexport function pixelGetSize(pixfmt: AVPixelFormat, width: int32, height: int32, align: int32) {\r\n  const desc = PixelFormatDescriptorsMap[pixfmt]\r\n\r\n  if (!desc) {\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  const linesizes = reinterpret_cast<pointer<int32>>(stack.malloc(sizeof(int32) * 4))\r\n  const alignedLinesizes = reinterpret_cast<pointer<int32>>(stack.malloc(sizeof(int32) * 4))\r\n  const sizes = reinterpret_cast<pointer<size>>(stack.malloc(sizeof(size) * 4))\r\n\r\n  let ret = 0\r\n\r\n  if ((ret = pixelFillLinesizes(linesizes, pixfmt, width)) < 0) {\r\n    defer()\r\n    return ret\r\n  }\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    alignedLinesizes[i] = alignFunc(linesizes[i], align)\r\n  }\r\n\r\n  if ((ret = pixelFillPlaneSizes(sizes, pixfmt, height, alignedLinesizes)) < 0) {\r\n    defer()\r\n    return ret\r\n  }\r\n\r\n  let totalSize = 0\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    if (totalSize > INT32_MAX - sizes[i]) {\r\n      defer()\r\n      return errorType.INVALID_ARGUMENT\r\n    }\r\n    totalSize += sizes[i]\r\n  }\r\n\r\n  defer()\r\n\r\n  return totalSize\r\n\r\n  function defer() {\r\n    stack.free(sizeof(int32) * 4)\r\n    stack.free(sizeof(int32) * 4)\r\n    stack.free(sizeof(size) * 4)\r\n  }\r\n}\r\n","export default function align(value: number, alignment: number) {\r\n  return (value + (alignment - 1)) & ~(alignment - 1)\r\n}\r\n"],"names":[],"sourceRoot":""}