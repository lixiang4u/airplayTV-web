{"version":3,"file":"src_avnetwork_ioLoader_DashIOLoader_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avnetwork/ioLoader/DashIOLoader.ts","webpack://AVTranscoder/./src/avprotocol/dash/parser.ts","webpack://AVTranscoder/./src/common/util/xml2Json.ts"],"sourcesContent":["/*\r\n * libmedia dash loader\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Sleep from 'common/timer/Sleep'\r\nimport IOLoader, { IOLoaderAudioStreamInfo, IOLoaderStatus,\r\n  IOLoaderSubtitleStreamInfo, IOLoaderVideoStreamInfo, Range\r\n} from './IOLoader'\r\nimport * as object from 'common/util/object'\r\nimport { IOError } from 'common/io/error'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport * as logger from 'common/util/logger'\r\n\r\nimport dashParser from 'avprotocol/dash/parser'\r\nimport FetchIOLoader from './FetchIOLoader'\r\nimport { MPDMediaList } from 'avprotocol/dash/type'\r\nimport getTimestamp from 'common/function/getTimestamp'\r\nimport * as errorType from 'avutil/error'\r\nimport { Data } from 'common/types/type'\r\n\r\nconst FETCHED_HISTORY_LIST_MAX = 10\r\n\r\nexport interface FetchInfo {\r\n  url: string\r\n  headers?: Object\r\n  withCredentials?: boolean\r\n  referrerPolicy?: string\r\n}\r\n\r\ntype MediaType = 'audio' | 'video' | 'subtitle'\r\n\r\ninterface Resource {\r\n  type: MediaType\r\n  fetchedMap: Map<string, boolean>\r\n  fetchedHistoryList: string[]\r\n  loader: FetchIOLoader\r\n  segmentIndex: number\r\n  currentUri: string\r\n  selectedIndex: number\r\n  segments: string[]\r\n  initSegmentPadding: string\r\n  initedSegment: string\r\n}\r\n\r\nexport default class DashIOLoader extends IOLoader {\r\n\r\n  private info: FetchInfo\r\n\r\n  private range: Range\r\n\r\n  private mediaPlayList: MPDMediaList\r\n\r\n  private fetchMediaPlayListPromise: Promise<void>\r\n\r\n  private minBuffer: number\r\n\r\n  private audioResource: Resource\r\n  private videoResource: Resource\r\n  private subtitleResource: Resource\r\n\r\n  private createResource(type: MediaType): Resource {\r\n    return {\r\n      type,\r\n      fetchedMap: new Map(),\r\n      fetchedHistoryList: [],\r\n      loader: null,\r\n      segmentIndex: 0,\r\n      currentUri: '',\r\n      selectedIndex: 0,\r\n      segments: [],\r\n      initSegmentPadding: '',\r\n      initedSegment: ''\r\n    }\r\n  }\r\n\r\n  private async fetchMediaPlayList(resolve?: () => void) {\r\n    if (!resolve) {\r\n      if (this.fetchMediaPlayListPromise) {\r\n        return\r\n      }\r\n      this.fetchMediaPlayListPromise = new Promise((r) => {\r\n        resolve = r\r\n      })\r\n    }\r\n\r\n    const params: Data = {\r\n      method: 'GET',\r\n      headers: {},\r\n      mode: 'cors',\r\n      cache: 'default',\r\n      referrerPolicy: 'no-referrer-when-downgrade'\r\n    }\r\n    if (this.info.headers) {\r\n      object.each(this.info.headers, (value, key) => {\r\n        params.headers[key] = value\r\n      })\r\n    }\r\n\r\n    if (this.info.withCredentials) {\r\n      params.credentials = 'include'\r\n    }\r\n\r\n    if (this.info.referrerPolicy) {\r\n      params.referrerPolicy = this.info.referrerPolicy\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(this.info.url, params)\r\n      const text = await res.text()\r\n      this.mediaPlayList = dashParser(text, this.info.url)\r\n      this.minBuffer = this.mediaPlayList.minBufferTime\r\n\r\n      if (this.options.isLive) {\r\n        const needSegment = this.mediaPlayList.minBufferTime / this.mediaPlayList.maxSegmentDuration\r\n        const segmentCount = Math.max(\r\n          this.mediaPlayList.mediaList.audio && this.mediaPlayList.mediaList.audio[0]?.mediaSegments.length || 0,\r\n          this.mediaPlayList.mediaList.video && this.mediaPlayList.mediaList.video[0]?.mediaSegments.length || 0\r\n        )\r\n        if (segmentCount < needSegment) {\r\n          await new Sleep((needSegment - segmentCount) * this.mediaPlayList.maxSegmentDuration)\r\n\r\n          logger.warn(`wait for min buffer time, buffer: ${segmentCount * this.mediaPlayList.maxSegmentDuration}, need: ${\r\n            needSegment *  this.mediaPlayList.maxSegmentDuration\r\n          }`)\r\n\r\n          return this.fetchMediaPlayList(resolve)\r\n        }\r\n      }\r\n\r\n      if (this.mediaPlayList.type === 'vod') {\r\n        this.options.isLive = false\r\n      }\r\n      else {\r\n        this.options.isLive = true\r\n      }\r\n\r\n      if (this.mediaPlayList.mediaList.audio.length) {\r\n        const media = this.mediaPlayList.mediaList.audio[this.audioResource.selectedIndex]\r\n        if (media.file) {\r\n          this.audioResource.segments = [media.file]\r\n        }\r\n        else {\r\n          if (this.options.isLive && this.audioResource.initedSegment === media.initSegment) {\r\n            this.audioResource.segments = media.mediaSegments.map((s) => s.url)\r\n          }\r\n          else {\r\n            this.audioResource.segments = [media.initSegment].concat(media.mediaSegments.map((s) => s.url))\r\n            this.audioResource.initedSegment = media.initSegment\r\n          }\r\n        }\r\n      }\r\n      if (this.mediaPlayList.mediaList.video.length) {\r\n        const media = this.mediaPlayList.mediaList.video[this.videoResource.selectedIndex]\r\n        if (media.file) {\r\n          this.videoResource.segments = [media.file]\r\n        }\r\n        else {\r\n          if (this.options.isLive && this.videoResource.initedSegment === media.initSegment) {\r\n            this.videoResource.segments = media.mediaSegments.map((s) => s.url)\r\n          }\r\n          else {\r\n            this.videoResource.segments = [media.initSegment].concat(media.mediaSegments.map((s) => s.url))\r\n            this.videoResource.initedSegment = media.initSegment\r\n          }\r\n        }\r\n      }\r\n      if (this.mediaPlayList.mediaList.subtitle.length) {\r\n        const media = this.mediaPlayList.mediaList.subtitle[this.subtitleResource.selectedIndex]\r\n        if (media.file) {\r\n          this.subtitleResource.segments = [media.file]\r\n        }\r\n        else {\r\n          if (this.options.isLive && this.subtitleResource.initedSegment === media.initSegment) {\r\n            this.subtitleResource.segments = media.mediaSegments.map((s) => s.url)\r\n          }\r\n          else {\r\n            this.subtitleResource.segments = [media.initSegment].concat(media.mediaSegments.map((s) => s.url))\r\n            this.subtitleResource.initedSegment = media.initSegment\r\n          }\r\n        }\r\n      }\r\n\r\n      resolve()\r\n      this.fetchMediaPlayListPromise = null\r\n      this.status = IOLoaderStatus.BUFFERING\r\n      this.retryCount = 0\r\n\r\n      return this.mediaPlayList\r\n    }\r\n    catch (error) {\r\n      if (this.retryCount < this.options.retryCount) {\r\n        this.retryCount++\r\n\r\n        logger.error(`failed fetch mpd file, retry(${this.retryCount}/3)`)\r\n\r\n        await new Sleep(this.status === IOLoaderStatus.BUFFERING ? this.options.retryInterval : 5)\r\n        return this.fetchMediaPlayList(resolve)\r\n      }\r\n      else {\r\n        this.status = IOLoaderStatus.ERROR\r\n        resolve()\r\n        logger.fatal(`DashLoader: exception, fetch slice error, error: ${error.message}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  public async open(info: FetchInfo, range: Range) {\r\n\r\n    if (this.status !== IOLoaderStatus.IDLE) {\r\n      return errorType.INVALID_OPERATE\r\n    }\r\n\r\n    this.info = info\r\n    this.range = range\r\n\r\n    if (!this.range.to) {\r\n      this.range.to = -1\r\n    }\r\n\r\n    this.range.from = Math.max(this.range.from, 0)\r\n\r\n    this.videoResource = this.createResource('video')\r\n    this.audioResource = this.createResource('audio')\r\n    this.subtitleResource = this.createResource('subtitle')\r\n\r\n    this.status = IOLoaderStatus.CONNECTING\r\n    this.retryCount = 0\r\n\r\n    await this.fetchMediaPlayList()\r\n\r\n    return 0\r\n  }\r\n\r\n  private async readResource(buffer: Uint8ArrayInterface, resource: Resource) {\r\n    let ret = 0\r\n\r\n    if (resource.loader) {\r\n      ret = await resource.loader.read(buffer)\r\n      if (ret !== IOError.END) {\r\n        return ret\r\n      }\r\n      else {\r\n        if (this.options.isLive) {\r\n          resource.fetchedMap.set(resource.currentUri, true)\r\n          if (resource.fetchedHistoryList.length === FETCHED_HISTORY_LIST_MAX) {\r\n            resource.fetchedMap.delete(resource.fetchedHistoryList.shift())\r\n          }\r\n          resource.fetchedHistoryList.push(resource.currentUri)\r\n        }\r\n        else {\r\n          resource.segmentIndex++\r\n          if (resource.segmentIndex >= resource.segments.length) {\r\n            return IOError.END\r\n          }\r\n        }\r\n        resource.loader = null\r\n      }\r\n    }\r\n\r\n    if (this.options.isLive) {\r\n      const segments = resource.segments.filter((url) => {\r\n        return !resource.fetchedMap.get(url)\r\n      })\r\n\r\n      if (!segments.length) {\r\n        if (this.mediaPlayList.isEnd) {\r\n          return IOError.END\r\n        }\r\n\r\n        const wait = ((this.mediaPlayList.duration || this.mediaPlayList.minimumUpdatePeriod)\r\n          - (getTimestamp() - this.mediaPlayList.timestamp) / 1000)\r\n        if (wait > 0) {\r\n          await new Sleep(Math.max(wait, 2))\r\n        }\r\n        if (this.fetchMediaPlayListPromise) {\r\n          await this.fetchMediaPlayListPromise\r\n          if (this.status === IOLoaderStatus.ERROR) {\r\n            return IOError.END\r\n          }\r\n        }\r\n        else {\r\n          await this.fetchMediaPlayList()\r\n        }\r\n        return this.readResource(buffer, resource)\r\n      }\r\n\r\n      resource.currentUri = segments[0]\r\n\r\n      resource.loader = new FetchIOLoader(object.extend({}, this.options, { disableSegment: true, loop: false }))\r\n\r\n      await resource.loader.open(\r\n        {\r\n          url: resource.currentUri\r\n        },\r\n        {\r\n          from: 0,\r\n          to: -1\r\n        }\r\n      )\r\n      return resource.loader.read(buffer)\r\n    }\r\n    else {\r\n      resource.loader = new FetchIOLoader(object.extend({}, this.options, { disableSegment: true, loop: false }))\r\n      if (resource.initSegmentPadding) {\r\n        await resource.loader.open(\r\n          {\r\n            url: resource.initSegmentPadding\r\n          },\r\n          {\r\n            from: 0,\r\n            to: -1\r\n          }\r\n        )\r\n        resource.initSegmentPadding = null\r\n        resource.segmentIndex--\r\n      }\r\n      else {\r\n        await resource.loader.open(\r\n          {\r\n            url: resource.segments[resource.segmentIndex]\r\n          },\r\n          {\r\n            from: 0,\r\n            to: -1\r\n          }\r\n        )\r\n      }\r\n      return resource.loader.read(buffer)\r\n    }\r\n  }\r\n\r\n  public async read(buffer: Uint8ArrayInterface, options: {\r\n    mediaType: MediaType\r\n  }): Promise<number> {\r\n    if (options.mediaType === 'audio') {\r\n      return this.readResource(buffer, this.audioResource)\r\n    }\r\n    else if (options.mediaType === 'video') {\r\n      return this.readResource(buffer, this.videoResource)\r\n    }\r\n    else if (options.mediaType === 'subtitle') {\r\n      return this.readResource(buffer, this.subtitleResource)\r\n    }\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n\r\n  private async seekResource(timestamp: int64, resource: Resource) {\r\n    if (resource.loader) {\r\n      await resource.loader.abort()\r\n      resource.loader = null\r\n    }\r\n\r\n    let seekTime = static_cast<int32>(timestamp)\r\n\r\n    if (resource.segments) {\r\n      let index = 0\r\n      const mediaList = resource.type === 'audio'\r\n        ? this.mediaPlayList.mediaList.audio\r\n        : (resource.type === 'video'\r\n          ? this.mediaPlayList.mediaList.video\r\n          : this.mediaPlayList.mediaList.subtitle\r\n        )\r\n      const segmentList = mediaList[resource.selectedIndex].mediaSegments\r\n      if (segmentList?.length) {\r\n        for (let i = 0; i < segmentList.length; i++) {\r\n          if (seekTime >= segmentList[i].start * 1000 && seekTime < segmentList[i].end * 1000) {\r\n            index = i\r\n            break\r\n          }\r\n        }\r\n      }\r\n      resource.segmentIndex = index + (mediaList[resource.selectedIndex].initSegment ? 1 : 0)\r\n    }\r\n  }\r\n\r\n  public async seek(timestamp: int64, options: {\r\n    mediaType: MediaType\r\n  }) {\r\n\r\n    if (options.mediaType === 'audio' && this.audioResource.loader) {\r\n      await this.seekResource(timestamp, this.audioResource)\r\n    }\r\n    if (options.mediaType === 'video' && this.videoResource.loader) {\r\n      await this.seekResource(timestamp, this.videoResource)\r\n    }\r\n    if (options.mediaType === 'subtitle' && this.subtitleResource.loader) {\r\n      await this.seekResource(timestamp, this.subtitleResource)\r\n    }\r\n\r\n    if (this.status === IOLoaderStatus.COMPLETE) {\r\n      this.status = IOLoaderStatus.BUFFERING\r\n    }\r\n    return 0\r\n  }\r\n\r\n  public async size() {\r\n    return 0n\r\n  }\r\n\r\n  public async abort() {\r\n    if (this.videoResource.loader) {\r\n      await this.videoResource.loader.abort()\r\n      this.videoResource.loader = null\r\n    }\r\n    if (this.audioResource.loader) {\r\n      await this.audioResource.loader.abort()\r\n      this.audioResource.loader = null\r\n    }\r\n    if (this.subtitleResource.loader) {\r\n      await this.subtitleResource.loader.abort()\r\n      this.subtitleResource.loader = null\r\n    }\r\n  }\r\n\r\n  public async stop() {\r\n    await this.abort()\r\n    this.status = IOLoaderStatus.IDLE\r\n  }\r\n\r\n  public getDuration() {\r\n    return this.mediaPlayList.duration\r\n  }\r\n\r\n  public hasVideo() {\r\n    return this.mediaPlayList?.mediaList.video.length > 0\r\n  }\r\n\r\n  public hasAudio() {\r\n    return this.mediaPlayList?.mediaList.audio.length > 0\r\n  }\r\n\r\n  public hasSubtitle() {\r\n    return this.mediaPlayList?.mediaList.subtitle.length > 0\r\n  }\r\n\r\n  public getVideoList(): IOLoaderVideoStreamInfo {\r\n    if (this.hasVideo()) {\r\n      return {\r\n        list: this.mediaPlayList.mediaList.video.map((media) => {\r\n          return {\r\n            width: media.width,\r\n            height: media.height,\r\n            frameRate: media.frameRate,\r\n            codecs: media.codecs\r\n          }\r\n        }),\r\n        selectedIndex: this.videoResource.selectedIndex\r\n      }\r\n    }\r\n    return {\r\n      list: [],\r\n      selectedIndex: 0\r\n    }\r\n  }\r\n\r\n  public getAudioList(): IOLoaderAudioStreamInfo {\r\n    if (this.hasAudio()) {\r\n      return {\r\n        list: this.mediaPlayList.mediaList.audio.map((media) => {\r\n          return {\r\n            lang: media.lang,\r\n            codecs: media.codecs\r\n          }\r\n        }),\r\n        selectedIndex: this.audioResource.selectedIndex\r\n      }\r\n    }\r\n    return {\r\n      list: [],\r\n      selectedIndex: 0\r\n    }\r\n  }\r\n\r\n  public getSubtitleList(): IOLoaderSubtitleStreamInfo {\r\n    if (this.hasSubtitle()) {\r\n      return {\r\n        list: this.mediaPlayList.mediaList.subtitle.map((media) => {\r\n          return {\r\n            lang: media.lang,\r\n            codecs: media.codecs\r\n          }\r\n        }),\r\n        selectedIndex: this.subtitleResource.selectedIndex\r\n      }\r\n    }\r\n    return {\r\n      list: [],\r\n      selectedIndex: 0\r\n    }\r\n  }\r\n\r\n  public selectVideo(index: number) {\r\n    if (index !== this.videoResource.selectedIndex\r\n      && this.hasVideo()\r\n      && index >= 0\r\n      && index < this.mediaPlayList.mediaList.video.length\r\n    ) {\r\n      this.videoResource.selectedIndex = index\r\n      const media = this.mediaPlayList.mediaList.video[this.videoResource.selectedIndex]\r\n      if (media.file) {\r\n        this.videoResource.segments = [media.file]\r\n      }\r\n      else {\r\n        this.videoResource.segments = [media.initSegment].concat(media.mediaSegments.map((s) => s.url))\r\n        this.videoResource.initSegmentPadding = media.initSegment\r\n      }\r\n    }\r\n  }\r\n\r\n  public selectAudio(index: number) {\r\n    if (index !== this.audioResource.selectedIndex\r\n      && this.hasAudio()\r\n      && index >= 0\r\n      && index < this.mediaPlayList.mediaList.audio.length\r\n    ) {\r\n      this.audioResource.selectedIndex = index\r\n      const media = this.mediaPlayList.mediaList.audio[this.audioResource.selectedIndex]\r\n      if (media.file) {\r\n        this.audioResource.segments = [media.file]\r\n      }\r\n      else {\r\n        this.audioResource.segments = [media.initSegment].concat(media.mediaSegments.map((s) => s.url))\r\n        this.audioResource.initSegmentPadding = media.initSegment\r\n      }\r\n    }\r\n  }\r\n\r\n  public selectSubtitle(index: number) {\r\n    if (index !== this.subtitleResource.selectedIndex\r\n      && this.hasSubtitle()\r\n      && index >= 0\r\n      && index < this.mediaPlayList.mediaList.subtitle.length\r\n    ) {\r\n      this.subtitleResource.selectedIndex = index\r\n      const media = this.mediaPlayList.mediaList.subtitle[this.subtitleResource.selectedIndex]\r\n      if (media.file) {\r\n        this.subtitleResource.segments = [media.file]\r\n      }\r\n      else {\r\n        this.subtitleResource.segments = [media.initSegment].concat(media.mediaSegments.map((s) => s.url))\r\n        this.subtitleResource.initSegmentPadding = media.initSegment\r\n      }\r\n    }\r\n  }\r\n\r\n  public getMinBuffer() {\r\n    return this.minBuffer\r\n  }\r\n}\r\n","/**\r\n * from https://github.com/bytedance/xgplayer/blob/main/packages/xgplayer-dash/src/m4s/mpd.js\r\n * MIT license \r\n */\r\n\r\nimport xml2Json from 'common/util/xml2Json'\r\nimport { MPD, MPDMediaList, SegmentTemplate } from './type'\r\nimport { Data } from 'common/types/type'\r\nimport * as is from 'common/util/is'\r\nimport toString from 'common/function/toString'\r\nimport getTimestamp from 'common/function/getTimestamp'\r\n\r\nfunction parseMPD(xmlString: string) {\r\n  if (!xmlString) {\r\n    return null\r\n  }\r\n  return xml2Json(xmlString) as {\r\n    MPD: MPD\r\n  }\r\n}\r\n\r\nfunction durationConvert(value: string) {\r\n  let Hours = 0\r\n  let Minutes = 0\r\n  let Seconds = 0\r\n  value = value.slice(value.indexOf('PT') + 2)\r\n  if (value.indexOf('H') > -1 && value.indexOf('M') > -1 && value.indexOf('S') > -1) {\r\n    Hours = parseFloat(value.slice(0, value.indexOf('H')))\r\n    Minutes = parseFloat(value.slice(value.indexOf('H') + 1, value.indexOf('M')))\r\n    Seconds = parseFloat(value.slice(value.indexOf('M') + 1, value.indexOf('S')))\r\n  }\r\n  else if (value.indexOf('H') < 0 && value.indexOf('M') > 0 && value.indexOf('S') > -1) {\r\n    Minutes = parseFloat(value.slice(0, value.indexOf('M')))\r\n    Seconds = parseFloat(value.slice(value.indexOf('M') + 1, value.indexOf('S')))\r\n  }\r\n  else if (value.indexOf('H') < 0 && value.indexOf('M') < 0 && value.indexOf('S') > -1) {\r\n    Seconds = parseFloat(value.slice(0, value.indexOf('S')))\r\n  }\r\n  return Hours * 3600 + Minutes * 60 + Seconds\r\n}\r\n\r\nfunction preFixInteger(num: number, n: number) {\r\n  return (Array(n).join('0') + num).slice(-n)\r\n}\r\n\r\nfunction parseRational(value: string) {\r\n  if (!value) {\r\n    return 0\r\n  }\r\n  if (value.indexOf('/') > -1) {\r\n    const rational = value.split('/')\r\n    return parseFloat(rational[0]) / parseFloat(rational[1])\r\n  }\r\n  return parseFloat(value)\r\n}\r\n\r\nexport default function parser(xml: string, url: string) {\r\n  const list: MPDMediaList = {\r\n    source: xml,\r\n    mediaList: {\r\n      audio: [],\r\n      video: [],\r\n      subtitle: []\r\n    },\r\n    type: 'live',\r\n    isEnd: false,\r\n    duration: 0,\r\n    minBufferTime: 0,\r\n    maxSegmentDuration: 0,\r\n    minimumUpdatePeriod: 0,\r\n    timestamp: getTimestamp()\r\n  }\r\n\r\n  const repID = []\r\n\r\n  const result = parseMPD(xml).MPD\r\n  if (result.type === 'static') {\r\n    list.type = 'vod'\r\n    list.isEnd = true\r\n  }\r\n\r\n  if (result.minBufferTime) {\r\n    list.minBufferTime = durationConvert(result.minBufferTime)\r\n  }\r\n  if (result.maxSegmentDuration) {\r\n    list.maxSegmentDuration = durationConvert(result.maxSegmentDuration)\r\n  }\r\n  if (result.minimumUpdatePeriod) {\r\n    list.minimumUpdatePeriod = durationConvert(result.minimumUpdatePeriod)\r\n  }\r\n  if (result.mediaPresentationDuration) {\r\n    list.duration = durationConvert(result.mediaPresentationDuration)\r\n  }\r\n  let MpdBaseURL = ''\r\n  if (result.BaseURL) {\r\n    MpdBaseURL = result.BaseURL\r\n  }\r\n  const Period = is.array(result.Period) ? result.Period[0] : result.Period\r\n  if (!list.duration && Period && Period.duration) {\r\n    list.duration = durationConvert(Period.duration)\r\n  }\r\n\r\n  const AdaptationSet = is.array(Period.AdaptationSet) ? Period.AdaptationSet : [Period.AdaptationSet]\r\n\r\n  AdaptationSet.forEach((asItem, asIndex) => {\r\n    let mimeType = 'video/mp4'\r\n    let codecs = 'avc1.64001E'\r\n    let width = 640\r\n    let height = 360\r\n    let maxWidth = 640\r\n    let maxHeight = 360\r\n    let frameRate = 25\r\n    let sar = '1:1'\r\n    let startWithSAP = '1'\r\n    let bandwidth = 588633\r\n    let adaptationSetBaseUrl = MpdBaseURL\r\n    let lang = 'und'\r\n    if (asItem.BaseURL) {\r\n      adaptationSetBaseUrl += asItem.BaseURL\r\n    }\r\n    if (asItem.lang) {\r\n      lang = asItem.lang\r\n    }\r\n\r\n    if (asItem.mimeType) {\r\n      mimeType = asItem.mimeType\r\n      if (mimeType === 'video/mp4') {\r\n        codecs = asItem.codecs\r\n        width = parseFloat(asItem.width)\r\n        height = parseFloat(asItem.height)\r\n        if (asItem.maxWidth) {\r\n          maxWidth = parseFloat(asItem.maxWidth)\r\n        }\r\n        if (asItem.maxHeight) {\r\n          maxHeight = parseFloat(asItem.maxHeight)\r\n        }\r\n        if (asItem.frameRate) {\r\n          frameRate = parseRational(asItem.frameRate)\r\n        }\r\n        sar = asItem.sar\r\n        startWithSAP = asItem.startWithSAP\r\n        bandwidth = parseFloat(asItem.bandwidth)\r\n      }\r\n      else if (mimeType === 'audio/mp4') {\r\n        codecs = asItem.codecs\r\n        startWithSAP = asItem.startWithSAP\r\n        bandwidth = parseFloat(asItem.bandwidth)\r\n      }\r\n    }\r\n    else {\r\n      if (asItem.maxWidth) {\r\n        maxWidth = parseFloat(asItem.maxWidth)\r\n      }\r\n      if (asItem.maxHeight) {\r\n        maxHeight = parseFloat(asItem.maxHeight)\r\n      }\r\n      if (asItem.frameRate) {\r\n        frameRate = parseRational(asItem.frameRate)\r\n      }\r\n    }\r\n\r\n    const Representation = is.array(asItem.Representation) ? asItem.Representation : [asItem.Representation]\r\n\r\n    Representation.forEach((rItem, rIndex: number) => {\r\n      if (repID.indexOf(rItem.id) > -1) {\r\n        rItem.id = (parseInt(repID[repID.length - 1]) + 1).toString()\r\n      }\r\n      repID.push(rItem.id)\r\n      let initSegment = ''\r\n      const mediaSegments = []\r\n      let timescale = 0\r\n      let duration = 0\r\n      let baseURL = url.slice(0, url.lastIndexOf('/') + 1) + adaptationSetBaseUrl\r\n      if (rItem.mimeType) {\r\n        mimeType = rItem.mimeType\r\n      }\r\n      if (mimeType === 'video/mp4') {\r\n        if (rItem.codecs) {\r\n          codecs = rItem.codecs\r\n        }\r\n        if (rItem.width) {\r\n          width = parseFloat(rItem.width)\r\n        }\r\n        if (rItem.height) {\r\n          height = parseFloat(rItem.height)\r\n        }\r\n        if (rItem.maxWidth) {\r\n          maxWidth = parseFloat(rItem.maxWidth)\r\n        }\r\n        if (rItem.maxHeight) {\r\n          maxHeight = parseFloat(rItem.maxHeight)\r\n        }\r\n        if (rItem.frameRate) {\r\n          frameRate = parseFloat(rItem.frameRate)\r\n        }\r\n        if (rItem.sar) {\r\n          sar = rItem.sar\r\n        }\r\n        if (rItem.startWithSAP) {\r\n          startWithSAP = rItem.startWithSAP\r\n        }\r\n        if (rItem.bandwidth) {\r\n          bandwidth = parseFloat(rItem.bandwidth)\r\n        }\r\n      }\r\n      else {\r\n        if (rItem.codecs) {\r\n          codecs = rItem.codecs\r\n        }\r\n        if (rItem.startWithSAP) {\r\n          startWithSAP = rItem.startWithSAP\r\n        }\r\n        if (rItem.bandwidth) {\r\n          bandwidth = parseFloat(rItem.bandwidth)\r\n        }\r\n      }\r\n      if (rItem.BaseURL) {\r\n        baseURL += rItem.BaseURL\r\n      }\r\n      let encrypted = false\r\n      if (asItem.ContentProtection || rItem.ContentProtection) {\r\n        encrypted = true\r\n      }\r\n      if (rItem.SegmentBase) {\r\n        if (mimeType === 'video/mp4') {\r\n          list.mediaList.video.push({\r\n            id: rItem.id,\r\n            file: baseURL,\r\n            mimeType,\r\n            codecs,\r\n            width,\r\n            height,\r\n            maxWidth,\r\n            maxHeight,\r\n            frameRate,\r\n            sar,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            encrypted\r\n          })\r\n        }\r\n        else if (mimeType === 'audio/mp4') {\r\n          list.mediaList.audio.push({\r\n            id: rItem.id,\r\n            file: baseURL,\r\n            mimeType,\r\n            codecs,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            encrypted,\r\n            lang\r\n          })\r\n        }\r\n        else if (mimeType === 'application/mp4') {\r\n          list.mediaList.subtitle.push({\r\n            id: rItem.id,\r\n            file: baseURL,\r\n            mimeType,\r\n            codecs,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            encrypted,\r\n            lang\r\n          })\r\n        }\r\n      }\r\n      else {\r\n        let ST: SegmentTemplate\r\n        if (asItem.SegmentTemplate) {\r\n          ST = is.array(asItem.SegmentTemplate) ? asItem.SegmentTemplate[0] : asItem.SegmentTemplate\r\n        }\r\n        if (rItem.SegmentTemplate) {\r\n          ST = is.array(rItem.SegmentTemplate) ? rItem.SegmentTemplate[0] : rItem.SegmentTemplate\r\n        }\r\n\r\n        if (ST) {\r\n          const start = parseInt(ST.startNumber)\r\n          initSegment = ST.initialization\r\n          timescale = parseFloat(ST.timescale || '1')\r\n\r\n          if (ST.duration && !ST.SegmentTimeline) {\r\n            duration = parseFloat(ST.duration)\r\n            let segmentDuration = duration / timescale\r\n            const end = start + Math.ceil((list.duration || segmentDuration) / segmentDuration) - 1\r\n            for (let i = start; i <= end; i++) {\r\n              const startTime = segmentDuration * (i - start)\r\n              let endTime = segmentDuration * (i - start + 1)\r\n              if (i === end) {\r\n                segmentDuration = list.duration - segmentDuration * (end - start)\r\n                endTime = list.duration\r\n              }\r\n              mediaSegments.push({\r\n                idx: i,\r\n                start: startTime,\r\n                end: endTime,\r\n                url: baseURL + ST.media.replace(/\\$RepresentationID\\$/g, rItem.id).replace(/\\$Number(%(\\d+)d)?\\$/g, (s0, s1, s2) => {\r\n                  if (s2) {\r\n                    return preFixInteger(i, +s2)\r\n                  }\r\n                  return toString(i)\r\n                }),\r\n                segmentDuration\r\n              })\r\n            }\r\n          }\r\n          else if (ST.SegmentTimeline && ST.SegmentTimeline.S) {\r\n            const S = is.array(ST.SegmentTimeline.S) ? ST.SegmentTimeline.S : [ST.SegmentTimeline.S]\r\n            let startTime = 0\r\n            let index = start\r\n            for (let i = 0; i < S.length; i++) {\r\n              let d = parseFloat(S[i].d)\r\n              if (S[i].t) {\r\n                startTime = parseFloat(S[0].t)\r\n              }\r\n\r\n              let r = 1\r\n              if (S[i].r) {\r\n                r = parseInt(S[i].r) + 1\r\n              }\r\n              for (let j = 0; j < r; j++) {\r\n                mediaSegments.push({\r\n                  idx: index,\r\n                  start: startTime / timescale,\r\n                  end: (startTime + d) / timescale,\r\n                  url: baseURL + ST.media.replace(/\\$RepresentationID\\$/g, rItem.id)\r\n                    .replace(/\\$Number(%(\\d+)d)?\\$/g, (s0, s1, s2) => {\r\n                      if (s2) {\r\n                        return preFixInteger(index, +s2)\r\n                      }\r\n                      return toString(index)\r\n                    })\r\n                    .replace(/\\$Time\\$/g, toString(startTime)),\r\n                  segmentDuration: d / timescale\r\n                })\r\n                index++\r\n                startTime += d\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else if (rItem.SegmentList) {\r\n          const segmentList = is.array(rItem.SegmentList.SegmentURL) ? rItem.SegmentList.SegmentURL : [rItem.SegmentList.SegmentURL]\r\n          let startTime = 0\r\n          let duration = parseFloat(rItem.SegmentList.duration)\r\n          for (let i = 0; i < segmentList.length; i++) {\r\n            mediaSegments.push({\r\n              idx: i,\r\n              start: startTime / timescale,\r\n              end: (startTime + duration) / timescale,\r\n              url: baseURL + segmentList[i].media,\r\n              segmentDuration: duration / timescale\r\n            })\r\n            startTime += duration\r\n          }\r\n        }\r\n\r\n        if (mimeType === 'video/mp4') {\r\n          list.mediaList.video.push({\r\n            id: rItem.id,\r\n            baseURL,\r\n            initSegment: baseURL + initSegment.replace(/\\$RepresentationID\\$/g, rItem.id).replace(/\\$Bandwidth\\$/g, toString(bandwidth)),\r\n            mediaSegments,\r\n            mimeType,\r\n            codecs,\r\n            width,\r\n            height,\r\n            maxWidth,\r\n            maxHeight,\r\n            frameRate,\r\n            sar,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            encrypted\r\n          })\r\n        }\r\n        else if (mimeType === 'audio/mp4') {\r\n          list.mediaList.audio.push({\r\n            id: rItem.id,\r\n            baseURL,\r\n            initSegment: baseURL + initSegment.replace(/\\$RepresentationID\\$/g, rItem.id).replace(/\\$Bandwidth\\$/g, toString(bandwidth)),\r\n            mediaSegments,\r\n            mimeType,\r\n            codecs,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            encrypted,\r\n            lang\r\n          })\r\n        }\r\n        else if (mimeType === 'application/mp4') {\r\n          list.mediaList.subtitle.push({\r\n            id: rItem.id,\r\n            baseURL,\r\n            initSegment: baseURL + initSegment.replace(/\\$RepresentationID\\$/g, rItem.id).replace(/\\$Bandwidth\\$/g, toString(bandwidth)),\r\n            mediaSegments,\r\n            mimeType,\r\n            codecs,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            encrypted,\r\n            lang\r\n          })\r\n        }\r\n      }\r\n    })\r\n  });\r\n\r\n  ['video', 'audio'].forEach((mediaType) => {\r\n    list.mediaList[mediaType].sort((a: Data, b: Data) => {\r\n      return a.bandwidth - b.bandwidth\r\n    })\r\n  })\r\n\r\n  return list\r\n}\r\n","import * as array from './array'\r\n\r\ntype Options = {\r\n  aloneValueName?: string\r\n}\r\n\r\nconst defaultOptions: Options = {\r\n  aloneValueName: '_@attribute'\r\n}\r\n\r\ninterface StackItem {\r\n  obj: Record<string, any>\r\n  tag: string\r\n  start: number\r\n}\r\n\r\nconst splitChar = [' ', '/', '\"', '\\'', '<', '>']\r\n\r\nexport default function xml2Json(xmlStr: string, options = defaultOptions) {\r\n  // remove commented lines\r\n  xmlStr = xmlStr.replace(/<!--[\\s\\S]*?-->/g, '')\r\n  // replace special characters\r\n  xmlStr = xmlStr.replace(/[\\n\\t\\r]/g, '')\r\n  // replace leading spaces and tabs between elements\r\n  xmlStr = xmlStr.replace(/>[ \\t]+</g, '><')\r\n  // delete docType tags\r\n  xmlStr = xmlStr.replace(/<\\?[^>]*\\?>/g, '')\r\n\r\n  const stack: StackItem[] = []\r\n  let pos = 0\r\n\r\n  function addData(key: string, value: any) {\r\n    const item = stack[stack.length - 1]\r\n\r\n    if (!item) {\r\n      return\r\n    }\r\n\r\n    if (key !== options.aloneValueName && item.obj[options.aloneValueName] != null) {\r\n      item.obj[options.aloneValueName] = [item.obj[options.aloneValueName], {\r\n        tagName: key,\r\n        ...value\r\n      }]\r\n      return\r\n    }\r\n    if (item.obj[key] == null) {\r\n      item.obj[key] = value\r\n    }\r\n    else if (Array.isArray(item.obj[key])) {\r\n      item.obj[key].push(value)\r\n    }\r\n    else {\r\n      item.obj[key] = [item.obj[key], value]\r\n    }\r\n  }\r\n\r\n  function gotoToken(token: string) {\r\n    while (pos < xmlStr.length) {\r\n      if (xmlStr[pos] === token) {\r\n        return true\r\n      }\r\n      pos++\r\n    }\r\n    return false\r\n  }\r\n\r\n  function readIdentity() {\r\n    skipSpace()\r\n    let key = ''\r\n    while (pos < xmlStr.length) {\r\n      if (array.has(splitChar, xmlStr[pos])) {\r\n        break\r\n      }\r\n      key += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return key\r\n  }\r\n\r\n  function skipSpace() {\r\n    while (pos < xmlStr.length) {\r\n      if (!/\\s|\\r|\\n/.test(xmlStr[pos])) {\r\n        break\r\n      }\r\n      pos++\r\n    }\r\n  }\r\n\r\n  const emptyEndReg = /\\s/\r\n  const singleQuotation = /'/\r\n  const doubleQuotation = /\"/\r\n\r\n  function readAttrValue() {\r\n    if (pos >= xmlStr.length) {\r\n      return true\r\n    }\r\n    skipSpace()\r\n    // 默认属性值结束符为空格\r\n    let end = emptyEndReg\r\n    if (xmlStr[pos] === '\"' || xmlStr[pos] == '\\'') {\r\n      // 属性值是引号开始则结束符也是引号\r\n      end = xmlStr[pos] === '\"' ? doubleQuotation : singleQuotation\r\n      pos++\r\n    }\r\n    let value = ''\r\n    while (pos < xmlStr.length) {\r\n      if (end.test(xmlStr[pos])) {\r\n        pos++\r\n        break\r\n      }\r\n      value += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return value\r\n  }\r\n\r\n  function readAttr() {\r\n    while (true) {\r\n      skipSpace()\r\n      // 判断标签属性结束\r\n      if (xmlStr[pos] === '>' || xmlStr[pos] === '/') {\r\n        break\r\n      }\r\n      let key = readIdentity()\r\n      if (!key) {\r\n        break\r\n      }\r\n      if (key[key.length - 1] === '=') {\r\n        key = key.substring(0, key.length - 1)\r\n      }\r\n      else {\r\n        gotoToken('=')\r\n        pos++\r\n      }\r\n      const value = readAttrValue()\r\n      addData(key, value)\r\n    }\r\n  }\r\n\r\n  // innerText 当前位置到 < 之前\r\n  function readText() {\r\n    skipSpace()\r\n    let text = ''\r\n    while (pos < xmlStr.length) {\r\n      if (xmlStr[pos] === '<') {\r\n        break\r\n      }\r\n      text += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return text\r\n  }\r\n\r\n\r\n  function pop() {\r\n    // 处理 </> 跳出当前 tag\r\n    // 若是 <xx 则是子标签，进入下一次处理 \r\n    while (xmlStr[pos] === '<') {\r\n      const now = pos\r\n      pos++\r\n      skipSpace()\r\n      if (xmlStr[pos] === '/') {\r\n        pos++\r\n        const tag = readIdentity()\r\n        if (tag === stack[stack.length - 1].tag) {\r\n          if (stack.length > 1) {\r\n            const item = stack.pop()\r\n            addData(item.tag, item.obj)\r\n          }\r\n          gotoToken('>')\r\n          pos++\r\n          skipSpace()\r\n        }\r\n        else {\r\n          stack.pop()\r\n          gotoToken('>')\r\n          pos++\r\n          skipSpace()\r\n        }\r\n      }\r\n      else {\r\n        pos = now\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  function readTag() {\r\n    if (pos >= xmlStr.length) {\r\n      return\r\n    }\r\n\r\n    let start = pos\r\n    skipSpace()\r\n    // innerText 的后面部分，中间被标签分割出现这种情况，将其加入 context 中\r\n    if (xmlStr[pos] !== '<') {\r\n      pos = start\r\n      addData(options.aloneValueName, readText())\r\n      pop()\r\n      return readTag()\r\n    }\r\n\r\n    let has = gotoToken('<')\r\n    if (!has) {\r\n      return\r\n    }\r\n\r\n    start = pos\r\n    pos++\r\n\r\n    const tag = readIdentity()\r\n    stack.push({\r\n      obj: {},\r\n      tag,\r\n      start\r\n    })\r\n\r\n    readAttr()\r\n    skipSpace()\r\n    // 自闭合 tag\r\n    if (xmlStr[pos] === '/') {\r\n      pos++\r\n      if (stack.length > 1) {\r\n        const item = stack.pop()\r\n        addData(item.tag, item.obj)\r\n      }\r\n      gotoToken('>')\r\n      pos++\r\n      pop()\r\n      return readTag()\r\n    }\r\n\r\n    has = gotoToken('>')\r\n    if (!has) {\r\n      return\r\n    }\r\n    pos++\r\n\r\n    skipSpace()\r\n    // 检查有 innerText 内容\r\n    if (xmlStr[pos] !== '<') {\r\n      addData(options.aloneValueName, readText())\r\n      skipSpace()\r\n    }\r\n    pop()\r\n    readTag()\r\n  }\r\n\r\n  readTag()\r\n\r\n  return {\r\n    [stack[0].tag]: stack[0].obj\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}