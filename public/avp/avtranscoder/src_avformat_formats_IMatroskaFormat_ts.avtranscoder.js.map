{"version":3,"file":"src_avformat_formats_IMatroskaFormat_ts.avtranscoder.js","mappings":"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AAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,IAAa,CAAC,sCAA6B;IAC5C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAE9C,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,qEAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,qEA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","sources":["webpack://AVTranscoder/./src/avformat/codecs/aac.ts","webpack://AVTranscoder/./src/avformat/codecs/av1.ts","webpack://AVTranscoder/./src/avformat/codecs/h264.ts","webpack://AVTranscoder/./src/avformat/codecs/hevc.ts","webpack://AVTranscoder/./src/avformat/codecs/mp3.ts","webpack://AVTranscoder/./src/avformat/codecs/opus.ts","webpack://AVTranscoder/./src/avformat/codecs/vp8.ts","webpack://AVTranscoder/./src/avformat/codecs/vp9.ts","webpack://AVTranscoder/./src/avformat/codecs/vvc.ts","webpack://AVTranscoder/./src/avformat/formats/IFormat.ts","webpack://AVTranscoder/./src/avformat/formats/IMatroskaFormat.ts","webpack://AVTranscoder/./src/avformat/formats/isom/tags.ts","webpack://AVTranscoder/./src/avformat/formats/matroska/function/findStreamByTrackNumber.ts","webpack://AVTranscoder/./src/avformat/formats/matroska/function/findStreamByTrackUid.ts","webpack://AVTranscoder/./src/avformat/formats/matroska/imatroska.ts","webpack://AVTranscoder/./src/avformat/formats/matroska/matroska.ts","webpack://AVTranscoder/./src/avformat/formats/riff/riff.ts","webpack://AVTranscoder/./src/avformat/function/mktagle.ts","webpack://AVTranscoder/./src/avutil/util/av1syntax.ts","webpack://AVTranscoder/./src/avutil/util/expgolomb.ts","webpack://AVTranscoder/./src/avutil/util/intread.ts","webpack://AVTranscoder/./src/avutil/util/intwrite.ts","webpack://AVTranscoder/./src/avutil/util/nalu.ts","webpack://AVTranscoder/./src/common/io/BitReader.ts","webpack://AVTranscoder/./src/common/io/BitWriter.ts","webpack://AVTranscoder/./src/common/io/BufferWriter.ts"],"sourcesContent":["/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'HE'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)] ?? 48000\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f] ?? 2\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((codecpar.profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia av1 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as av1syntax from 'avutil/util/av1syntax'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { PixelFormatDescriptorsMap } from 'avutil/pixelFormatDescriptor'\r\n\r\nexport const enum AV1Profile {\r\n  Main,\r\n  High,\r\n  Professional\r\n}\r\n\r\nexport const enum OBUType {\r\n  Reserved,\r\n  SEQUENCE_HEADER,\r\n  TEMPORAL_DELIMITER,\r\n  FRAME_HEADER,\r\n  TILE_GROUP,\r\n  METADATA,\r\n  FRAME,\r\n  REDUNDANT_FRAME_HEADER,\r\n  TILE_LIST,\r\n  PADDING = 15\r\n}\r\n\r\nexport const AV1Profile2Name: Record<AV1Profile, string> = {\r\n  [AV1Profile.Main]: 'Main',\r\n  [AV1Profile.High]: 'High',\r\n  [AV1Profile.Professional]: 'Professional'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 20, maxResolution: 2048 * 1152 },\r\n  { level: 21, maxResolution: 2816 * 1584 },\r\n  { level: 30, maxResolution: 4352 * 2448 },\r\n  { level: 31, maxResolution: 5504 * 3096 },\r\n  { level: 40, maxResolution: 6144 * 3456 },\r\n  { level: 41, maxResolution: 6144 * 3456 },\r\n  { level: 50, maxResolution: 8192 * 4352 },\r\n  { level: 51, maxResolution: 8192 * 4352 },\r\n  { level: 52, maxResolution: 8192 * 4352 },\r\n  { level: 53, maxResolution: 8192 * 4352 },\r\n  { level: 60, maxResolution: 16384 * 8704 },\r\n  { level: 61, maxResolution: 16384 * 8704 },\r\n  { level: 62, maxResolution: 16384 * 8704 },\r\n  { level: 63, maxResolution: 16384 * 8704 }\r\n]\r\n\r\nexport const AV1LevelIdx = [20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43, 50, 51, 52, 53, 60, 61, 62, 63, 70, 71, 72, 73]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height;\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 4) {\r\n    const params = parseExtraData(extradata)\r\n\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 bit marker\r\n * - 7 bit version\r\n * - 3 bit profile\r\n * - 5 bit level\r\n * - 1 bit tier\r\n * - 1 bit bitdepth > 8\r\n * - 1 bit bitdepth == 12\r\n * - 1 bit monochrome\r\n * - 1 bit chroma_subsampling_x\r\n * - 1 bit chroma_subsampling_y\r\n * - 2 bit chroma_sample_position\r\n * - 8 bit padding\r\n * \r\n * @param header \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  // marker\r\n  bitReader.readU1()\r\n  // version\r\n  bitReader.readU(7)\r\n\r\n  const profile = bitReader.readU(3)\r\n  const level = bitReader.readU(5)\r\n  const tier = bitReader.readU1()\r\n  let bitDepth = bitReader.readU1() ? 10 : 8\r\n  if (bitReader.readU1()) {\r\n    bitDepth = 12\r\n  }\r\n  const monochrome = bitReader.readU1()\r\n  const chromaSubsamplingX = bitReader.readU1()\r\n  const chromaSubsamplingY = bitReader.readU1()\r\n  const chromaSamplePosition = bitReader.readU(2)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    tier,\r\n    bitDepth,\r\n    monochrome,\r\n    chromaSubsamplingX,\r\n    chromaSubsamplingY,\r\n    chromaSamplePosition\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport function parseSequenceHeader(header: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(header.length)\r\n  bitReader.appendBuffer(header)\r\n\r\n  bitReader.readU1()\r\n  bitReader.readU(4)\r\n  const extensionFlag = bitReader.readU1()\r\n  const hasSizeFlag = bitReader.readU1()\r\n  // obu_reserved_1bit\r\n  bitReader.readU1()\r\n  if (extensionFlag) {\r\n    bitReader.readU(8)\r\n  }\r\n  if (hasSizeFlag) {\r\n    av1syntax.leb128(bitReader)\r\n  }\r\n\r\n  const seq_profile =\tav1syntax.f(bitReader, 3)\r\n  const still_picture =\tav1syntax.f(bitReader, 1)\r\n  const reduced_still_picture_header = av1syntax.f(bitReader, 1)\r\n\r\n  let timing_info_present_flag = 0\r\n  let decoder_model_info_present_flag = 0\r\n  let initial_display_delay_present_flag = 0\r\n  let operating_points_cnt_minus_1 = 0\r\n  let operating_point_idc: number[] = [0]\r\n  let seq_level_idx: number[] = [0]\r\n  let seq_tier: number[] = [0]\r\n  let decoder_model_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_minus_1: number[] = [0]\r\n  let buffer_delay_length_minus_1 = 0\r\n  let decoder_buffer_delay: number[] = [0]\r\n  let encoder_buffer_delay: number[] = [0]\r\n  let low_delay_mode_flag: number[] = [0]\r\n\r\n  if (reduced_still_picture_header) {\r\n    seq_level_idx[0] = av1syntax.f(bitReader, 5)\r\n  }\r\n  else {\r\n    timing_info_present_flag = av1syntax.f(bitReader, 1)\r\n    if (timing_info_present_flag) {\r\n\r\n      let num_units_in_display_tick =\tav1syntax.f(bitReader, 32)\r\n      let time_scale = av1syntax.f(bitReader, 32)\r\n      let equal_picture_interval = av1syntax.f(bitReader, 1)\r\n      if (equal_picture_interval) {\r\n        let num_ticks_per_picture_minus_1 = av1syntax.uvlc(bitReader)\r\n      }\r\n\r\n      let decoder_model_info_present_flag =\tav1syntax.f(bitReader, 1)\r\n      if (decoder_model_info_present_flag) {\r\n        buffer_delay_length_minus_1 =\tav1syntax.f(bitReader, 5)\r\n        let num_units_in_decoding_tick = av1syntax.f(bitReader, 32)\r\n        let buffer_removal_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n        let frame_presentation_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n      }\r\n    }\r\n    else {\r\n      decoder_model_info_present_flag = 0\r\n    }\r\n    let initial_display_delay_present_flag = av1syntax.f(bitReader, 1)\r\n    let operating_points_cnt_minus_1 = av1syntax.f(bitReader, 5)\r\n    for (let i = 0; i <= operating_points_cnt_minus_1; i++ ) {\r\n      operating_point_idc[i] = av1syntax.f(bitReader, 12)\r\n      seq_level_idx[i] = av1syntax.f(bitReader, 5)\r\n      if (seq_level_idx[i] > 7) {\r\n        seq_tier[i] = av1syntax.f(bitReader, 1)\r\n      }\r\n      else {\r\n        seq_tier[i] = 0\r\n      }\r\n      if (decoder_model_info_present_flag) {\r\n        decoder_model_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if (decoder_model_present_for_this_op[i]) {\r\n          let n = buffer_delay_length_minus_1 + 1\r\n          decoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          encoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          low_delay_mode_flag[i] = av1syntax.f(bitReader, 1)\r\n        }\r\n      }\r\n      else {\r\n        decoder_model_present_for_this_op[i] = 0\r\n      }\r\n      if (initial_display_delay_present_flag) {\r\n        initial_display_delay_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if ( initial_display_delay_present_for_this_op[i] ) {\r\n          initial_display_delay_minus_1[i] = av1syntax.f(bitReader, 4)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let frame_width_bits_minus_1 = av1syntax.f(bitReader, 4)\r\n  let frame_height_bits_minus_1 =\tav1syntax.f(bitReader, 4)\r\n  let n = frame_width_bits_minus_1 + 1\r\n  let max_frame_width_minus_1 =\tav1syntax.f(bitReader, n)\r\n  n = frame_height_bits_minus_1 + 1\r\n  let max_frame_height_minus_1 = av1syntax.f(bitReader, n)\r\n  let frame_id_numbers_present_flag = 0\r\n  let delta_frame_id_length_minus_2 = 0\r\n  let additional_frame_id_length_minus_1 = 0\r\n  if (reduced_still_picture_header ) {\r\n    frame_id_numbers_present_flag = 0\r\n  }\r\n  else {\r\n    frame_id_numbers_present_flag =\tav1syntax.f(bitReader, 1)\r\n  }\r\n  if ( frame_id_numbers_present_flag ) {\r\n    delta_frame_id_length_minus_2 =\tav1syntax.f(bitReader, 4)\r\n    additional_frame_id_length_minus_1 = av1syntax.f(bitReader, 3)\r\n  }\r\n  let use_128x128_superblock = av1syntax.f(bitReader, 1)\r\n  let enable_filter_intra =\tav1syntax.f(bitReader, 1)\r\n  let enable_intra_edge_filter = av1syntax.f(bitReader, 1)\r\n  let enable_interintra_compound = 0\r\n  let enable_masked_compound = 0\r\n  let enable_warped_motion = 0\r\n  let enable_dual_filter = 0\r\n  let enable_order_hint = 0\r\n  let enable_jnt_comp = 0\r\n  let enable_ref_frame_mvs = 0\r\n  let seq_force_screen_content_tools = 2\r\n  let seq_force_integer_mv = 2\r\n  let OrderHintBits = 0\r\n  if (!reduced_still_picture_header) {\r\n    let enable_interintra_compound = av1syntax.f(bitReader, 1)\r\n    enable_masked_compound = av1syntax.f(bitReader, 1)\r\n    enable_warped_motion = av1syntax.f(bitReader, 1)\r\n    enable_dual_filter = av1syntax.f(bitReader, 1)\r\n    enable_order_hint = av1syntax.f(bitReader, 1)\r\n    if (enable_order_hint) {\r\n      enable_jnt_comp = av1syntax.f(bitReader, 1)\r\n      enable_ref_frame_mvs = av1syntax.f(bitReader, 1)\r\n    }\r\n    else {\r\n      enable_jnt_comp = 0\r\n      enable_ref_frame_mvs = 0\r\n    }\r\n    let seq_choose_screen_content_tools =\tav1syntax.f(bitReader, 1)\r\n    if (seq_choose_screen_content_tools) {\r\n      seq_force_screen_content_tools = 2\r\n    }\r\n    else {\r\n      seq_force_screen_content_tools = av1syntax.f(bitReader, 1)\r\n    }\r\n\r\n    if (seq_force_screen_content_tools > 0) {\r\n      let seq_choose_integer_mv =\tav1syntax.f(bitReader, 1)\r\n      if (seq_choose_integer_mv) {\r\n        seq_force_integer_mv = 2\r\n      }\r\n      else {\r\n        seq_force_integer_mv = av1syntax.f(bitReader, 1)\r\n      }\r\n    }\r\n    else {\r\n      seq_force_integer_mv = 2\r\n    }\r\n    if (enable_order_hint) {\r\n      const order_hint_bits_minus_1 =\tav1syntax.f(bitReader, 3)\r\n      OrderHintBits = order_hint_bits_minus_1 + 1\r\n    }\r\n    else {\r\n      OrderHintBits = 0\r\n    }\r\n  }\r\n  let enable_superres =\tav1syntax.f(bitReader, 1)\r\n  let enable_cdef =\tav1syntax.f(bitReader, 1)\r\n  let enable_restoration = av1syntax.f(bitReader, 1)\r\n\r\n  let high_bitdepth =\tav1syntax.f(bitReader, 1)\r\n  let twelve_bit = 0\r\n  let bit_depth = 0\r\n  let mono_chrome = 0\r\n  if (seq_profile == 2 && high_bitdepth ) {\r\n    twelve_bit = av1syntax.f(bitReader, 1)\r\n    bit_depth = twelve_bit ? 12 : 10\r\n  }\r\n  else if (seq_profile <= 2) {\r\n    bit_depth = high_bitdepth ? 10 : 8\r\n  }\r\n  if ( seq_profile == 1 ) {\r\n    mono_chrome = 0\r\n  }\r\n  else {\r\n    mono_chrome = av1syntax.f(bitReader, 1)\r\n  }\r\n  const color_description_present_flag = av1syntax.f(bitReader, 1)\r\n  let color_primaries = 0\r\n  let transfer_characteristics = 0\r\n  let matrix_coefficients = 0\r\n  if (color_description_present_flag ) {\r\n    color_primaries =\tav1syntax.f(bitReader, 8)\r\n    transfer_characteristics = av1syntax.f(bitReader, 8)\r\n    matrix_coefficients = av1syntax.f(bitReader, 8)\r\n  }\r\n  else {\r\n    color_primaries = 2\r\n    transfer_characteristics = 2\r\n    matrix_coefficients = 2\r\n  }\r\n  let color_range = 0\r\n  let subsampling_x = 0\r\n  let subsampling_y = 0\r\n  let chroma_sample_position = 0\r\n  let separate_uv_delta_q = 0\r\n  if (mono_chrome) {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    subsampling_x = 1\r\n    subsampling_y = 1\r\n    chroma_sample_position = 0\r\n    separate_uv_delta_q = 0\r\n  }\r\n  else if (color_primaries == 1\r\n    && transfer_characteristics == 13\r\n    && matrix_coefficients == 0\r\n  ) {\r\n    color_range = 1\r\n    subsampling_x = 0\r\n    subsampling_y = 0\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n  else {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    if (seq_profile == 0) {\r\n      subsampling_x = 1\r\n      subsampling_y = 1\r\n    }\r\n    else if ( seq_profile == 1 ) {\r\n      subsampling_x = 0\r\n      subsampling_y = 0\r\n    }\r\n    else {\r\n      if (bit_depth == 12) {\r\n        subsampling_x\t= av1syntax.f(bitReader, 1)\r\n        if (subsampling_x) {\r\n          subsampling_y =\tav1syntax.f(bitReader, 1)\r\n        }\r\n        else {\r\n          subsampling_y = 0\r\n        }\r\n      }\r\n      else {\r\n        subsampling_x = 1\r\n        subsampling_y = 0\r\n      }\r\n    }\r\n    if (subsampling_x && subsampling_y) {\r\n      chroma_sample_position = av1syntax.f(bitReader, 2)\r\n    }\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n\r\n  let film_grain_params_present\t= av1syntax.f(bitReader, 1)\r\n\r\n  return {\r\n    width: max_frame_width_minus_1 + 1,\r\n    height: max_frame_height_minus_1 + 1,\r\n    profile: seq_profile,\r\n    level: AV1LevelIdx[seq_level_idx[0]],\r\n    tier: seq_tier[0],\r\n    bitDepth: bit_depth,\r\n    monoChrome: mono_chrome,\r\n    colorRange: color_range,\r\n    colorPrimaries: color_primaries,\r\n    transferCharacteristics: transfer_characteristics,\r\n    matrixCoefficients: matrix_coefficients,\r\n    subsamplingX: subsampling_x,\r\n    subsamplingY: subsampling_y,\r\n    chromaSamplePosition: chroma_sample_position\r\n  }\r\n}\r\n\r\nexport function splitOBU(buffer: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader()\r\n\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const list: Uint8ArrayInterface[] = []\r\n\r\n  while (bitReader.remainingLength()) {\r\n    const now = bitReader.getPos()\r\n    // obu_forbidden_bit\r\n    bitReader.readU1()\r\n    const type = bitReader.readU(4)\r\n    const extensionFlag = bitReader.readU1()\r\n    const hasSizeFlag = bitReader.readU1()\r\n    // obu_reserved_1bit\r\n    bitReader.readU1()\r\n\r\n    if (extensionFlag) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    const size = hasSizeFlag ? av1syntax.leb128(bitReader) : buffer.length - 1 - extensionFlag\r\n\r\n    const headerSize = bitReader.getPos() - now\r\n\r\n    list.push(buffer.subarray(now, now + headerSize + size))\r\n\r\n    bitReader.skip(size * 8)\r\n  }\r\n\r\n  return list\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>, buffer: Uint8ArrayInterface) {\r\n  const bitWriter = new BitWriter(4)\r\n  // marker\r\n  bitWriter.writeU1(1)\r\n  // version\r\n  bitWriter.writeU(7, 1)\r\n\r\n  const header = splitOBU(buffer).find((buffer) => {\r\n    return ((buffer[0] >>> 3) & 0x0f) === OBUType.SEQUENCE_HEADER\r\n  }) \r\n  \r\n  if (header) {\r\n    const params = parseSequenceHeader(header)\r\n    bitWriter.writeU(3, params.profile)\r\n    bitWriter.writeU(5, params.level)\r\n    bitWriter.writeU(1, params.tier)\r\n    bitWriter.writeU(1, params.bitDepth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, params.bitDepth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, params.monoChrome)\r\n    bitWriter.writeU(1, params.subsamplingX)\r\n    bitWriter.writeU(1, params.subsamplingY)\r\n    bitWriter.writeU(1, params.chromaSamplePosition)\r\n  }\r\n  else {\r\n    const desc = PixelFormatDescriptorsMap[codecpar.format]\r\n    bitWriter.writeU(3, codecpar.profile)\r\n    bitWriter.writeU(5, codecpar.level)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 0)\r\n  }\r\n  // padding\r\n  bitWriter.writeU(8, 0)\r\n  return bitWriter.getBuffer()\r\n}\r\n","/*\r\n * libmedia h264 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport * as logger from 'common/util/logger'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nexport const NALULengthSizeMinusOne = 3\r\n\r\nexport const enum BitFormat {\r\n  AVCC = 1,\r\n  ANNEXB\r\n}\r\n\r\nexport const enum PictureType {\r\n  I = 1,\r\n  P,\r\n  B,\r\n  SPS,\r\n  PPS,\r\n  SEI\r\n}\r\n\r\nexport const enum H264NaluType {\r\n  kUnspecified = 0,\r\n  kSliceNonIDR,\r\n  kSliceDPA,\r\n  kSliceDPB,\r\n  kSliceDPC,\r\n  kSliceIDR,\r\n  kSliceSEI,\r\n  kSliceSPS,\r\n  kSlicePPS,\r\n  kSliceAUD,\r\n  kEndOfSequence,\r\n  kEndOfStream,\r\n  kFiller,\r\n  kSPSExt,\r\n  kReserved0\r\n}\r\n\r\nexport const enum H264SliceType {\r\n  kSliceNone = -1,\r\n  kSliceP,\r\n  kSliceB,\r\n  kSliceI,\r\n  kSliceSP = 5,\r\n  kSliceSB,\r\n  kSliceSI\r\n}\r\n\r\nexport const enum H264Profile {\r\n  kBaseline = 66,\r\n  kMain = 77,\r\n  kHigh = 100,\r\n  kConstrained = kBaseline,\r\n  kHigh10 = 110,\r\n  kHigh422 = 122,\r\n  kHigh444 = 244\r\n}\r\n\r\nexport const H264Profile2Name: Record<H264Profile, string> = {\r\n  [H264Profile.kBaseline]: 'Constrained Baseline',\r\n  [H264Profile.kMain]: 'Main',\r\n  [H264Profile.kHigh]: 'High',\r\n  [H264Profile.kHigh10]: 'High10',\r\n  [H264Profile.kHigh422]: 'High422',\r\n  [H264Profile.kHigh444]: 'High444'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 25344, maxFrameRate: 15 },\r\n  { level: 11, maxResolution: 25344, maxFrameRate: 30 },\r\n  { level: 12, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 13, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 20, maxResolution: 101376, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 202752, maxFrameRate: 30 },\r\n  { level: 22, maxResolution: 414720, maxFrameRate: 30 },\r\n  { level: 30, maxResolution: 414720, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 921600, maxFrameRate: 30 },\r\n  { level: 32, maxResolution: 1310720, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2097152, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2097152, maxFrameRate: 60 },\r\n  { level: 42, maxResolution: 2228224, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 8912896, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 8912896, maxFrameRate: 60 },\r\n  { level: 52, maxResolution: 8912896, maxFrameRate: 120 },\r\n  { level: 60, maxResolution: 35651584, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 35651584, maxFrameRate: 60 },\r\n  { level: 62, maxResolution: 35651584, maxFrameRate: 120 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height;\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * avcc 格式的 extradata 转 annexb sps pps\r\n * \r\n * bits    \r\n * - 8   version ( always 0x01 )\r\n * - 8   avc profile ( sps[0][1] )\r\n * - 8   avc compatibility ( sps[0][2] )\r\n * - 8   avc level ( sps[0][3] )\r\n * - 6   reserved ( all bits on )\r\n * - 2   NALULengthSizeMinusOne\r\n * - 3   reserved ( all bits on )\r\n * - 5   number of SPS NALUs (usually 1)\r\n * - repeated once per SPS:\r\n *   - 16         SPS size\r\n *   - variable   SPS NALU data\r\n * - 8 number of PPS NALUs (usually 1)\r\n * - repeated once per PPS:\r\n *   - 16       PPS size\r\n *   - variable PPS NALU data\r\n * \r\n * - ext (profile !== 66 && profile !== 77 && profile !== 88)\r\n *  - 6 reserved ( all bits on )\r\n *  - 2 chroma_format_idc\r\n *  - 5 reserved ( all bits on )\r\n *  - 3 bit_depth_luma_minus8\r\n *  - 5 reserved ( all bits on )\r\n *  - 3 bit_depth_chroma_minus8\r\n *  - 8 number of SPS_EXT NALUs\r\n *    - 16 SPS_EXT size\r\n *    - variable   SPS_EXT NALU data\r\n * \r\n */\r\nexport function extradata2SpsPps(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata)\r\n  bufferReader.skip(5)\r\n\r\n  const spss = []\r\n  const ppss = []\r\n  const spsExts = []\r\n\r\n  const spsLength = bufferReader.readUint8() & 0x1f\r\n  for (let i = 0; i < spsLength; i++) {\r\n    const length = bufferReader.readUint16()\r\n    spss.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  const ppsLength = bufferReader.readUint8()\r\n  for (let i = 0; i < ppsLength; i++) {\r\n    const length = bufferReader.readUint16()\r\n    ppss.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  if (bufferReader.remainingSize() > 4) {\r\n    bufferReader.skip(3)\r\n    const spsExtLength = bufferReader.readUint8()\r\n    if (spsExtLength > 0) {\r\n      for (let i = 0; i < spsExtLength; i++) {\r\n        const length = bufferReader.readUint16()\r\n        spsExts.push(bufferReader.readBuffer(length))\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    spss,\r\n    ppss,\r\n    spsExts\r\n  }\r\n}\r\n\r\nexport function spsPps2Extradata(spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[], spsExts: Uint8ArrayInterface[] = []) {\r\n\r\n  if (spss.length > 32) {\r\n    logger.warn(`h264 metadata\\'s sps max length is 32, but get ${spss.length}`)\r\n    spss = spss.slice(0, 32)\r\n  }\r\n  if (spss.length > 256) {\r\n    logger.warn(`h264 metadata\\'s pps max length is 256, but get ${spss.length}`)\r\n    spss = spss.slice(0, 256)\r\n  }\r\n\r\n  let length = 7\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 2 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 2 + pps.length\r\n  }, length)\r\n\r\n  const sps = spss[0]\r\n\r\n  const params = parseSPS(sps)\r\n\r\n  if (params.profile !== 66 && params.profile !== 77 && params.profile !== 88) {\r\n    length += 4\r\n\r\n    if (spsExts.length) {\r\n      length = spsExts.reduce((prev, ext) => {\r\n        return prev + 2 + ext.length\r\n      }, length)\r\n    }\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(sps[1])\r\n  bufferWriter.writeUint8(sps[2])\r\n  bufferWriter.writeUint8(sps[3])\r\n  bufferWriter.writeUint8(0xfc | NALULengthSizeMinusOne)\r\n\r\n  // sps\r\n  bufferWriter.writeUint8(0xe0 | (spss.length & 0x1f))\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint16(sps.length)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  // pps\r\n  bufferWriter.writeUint8(ppss.length)\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint16(pps.length)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  if (params.profile !== 66 && params.profile !== 77 && params.profile !== 88) {\r\n    bufferWriter.writeUint8(0xfc | params.chromaFormatIdc)\r\n    bufferWriter.writeUint8(0xf8 | params.bitDepthLumaMinus8)\r\n    bufferWriter.writeUint8(0xf8 | params.bitDepthChromaMinus8)\r\n\r\n    if (spsExts.length) {\r\n      array.each(spsExts, (ext) => {\r\n        bufferWriter.writeUint16(ext.length)\r\n        bufferWriter.writeBuffer(ext)\r\n      })\r\n    }\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n    if (spss.length && ppss.length) {\r\n      return spsPps2Extradata(spss, ppss, spsExts)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n    }\r\n\r\n    nalus = nalus.filter((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      return type !== H264NaluType.kSliceAUD\r\n        && type !== H264NaluType.kSlicePPS\r\n        && type !== H264NaluType.kSliceSPS\r\n        && type !== H264NaluType.kSPSExt\r\n    })\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = nalu[0] & 0x1f\r\n    if (type === H264NaluType.kSliceIDR) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    key,\r\n    extradata\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? (extradata[4] & 0x03) : NALULengthSizeMinusOne\r\n  let spss = []\r\n  let ppss = []\r\n  let spsExts = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2SpsPps(extradata)\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    spsExts = result.spsExts\r\n\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n  const seis = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = nalu[0] & 0x1f\r\n\r\n    if (naluType === H264NaluType.kSliceSEI) {\r\n      seis.push(nalu)\r\n    }\r\n    else if (naluType !== H264NaluType.kSliceAUD) {\r\n      nalus.push(nalu)\r\n    }\r\n  }\r\n\r\n  let length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, 0)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = spsExts.reduce((prev, ext) => {\r\n    return prev + 4 + ext.length\r\n  }, length)\r\n  length = seis.reduce((prev, sei) => {\r\n    return prev + 4 + sei.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 6)\r\n  const bufferWriter = new BufferWriter(mapUint8Array(bufferPointer, length + 6))\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(0x09)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(seis, (sei) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sei)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n  array.each(spsExts, (ext) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(ext)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = nalu[0] & 0x1f\r\n    if (type === H264NaluType.kSliceIDR) {\r\n      key = true\r\n    }\r\n  })\r\n  return {\r\n    bufferPointer,\r\n    length: length + 6,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let spss = []\r\n  let ppss = []\r\n  let spsExts = []\r\n  let others = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = nalu[0] & 0x1f\r\n\r\n    if (naluType === H264NaluType.kSliceSPS) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === H264NaluType.kSlicePPS) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === H264NaluType.kSPSExt) {\r\n      spsExts.push(nalu)\r\n    }\r\n    else {\r\n      others.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length) {\r\n    const extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 1) {\r\n    const spss = []\r\n    const ppss = []\r\n    const spsExts = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      if (type === H264NaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type === H264NaluType.kSPSExt) {\r\n        spsExts.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      const extradata = spsPps2Extradata(spss, ppss, spsExts)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[4] & 0x03)\r\n\r\n    const { spss } = extradata2SpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      const { profile, level, width, height } = parseSPS(spss[0])\r\n\r\n      stream.codecpar.profile = profile\r\n      stream.codecpar.level = level\r\n      stream.codecpar.width = width\r\n      stream.codecpar.height = height\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = nalu[0] & 0x1f\r\n      return type === H264NaluType.kSliceIDR\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = intread.r8(avpacket.data + (i + naluLengthSize)) & 0x1f\r\n      if (type === H264NaluType.kSliceIDR) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface H264SPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chromaFormatIdc: number\r\n  bitDepthLumaMinus8: number\r\n  bitDepthChromaMinus8: number\r\n  frameMbsOnlyFlag: number\r\n  picOrderCntType: number\r\n  log2MaxPicOrderCntLsbMinus4: number\r\n  deltaPicOrderAlwaysZeroFlag: number\r\n  log2MaxFrameNumMinus4: number\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): H264SPS {\r\n\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nal_ref_idc\r\n  bitReader.readU(2)\r\n  // nal_unit_type\r\n  bitReader.readU(5)\r\n\r\n  const profile = bitReader.readU(8)\r\n\r\n  // constraint_set0_flag\r\n  bitReader.readU1()\r\n  // constraint_set1_flag\r\n  bitReader.readU1()\r\n  // constraint_set2_flag\r\n  bitReader.readU1()\r\n  // constraint_set3_flag\r\n  bitReader.readU1()\r\n  // constraint_set4_flag\r\n  bitReader.readU1()\r\n  // constraint_set4_flag\r\n  bitReader.readU1()\r\n  // reserved_zero_2bits\r\n  bitReader.readU(2)\r\n\r\n  const level = bitReader.readU(8)\r\n\r\n  // seq_parameter_set_id\r\n  expgolomb.readUE(bitReader)\r\n\r\n  // 摄像机出图大部分格式是 4:2:0\r\n  let chromaFormatIdc = 1\r\n  let bitDepthLumaMinus8 = 0\r\n  let bitDepthChromaMinus8 = 0\r\n\r\n  if (profile == 100 || profile == 110 || profile == 122\r\n    || profile == 244 || profile == 44 || profile == 83\r\n    || profile == 86 || profile == 118 || profile == 128\r\n    || profile == 138 || profile == 139 || profile == 134 || profile == 135\r\n  ) {\r\n    chromaFormatIdc = expgolomb.readUE(bitReader)\r\n    if (chromaFormatIdc === 3) {\r\n      // separate_colour_plane_flag\r\n      bitReader.readU1()\r\n    }\r\n    // bit_depth_luma_minus8\r\n    bitDepthLumaMinus8 = expgolomb.readUE(bitReader)\r\n    // bit_depth_chroma_minus8\r\n    bitDepthChromaMinus8 = expgolomb.readUE(bitReader)\r\n    // qpprime_y_zero_transform_bypass_flag\r\n    bitReader.readU1()\r\n\r\n    let seqScalingMatrixPresentFlag = bitReader.readU1()\r\n    if (seqScalingMatrixPresentFlag) {\r\n      const seqScalingListPresentFlag = new Array(8)\r\n      for (let i = 0; i < ((chromaFormatIdc != 3) ? 8 : 12); i++) {\r\n        seqScalingListPresentFlag[i] = bitReader.readU1()\r\n      }\r\n    }\r\n  }\r\n\r\n  // log2_max_frame_num_minus4\r\n  const log2MaxFrameNumMinus4 = expgolomb.readUE(bitReader)\r\n\r\n  const picOrderCntType = expgolomb.readUE(bitReader)\r\n  let log2MaxPicOrderCntLsbMinus4 = 0\r\n  let deltaPicOrderAlwaysZeroFlag = 0\r\n\r\n  if (picOrderCntType === 0) {\r\n    // log2_max_pic_order_cnt_lsb_minus4\r\n    log2MaxPicOrderCntLsbMinus4 = expgolomb.readUE(bitReader)\r\n  }\r\n  else if (picOrderCntType === 1) {\r\n    // delta_pic_order_always_zero_flag\r\n    deltaPicOrderAlwaysZeroFlag = bitReader.readU1()\r\n\r\n    // offset_for_non_ref_pic\r\n    expgolomb.readSE(bitReader)\r\n    // offset_for_top_to_bottom_field\r\n    expgolomb.readSE(bitReader)\r\n\r\n    const numRefFramesInPicOrderCntCycle = expgolomb.readUE(bitReader)\r\n    for (let i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\r\n      expgolomb.readSE(bitReader)\r\n    }\r\n  }\r\n\r\n  // max_num_ref_frames\r\n  expgolomb.readUE(bitReader)\r\n  // gaps_in_frame_num_value_allowed_flag\r\n  bitReader.readU1()\r\n\r\n  const picWidthInMbsMinus1 = expgolomb.readUE(bitReader)\r\n  const picHeightInMapUnitsMinus1 = expgolomb.readUE(bitReader)\r\n  const frameMbsOnlyFlag = bitReader.readU1()\r\n\r\n  let width = (picWidthInMbsMinus1 + 1) * 16\r\n  let height = (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16\r\n\r\n  if (!frameMbsOnlyFlag) {\r\n    // mb_adaptive_frame_field_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  // direct_8x8_inference_flag\r\n  bitReader.readU1()\r\n\r\n  const frameCroppingFlag = bitReader.readU1()\r\n  if (frameCroppingFlag) {\r\n    const frameCropLeftOffset = expgolomb.readUE(bitReader)\r\n    const frameCropRightOffset = expgolomb.readUE(bitReader)\r\n    const frameCropTopOffset = expgolomb.readUE(bitReader)\r\n    const frameCropBottomOffset = expgolomb.readUE(bitReader)\r\n\r\n    let cropUnitX = 1\r\n    let cropUnitY = 2 - frameCroppingFlag\r\n\r\n    if (chromaFormatIdc === 1) {\r\n      cropUnitX = 2\r\n      cropUnitY = 2 * (2 - frameCroppingFlag)\r\n    }\r\n    else if (frameCroppingFlag === 2) {\r\n      cropUnitX = 2\r\n      cropUnitY = 2 - frameCroppingFlag\r\n    }\r\n\r\n    width -= cropUnitX * (frameCropLeftOffset + frameCropRightOffset)\r\n    height -= cropUnitY * (frameCropTopOffset + frameCropBottomOffset)\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chromaFormatIdc,\r\n    bitDepthLumaMinus8,\r\n    bitDepthChromaMinus8,\r\n    frameMbsOnlyFlag,\r\n    picOrderCntType,\r\n    log2MaxPicOrderCntLsbMinus4,\r\n    deltaPicOrderAlwaysZeroFlag,\r\n    log2MaxFrameNumMinus4\r\n  }\r\n}\r\n","/*\r\n * libmedia hevc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport { BitFormat } from './h264'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nexport const enum HEVCProfile {\r\n  Main = 1,\r\n  Main10,\r\n  MainStillPicture,\r\n  Main444\r\n}\r\n\r\nexport const HEVCProfile2Name: Record<HEVCProfile, string> = {\r\n  [HEVCProfile.Main]: 'Main',\r\n  [HEVCProfile.Main10]: 'Main10',\r\n  [HEVCProfile.MainStillPicture]: 'MainStillPicture',\r\n  [HEVCProfile.Main444]: 'Main444'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxLumaSamplesPerSecond: 552960, maxLumaPictureSize: 36864, maxBitRate: { main: 128, main10: 150 } },\r\n  { level: 20, maxLumaSamplesPerSecond: 3686400, maxLumaPictureSize: 122880, maxBitRate: { main: 1500, main10: 1875 } },\r\n  { level: 21, maxLumaSamplesPerSecond: 7372800, maxLumaPictureSize: 245760, maxBitRate: { main: 3000, main10: 3750 } },\r\n  { level: 30, maxLumaSamplesPerSecond: 16588800, maxLumaPictureSize: 552960, maxBitRate: { main: 6000, main10: 7500 } },\r\n  { level: 31, maxLumaSamplesPerSecond: 33177600, maxLumaPictureSize: 983040, maxBitRate: { main: 10000, main10: 12500 } },\r\n  { level: 40, maxLumaSamplesPerSecond: 66846720, maxLumaPictureSize: 2228224, maxBitRate: { main: 12000, main10: 15000 } },\r\n  { level: 41, maxLumaSamplesPerSecond: 133693440, maxLumaPictureSize: 2228224, maxBitRate: { main: 20000, main10: 25000 } },\r\n  { level: 50, maxLumaSamplesPerSecond: 267386880, maxLumaPictureSize: 8912896, maxBitRate: { main: 25000, main10: 40000 } },\r\n  { level: 51, maxLumaSamplesPerSecond: 534773760, maxLumaPictureSize: 8912896, maxBitRate: { main: 40000, main10: 60000 } },\r\n  { level: 52, maxLumaSamplesPerSecond: 1069547520, maxLumaPictureSize: 35651584, maxBitRate: { main: 60000, main10: 100000 } },\r\n  { level: 60, maxLumaSamplesPerSecond: 1069547520, maxLumaPictureSize: 35651584, maxBitRate: { main: 60000, main10: 100000 } },\r\n  { level: 61, maxLumaSamplesPerSecond: 2139095040, maxLumaPictureSize: 89128960, maxBitRate: { main: 120000, main10: 240000 } },\r\n  { level: 62, maxLumaSamplesPerSecond: 4278190080, maxLumaPictureSize: 356515840, maxBitRate: { main: 240000, main10: 480000 } }\r\n]\r\n\r\nexport function getLevelByResolution(profile: number, width: number, height: number, fps: number, bitrate: number) {\r\n\r\n  bitrate /= 1000\r\n\r\n  const selectedProfile = profile === HEVCProfile.Main ? 'main' : 'main10'\r\n  const lumaSamplesPerSecond = width * height * fps\r\n  for (const level of LevelCapabilities) {\r\n    if (lumaSamplesPerSecond <= level.maxLumaSamplesPerSecond && width * height <= level.maxLumaPictureSize && bitrate <= level.maxBitRate[selectedProfile]) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum HEVCNaluType {\r\n  kSliceTRAIL_N = 0,\r\n  kSliceTRAIL_R = 1,\r\n  kSliceTSA_N = 2,\r\n  kSliceTSA_R = 3,\r\n  kSliceSTSA_N = 4,\r\n  kSliceSTSA_R = 5,\r\n  kSliceRADL_N = 6,\r\n  kSliceRADL_R = 7,\r\n  kSliceRASL_N = 8,\r\n  kSliceRASL_R = 9,\r\n  kSliceBLA_W_LP = 16,\r\n  kSliceBLA_W_RADL = 17,\r\n  kSliceBLA_N_LP = 18,\r\n  kSliceIDR_W_RADL = 19,\r\n  kSliceIDR_N_LP = 20,\r\n  kSliceCRA_NUT = 21,\r\n  kSliceVPS = 32,\r\n  kSliceSPS = 33,\r\n  kSlicePPS = 34,\r\n  kSliceAUD = 35,\r\n  kSliceEOS_NUT = 36,\r\n  kSliceEOB_NUT = 37,\r\n  kSliceFD_NUT = 38,\r\n  kSliceSEI_PREFIX = 39,\r\n  kSliceSEI_SUFFIX = 40\r\n}\r\n\r\n\r\nexport const enum HEVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\n/**\r\n * \r\n * avcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 8   configurationVersion( 固定   1)\r\n * - 2   general_profile_space\r\n * - 1   general_tier_flag\r\n * - 5   general_profile_idc\r\n * - 32  general_profile_compatibility_flags\r\n * - 48  general_constraint_indicator_flags (6 个 字节）\r\n * - 8   general_level_idc\r\n * - 4   reserved1 (1111)\r\n * - 4   min_spatial_segmentation_idc_L\r\n * - 8   min_spatial_segmentation_idc_H\r\n * - 6   reserved2 (111111)\r\n * - 2   parallelismType\r\n * - 6   reserved3 (111111)\r\n * - 2   chromaFormat\r\n * - 5   reserved4 (11111)\r\n * - 3   bitDepthLumaMinus8\r\n * - 5   reserved5(11111)\r\n * - 3   bitDepthChromaMinus8\r\n * - 16  avgFrameRate\r\n * - 2   constantFrameRate\r\n * - 3   numTemporalLayers\r\n * - 1   temporalIdNested\r\n * - 2   lengthSizeMinusOne\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 1   reserved (0)\r\n * - 6   NAL_unit_type\r\n * - 16  numNalus\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata, true)\r\n  bufferReader.skip(22)\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x3f\r\n    const count = bufferReader.readUint16()\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === HEVCNaluType.kSliceVPS) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === HEVCNaluType.kSliceSPS) {\r\n      spss = list\r\n    }\r\n    else if (naluType === HEVCNaluType.kSlicePPS) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n\r\n  const sps = spss[0]\r\n\r\n  let length = 23\r\n\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n  const spsData = parseSPS(sps)\r\n\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(sps[1])\r\n  bufferWriter.writeUint8(sps[2])\r\n  bufferWriter.writeUint8(sps[3])\r\n  bufferWriter.writeUint8(sps[4])\r\n  bufferWriter.writeUint8(sps[5])\r\n\r\n  // general_constraint_indicator_flags\r\n  bufferWriter.writeUint8(sps[6])\r\n  bufferWriter.writeUint8(sps[7])\r\n  bufferWriter.writeUint8(sps[8])\r\n  bufferWriter.writeUint8(sps[9])\r\n  bufferWriter.writeUint8(sps[10])\r\n  bufferWriter.writeUint8(sps[11])\r\n\r\n  bufferWriter.writeUint8(spsData.level)\r\n\r\n  // min_spatial_segmentation_idc\r\n  bufferWriter.writeUint8((0xff << 2) | 0)\r\n  bufferWriter.writeUint8(0)\r\n\r\n  // parallelismType\r\n  bufferWriter.writeUint8((0xff << 6) | 0)\r\n\r\n  // chromaFormat\r\n  bufferWriter.writeUint8((0xff << 6) | spsData.chroma_format_idc)\r\n\r\n  // bitDepthLumaMinus8\r\n  bufferWriter.writeUint8((0xff << 5) | spsData.bit_depth_luma_minus8)\r\n\r\n  // bitDepthChromaMinus8\r\n  bufferWriter.writeUint8((0xff << 5) | spsData.bit_depth_chroma_minus8)\r\n\r\n  // avgFrameRate\r\n  bufferWriter.writeUint16(0)\r\n\r\n  // constantFrameRate numTemporalLayers temporalIdNested lengthSizeMinusOne\r\n  bufferWriter.writeUint8((0 << 6) | (1 << 3) | ((sps[0] & 0x01) << 2) | NALULengthSizeMinusOne)\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSliceVPS)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSliceSPS)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | HEVCNaluType.kSlicePPS)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[0] >>> 1) & 0x3f\r\n        return type !== HEVCNaluType.kSliceVPS\r\n          && type !== HEVCNaluType.kSliceSPS\r\n          && type !== HEVCNaluType.kSlicePPS\r\n          && type !== HEVCNaluType.kSliceAUD\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = (nalu[0] >>> 1) & 0x3f\r\n    if (type === HEVCNaluType.kSliceIDR_W_RADL\r\n      || type === HEVCNaluType.kSliceIDR_N_LP\r\n      || type === HEVCNaluType.kSliceCRA_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? (extradata[21] & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    nalus.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  let length = vpss.reduce((prev, vps) => {\r\n    return prev + 4 + vps.length\r\n  }, 0)\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 7)\r\n  const buffer = mapUint8Array(bufferPointer, length + 7)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(HEVCNaluType.kSliceAUD << 1)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(vpss, (vps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(vps)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = (nalu[0] >>> 1) & 0x3f\r\n    if (type === HEVCNaluType.kSliceIDR_W_RADL\r\n      || type === HEVCNaluType.kSliceIDR_N_LP\r\n      || type === HEVCNaluType.kSliceCRA_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = (nalu[0] >>> 1) & 0x3f\r\n\r\n    if (naluType === HEVCNaluType.kSliceSPS) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === HEVCNaluType.kSlicePPS) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === HEVCNaluType.kSliceVPS) {\r\n      vpss.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length || vpss.length) {\r\n    const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceVPS) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSliceSPS) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === HEVCNaluType.kSlicePPS) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (vpss.length && spss.length && ppss.length) {\r\n      const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[21] & 0x03)\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      const { profile, level, width, height } = parseSPS(spss[0])\r\n\r\n      stream.codecpar.profile = profile\r\n      stream.codecpar.level = level\r\n      stream.codecpar.width = width\r\n      stream.codecpar.height = height\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[0] >>> 1) & 0x3f\r\n      return type === HEVCNaluType.kSliceIDR_N_LP || type === HEVCNaluType.kSliceIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize)) >>> 1) & 0x3f\r\n      if (type === HEVCNaluType.kSliceIDR_N_LP || type === HEVCNaluType.kSliceIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface HevcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chroma_format_idc: number\r\n  bit_depth_luma_minus8: number\r\n  bit_depth_chroma_minus8: number\r\n  general_profile_space: number\r\n  general_tier_flag: number\r\n  general_profile_compatibility_flags: number\r\n  constraint_flags: number\r\n  separate_colour_plane_flag: number\r\n  log2_min_cb_size: number\r\n  log2_diff_max_min_coding_block_size: number\r\n  log2_min_tb_size: number\r\n  log2_diff_max_min_transform_block_size: number\r\n  log2_max_trafo_size: number\r\n  log2_ctb_size: number\r\n  log2_min_pu_size: number\r\n  ctb_width: number\r\n  ctb_height: number\r\n  ctb_size: number\r\n  min_cb_width: number\r\n  min_cb_height: number\r\n  min_tb_width: number\r\n  min_tb_height: number\r\n  min_pu_width: number\r\n  min_pu_height: number\r\n  log2_max_poc_lsb: number\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): HevcSPS {\r\n\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bit_depth_luma_minus8 = 0\r\n  let bit_depth_chroma_minus8 = 0\r\n  let chroma_format_idc = 1\r\n  let general_profile_space = 0\r\n  let general_tier_flag = 0\r\n  let general_profile_compatibility_flags = 0\r\n  let constraint_flags = 0\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n\r\n  // nalu type\r\n  bitReader.readU(6)\r\n\r\n  // layerId\r\n  bitReader.readU(6)\r\n\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_video_parameter_set_id\r\n  bitReader.readU(4)\r\n\r\n  // The value of sps_max_sub_layers_minus1 shall be in the range of 0 to 6, inclusive.\r\n  const spsMaxSubLayersMinus1 = bitReader.readU(3)\r\n\r\n  // sps_temporal_id_nesting_flag\r\n  bitReader.readU1()\r\n\r\n  let separate_colour_plane_flag = 0\r\n\r\n  if (spsMaxSubLayersMinus1 <= 6) {\r\n    // profile_tier_level(sps_max_sub_layers_minus1)\r\n\r\n    // general_profile_space\r\n    general_profile_space = bitReader.readU(2)\r\n    // general_tier_flag\r\n    general_tier_flag = bitReader.readU1()\r\n    // general_profile_idc\r\n    profile = bitReader.readU(5)\r\n    // general_profile_compatibility_flag[32]\r\n    general_profile_compatibility_flags = bitReader.readU(32)\r\n\r\n    /**\r\n     * 1 general_progressive_source_flag\r\n     * 1 general_interlaced_source_flag\r\n     * 1 general_non_packed_constraint_flag\r\n     * 1 general_frame_only_constraint_flag\r\n     * 44 general_reserved_zero_44bits\r\n     */\r\n    constraint_flags = bitReader.readU(48)\r\n\r\n    // general_level_idc\r\n    level = bitReader.readU(8)\r\n\r\n    const subLayerProfilePresentFlag = new Array(6)\r\n    const subLayerLevelPresentFlag = new Array(6)\r\n    for (let i = 0; i < spsMaxSubLayersMinus1; i++) {\r\n      subLayerProfilePresentFlag[i] = bitReader.readU1()\r\n      subLayerLevelPresentFlag[i] = bitReader.readU1()\r\n    }\r\n\r\n    if (spsMaxSubLayersMinus1 > 0) {\r\n      for (let i = spsMaxSubLayersMinus1; i < 8; i++) {\r\n        // reserved_zero_2bits\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < spsMaxSubLayersMinus1; i++) {\r\n      if (subLayerProfilePresentFlag[i]) {\r\n        // sub_layer_profile_space[i]\r\n        bitReader.readU(2)\r\n        // sub_layer_tier_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_profile_idc[i]\r\n        bitReader.readU(5)\r\n        // sub_layer_profile_compatibility_flag[i][32]\r\n        bitReader.readU(32)\r\n        // sub_layer_progressive_source_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_interlaced_source_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_non_packed_constraint_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_frame_only_constraint_flag[i]\r\n        bitReader.readU(1)\r\n        // sub_layer_reserved_zero_44bits[i]\r\n        bitReader.readU(44)\r\n      }\r\n\r\n      if (subLayerLevelPresentFlag[i]) {\r\n        // sub_layer_level_idc[i]\r\n        bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    // \"The  value  of sps_seq_parameter_set_id shall be in the range of 0 to 15, inclusive.\"\r\n    expgolomb.readUE(bitReader)\r\n    chroma_format_idc = expgolomb.readUE(bitReader)\r\n\r\n    if (chroma_format_idc === 3) {\r\n      // separate_colour_plane_flag\r\n      separate_colour_plane_flag = bitReader.readU(1)\r\n    }\r\n\r\n    width = expgolomb.readUE(bitReader)\r\n    height = expgolomb.readUE(bitReader)\r\n\r\n    const conformanceWindowFlag = bitReader.readU1()\r\n\r\n    let confWinLeftOffset = 0\r\n    let confWinRightOffset = 0\r\n    let confWinTopOffset = 0\r\n    let confWinBottomOffset = 0\r\n\r\n    if (conformanceWindowFlag) {\r\n      confWinLeftOffset = expgolomb.readUE(bitReader)\r\n      confWinRightOffset = expgolomb.readUE(bitReader)\r\n      confWinTopOffset = expgolomb.readUE(bitReader)\r\n      confWinBottomOffset = expgolomb.readUE(bitReader)\r\n    }\r\n\r\n    bit_depth_luma_minus8 = expgolomb.readUE(bitReader)\r\n    bit_depth_chroma_minus8 = expgolomb.readUE(bitReader)\r\n\r\n\r\n    let SubWidthC = 2\r\n    let SubHeightC = 2\r\n\r\n    if (chroma_format_idc === 0) {\r\n      SubWidthC = SubHeightC = 0\r\n    }\r\n    else if (chroma_format_idc === 2) {\r\n      SubWidthC = 2\r\n      SubHeightC = 1\r\n    }\r\n    else if (chroma_format_idc === 3) {\r\n      SubWidthC = SubHeightC = 1\r\n    }\r\n\r\n    const cropUnitX = SubWidthC * (1 << (bit_depth_luma_minus8 + 1))\r\n    const cropUnitY = SubHeightC * (1 << (bit_depth_luma_minus8 + 1))\r\n\r\n    width -= cropUnitX * (confWinLeftOffset + confWinRightOffset)\r\n    height -= cropUnitY * (confWinTopOffset + confWinBottomOffset)\r\n  }\r\n\r\n  const log2_max_poc_lsb = expgolomb.readUE(bitReader) + 4\r\n\r\n  const sublayer_ordering_info_flag = bitReader.readU1()\r\n  const start = sublayer_ordering_info_flag ? 0 : spsMaxSubLayersMinus1\r\n  for (let i = start; i < (spsMaxSubLayersMinus1 + 1); i++) {\r\n    // max_dec_pic_buffering\r\n    expgolomb.readUE(bitReader)\r\n    // num_reorder_pics\r\n    expgolomb.readUE(bitReader)\r\n    // max_latency_increase\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  const log2_min_cb_size = expgolomb.readUE(bitReader) + 3\r\n  const log2_diff_max_min_coding_block_size = expgolomb.readUE(bitReader)\r\n  const log2_min_tb_size = expgolomb.readUE(bitReader) + 2\r\n  const log2_diff_max_min_transform_block_size = expgolomb.readUE(bitReader)\r\n  const log2_max_trafo_size = log2_diff_max_min_transform_block_size + log2_min_tb_size\r\n\r\n  const log2_ctb_size = log2_min_cb_size + log2_diff_max_min_coding_block_size\r\n  const log2_min_pu_size = log2_min_cb_size - 1\r\n\r\n  const ctb_width  = (width  + (1 << log2_ctb_size) - 1) >> log2_ctb_size\r\n  const ctb_height = (height + (1 << log2_ctb_size) - 1) >> log2_ctb_size\r\n  const ctb_size   = ctb_width * ctb_height\r\n\r\n  const min_cb_width  = width  >> log2_min_cb_size\r\n  const min_cb_height = height >> log2_min_cb_size\r\n  const min_tb_width  = width  >> log2_min_tb_size\r\n  const min_tb_height = height >> log2_min_tb_size\r\n  const min_pu_width  = width  >> log2_min_pu_size\r\n  const min_pu_height = height >> log2_min_pu_size\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chroma_format_idc,\r\n    bit_depth_luma_minus8,\r\n    bit_depth_chroma_minus8,\r\n    general_profile_space,\r\n    general_tier_flag,\r\n    general_profile_compatibility_flags,\r\n    constraint_flags,\r\n    separate_colour_plane_flag,\r\n    log2_min_cb_size,\r\n    log2_diff_max_min_coding_block_size,\r\n    log2_min_tb_size,\r\n    log2_diff_max_min_transform_block_size,\r\n    log2_max_trafo_size,\r\n    log2_ctb_size,\r\n    log2_min_pu_size,\r\n    ctb_width,\r\n    ctb_height,\r\n    ctb_size,\r\n    min_cb_width,\r\n    min_cb_height,\r\n    min_tb_width,\r\n    min_tb_height,\r\n    min_pu_width,\r\n    min_pu_height,\r\n    log2_max_poc_lsb\r\n  }\r\n}\r\n\r\nexport interface HevcPPS {\r\n  pps_pic_parameter_set_id: number\r\n  pps_seq_parameter_set_id: number\r\n  dependent_slice_segment_flag: number\r\n  output_flag_present_flag: number\r\n  num_extra_slice_header_bits: number\r\n}\r\n\r\nexport function parsePPS(pps: Uint8ArrayInterface): HevcPPS {\r\n  if (!pps || pps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (pps[0] === 0x00\r\n    && pps[1] === 0x00\r\n    && pps[2] === 0x00\r\n    && pps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  const buffer = naluUnescape(pps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const pps_pic_parameter_set_id = expgolomb.readUE(bitReader)\r\n  const pps_seq_parameter_set_id = expgolomb.readUE(bitReader)\r\n  const dependent_slice_segment_flag = bitReader.readU1()\r\n  const output_flag_present_flag = bitReader.readU1()\r\n  const num_extra_slice_header_bits = bitReader.readU(3)\r\n\r\n  return {\r\n    pps_pic_parameter_set_id,\r\n    pps_seq_parameter_set_id,\r\n    dependent_slice_segment_flag,\r\n    output_flag_present_flag,\r\n    num_extra_slice_header_bits\r\n  }\r\n}\r\n","/*\r\n * libmedia mp3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVStream from '../AVStream'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\n\r\nconst MpegAudioV10SampleRateTable = [44100, 48000, 32000, 0]\r\n\r\nconst MpegAudioV20SampleRateTable = [22050, 24000, 16000, 0]\r\n\r\nconst MpegAudioV25SampleRateTable = [11025, 12000, 8000, 0]\r\n\r\nconst MpegAudioV10FrameSizeTable = [0, 1152, 1152, 384]\r\n\r\nconst MpegAudioV20FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV25FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV1L1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1]\r\n\r\nconst MpegAudioV1L2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1]\r\n\r\nconst MpegAudioV1L3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1]\r\n\r\nconst MpegAudioV2L1BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, -1]\r\n\r\nconst MpegAudioV2L2L3BitRateTable = [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1]\r\n\r\nexport function getSampleRateByVersionIndex(version: number, samplingFreqIndex: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25SampleRateTable[samplingFreqIndex]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20SampleRateTable[samplingFreqIndex]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10SampleRateTable[samplingFreqIndex]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getFrameSizeByVersionLayer(version: number, layer: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25FrameSizeTable[layer]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20FrameSizeTable[layer]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10FrameSizeTable[layer]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getBitRateByVersionLayerIndex(version: number, layer: number, index: number) {\r\n\r\n  switch (layer) {\r\n    // layer3\r\n    case 1:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L3BitRateTable[index]\r\n      }\r\n      break\r\n    // layer2\r\n    case 2:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L2BitRateTable[index]\r\n      }\r\n    // layer1\r\n    case 3:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L1BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L1BitRateTable[index]\r\n      }\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getProfileByLayer(layer: number) {\r\n  switch (layer) {\r\n    case 1:\r\n      // Layer 3\r\n      return 34\r\n    case 2:\r\n      // Layer 2\r\n      return 33\r\n    case 3:\r\n      // Layer 1\r\n      return 32\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport const enum MP3Profile {\r\n  Layer1 = 32,\r\n  Layer2 = 33,\r\n  Layer3 = 34\r\n}\r\n\r\nexport const MP3Profile2Name: Record<MP3Profile, string> = {\r\n  [MP3Profile.Layer1]: 'Layer1',\r\n  [MP3Profile.Layer2]: 'Layer2',\r\n  [MP3Profile.Layer3]: 'Layer3'\r\n}\r\n\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, buffer: Uint8ArrayInterface) {\r\n  if (buffer && buffer.length >= 4) {\r\n    const ver = (buffer[1] >>> 3) & 0x03\r\n    const layer = (buffer[1] & 0x06) >> 1\r\n    // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n    const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n    const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n    const channelCount = channelMode !== 3 ? 2 : 1\r\n    const profile = getProfileByLayer(layer)\r\n    const sampleRate = getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channelCount\r\n  }\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia vp8 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata.subarray(4))\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n","/*\r\n * libmedia vp9 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { PixelFormatDescriptorsMap } from 'avutil/pixelFormatDescriptor'\r\nimport { avQ2D } from 'avutil/util/rational'\r\nimport { AVChromaLocation, AVColorRange } from 'avutil/pixfmt'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\n\r\nexport const enum VP9Profile {\r\n  Profile0,\r\n  Profile1,\r\n  Profile2,\r\n  Profile3\r\n}\r\n\r\nexport const VP9Profile2Name: Record<VP9Profile, string> = {\r\n  [VP9Profile.Profile0]: 'Profile0',\r\n  [VP9Profile.Profile1]: 'Profile1',\r\n  [VP9Profile.Profile2]: 'Profile2',\r\n  [VP9Profile.Profile3]: 'Profile3'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 512 * 384, maxFrameRate: 30 },\r\n  { level: 11, maxResolution: 512 * 384, maxFrameRate: 60 },\r\n  { level: 20, maxResolution: 960 * 540, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 960 * 540, maxFrameRate: 60 },\r\n  { level: 30, maxResolution: 1920 * 1080, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 1920 * 1080, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2560 * 1440, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2560 * 1440, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 3840 * 2160, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 3840 * 2160, maxFrameRate: 60 },\r\n  { level: 60, maxResolution: 4096 * 2160, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 4096 * 2160, maxFrameRate: 60 },\r\n  { level: 70, maxResolution: 8192 * 4320, maxFrameRate: 30 },\r\n  { level: 71, maxResolution: 8192 * 4320, maxFrameRate: 60 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height;\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n\r\nconst enum VPX_CHROMA_SUBSAMPLING {\r\n  VPX_SUBSAMPLING_420_VERTICAL = 0,\r\n  VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA = 1,\r\n  VPX_SUBSAMPLING_422 = 2,\r\n  VPX_SUBSAMPLING_444 = 3\r\n}\r\n\r\nfunction getVpccFeature(codecpar: pointer<AVCodecParameters>) {\r\n  let profile = codecpar.profile\r\n  let level = codecpar.level\r\n  if (level === NOPTS_VALUE) {\r\n    level = getLevelByResolution(codecpar.width, codecpar.height, avQ2D(codecpar.framerate))\r\n  }\r\n  const desc = PixelFormatDescriptorsMap[codecpar.format]\r\n\r\n  let bitDepth = codecpar.bitsPerCodedSample\r\n  let chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n  if (desc) {\r\n    bitDepth = desc.comp[0].depth\r\n    if (desc.log2ChromaW === 1 && desc.log2ChromaH === 1) {\r\n      if (codecpar.chromaLocation === AVChromaLocation.AVCHROMA_LOC_LEFT) {\r\n        chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      }\r\n    }\r\n    else if (desc.log2ChromaW === 1 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_422\r\n    }\r\n    else if (desc.log2ChromaW === 0 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_444\r\n    }\r\n  }\r\n  const fullRange = codecpar.colorRange === AVColorRange.AVCOL_RANGE_JPEG ? 1 : 0\r\n\r\n  if (profile === NOPTS_VALUE && bitDepth) {\r\n    if (chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      || chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n    ) {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile0 : VP9Profile.Profile2\r\n    }\r\n    else {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile1 : VP9Profile.Profile3\r\n    }\r\n  }\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRange\r\n  }\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>) {\r\n  const ioWriter = new BufferWriter(new Uint8Array(8))\r\n  const vpcc = getVpccFeature(codecpar)\r\n  ioWriter.writeUint8(vpcc.profile)\r\n  ioWriter.writeUint8(vpcc.level)\r\n  ioWriter.writeUint8((vpcc.bitDepth << 4) | (vpcc.chromaSubsampling << 1) | vpcc.fullRange)\r\n  ioWriter.writeUint8(codecpar.colorPrimaries)\r\n  ioWriter.writeUint8(codecpar.colorTrc)\r\n  ioWriter.writeUint8(codecpar.colorSpace)\r\n  ioWriter.writeUint16(0)\r\n  return ioWriter.getWroteBuffer()\r\n}","/*\r\n * libmedia vvc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { Data } from 'common/types/type'\r\nimport { BitFormat } from './h264'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum VVCNaluType {\r\n  kTRAIL_NUT      = 0,\r\n  kSTSA_NUT       = 1,\r\n  kRADL_NUT       = 2,\r\n  kRASL_NUT       = 3,\r\n  kRSV_VCL_4      = 4,\r\n  kRSV_VCL_5      = 5,\r\n  kRSV_VCL_6      = 6,\r\n  kIDR_W_RADL     = 7,\r\n  kIDR_N_LP       = 8,\r\n  kCRA_NUT        = 9,\r\n  kGDR_NUT        = 10,\r\n  kRSV_IRAP_11    = 11,\r\n  kOPI_NUT        = 12,\r\n  kDCI_NUT        = 13,\r\n  kVPS_NUT        = 14,\r\n  kSPS_NUT        = 15,\r\n  kPPS_NUT        = 16,\r\n  kPREFIX_APS_NUT = 17,\r\n  kSUFFIX_APS_NUT = 18,\r\n  kPH_NUT         = 19,\r\n  kAUD_NUT        = 20,\r\n  kEOS_NUT        = 21,\r\n  kEOB_NUT        = 22,\r\n  kPREFIX_SEI_NUT = 23,\r\n  kSUFFIX_SEI_NUT = 24,\r\n  kFD_NUT         = 25,\r\n  kRSV_NVCL_26    = 26,\r\n  kRSV_NVCL_27    = 27,\r\n  kUNSPEC_28      = 28,\r\n  kUNSPEC_29      = 29,\r\n  kUNSPEC_30      = 30,\r\n  kUNSPEC_31      = 31,\r\n}\r\n\r\nexport const enum VVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\nexport const enum VVCAPSType {\r\n  kALF     = 0,\r\n  kLMCS    = 1,\r\n  kSCALING = 2\r\n}\r\n\r\nfunction parsePTL(bitReader: BitReader) {\r\n  const olsIdx = bitReader.readU(9)\r\n  const numSublayers = bitReader.readU(3)\r\n  const constantFrameRate = bitReader.readU(2)\r\n  const chromaFormatIdc = bitReader.readU(2)\r\n  const bitDepthMinus8 = bitReader.readU(3)\r\n  bitReader.readU(5)\r\n\r\n  // VvcPTLRecord\r\n  bitReader.readU(2)\r\n  const num_bytes_constraint_info = bitReader.readU(6)\r\n  const generalProfileIdc = bitReader.readU(7)\r\n  const generalTierFlag = bitReader.readU(1)\r\n  const generalLevelIdc = bitReader.readU(8)\r\n  const ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n  const ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n  const generalConstraintInfo = []\r\n  const sublayerLevelIdc = []\r\n\r\n  if (num_bytes_constraint_info) {\r\n    for (let i = 0; i < num_bytes_constraint_info - 1; i++) {\r\n      generalConstraintInfo[i] = bitReader.readU(8)\r\n    }\r\n    generalConstraintInfo[num_bytes_constraint_info - 1] = bitReader.readU(6)\r\n  }\r\n  else {\r\n    bitReader.readU(6)\r\n  }\r\n  if (numSublayers > 1) {\r\n    let ptl_sublayer_present_mask = 0\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      const val = bitReader.readU(1)\r\n      ptl_sublayer_present_mask |= val << j\r\n    }\r\n    for (let j = numSublayers; j <= 8 && numSublayers > 1; ++j) {\r\n      bitReader.readU(1)\r\n    }\r\n    \r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      if (ptl_sublayer_present_mask & (1 << j)) {\r\n        sublayerLevelIdc[j] = bitReader.readU(8)\r\n      }\r\n    }\r\n  }\r\n  const ptl_num_sub_profiles = bitReader.readU(8)\r\n  const generalSubProfileIdc = []\r\n  if (ptl_num_sub_profiles) {\r\n    for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n      generalSubProfileIdc.push(bitReader.readU(8))\r\n    }\r\n  }\r\n\r\n  const maxPictureWidth = bitReader.readU(16)\r\n  const maxPictureHeight = bitReader.readU(16)\r\n  const avgFramerate = bitReader.readU(16)\r\n\r\n  return {\r\n    olsIdx,\r\n    numSublayers,\r\n    bitDepthMinus8,\r\n    chromaFormatIdc,\r\n    constantFrameRate,\r\n    generalProfileIdc,\r\n    generalTierFlag,\r\n    generalLevelIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    generalConstraintInfo,\r\n    sublayerLevelIdc,\r\n    generalSubProfileIdc,\r\n    maxPictureWidth,\r\n    maxPictureHeight,\r\n    avgFramerate\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * vvcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 5   reserved (11111)\r\n * - 2   lengthSizeMinusOne\r\n * - 1   ptl_present_flag\r\n * if ptl_present_flag\r\n *   - 9   ols_idx\r\n *   - 3  num_sublayers\r\n *   - 2  constant_frame_rate\r\n *   - 2  chroma_format_idc\r\n *   - 3  bit_depth_minus8\r\n *   - 5  reserved (11111)\r\n *   VvcPTLRecord\r\n *   - 2 reserved (11)\r\n *   - 6 num_bytes_constraint_info\r\n *   - 7 general_profile_idc\r\n *   - 1 general_tier_flag\r\n *   - 8 general_level_idc\r\n *   - 1 general_level_idc\r\n *   - 1 ptl_multilayer_enabled_flag\r\n *   if num_bytes_constraint_info > 0\r\n *      for (i = 0; i < num_bytes_constraint_info - 1; i++)\r\n *        - 8 general_constraint_info[i]\r\n *      - 6 general_constraint_info[num_bytes_constraint_info - 1]\r\n *   else\r\n *      - 6 reserved\r\n *   if num_sublayers > 1\r\n *      - num_sublayers - 2 ptl_sublayer_level_present_flag\r\n *      - 8 - num_sublayers + 1 ptl_reserved_zero_bit\r\n *      for (i = num_sublayers -2; i >= 0; i--)\r\n *        if ptl_sublayer_present_mask & (1 << i)\r\n *          - 8 sublayer_level_idc[i]\r\n *    - 8 ptl_num_sub_profiles\r\n *    if ptl_num_sub_profiles\r\n *      for (i = 0; i < ptl_num_sub_profiles; i++)\r\n *        - 32 general_sub_profile_idc[i]\r\n *    - 16 max_picture_width\r\n *    - 16 max_picture_height\r\n *    - 16 avg_frame_rate\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 2   reserved (0)\r\n * - 5   NAL_unit_type\r\n * if nalu_type != VVC_NALU_DEC_PARAM && nalu_type != VVC_NALU_OPI\r\n *    - 16  numNalus\r\n * else\r\n *   numNalus = 1\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n\r\n  const bufferReader = new BufferReader(extradata, true)\r\n\r\n  const ptlPresentFlag = bufferReader.readUint8() & 0x01\r\n\r\n  if (ptlPresentFlag) {\r\n    const bitReader = new BitReader()\r\n    bitReader.appendBuffer(extradata.subarray(1))\r\n    parsePTL(bitReader)\r\n    bufferReader.skip(bitReader.getPos())\r\n  }\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x1f\r\n    let count = 1\r\n\r\n    if (naluType !== VVCNaluType.kDCI_NUT && naluType !== VVCNaluType.kOPI_NUT) {\r\n      count = bufferReader.readUint16()\r\n    }\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n  \r\n  const sps = spss[0]\r\n  let ptl: Uint8Array\r\n  if (sps) {\r\n    const spsParams = parseSPS(sps)\r\n    let generalConstraintInfo = spsParams.generalConstraintInfo\r\n    if (!generalConstraintInfo.length) {\r\n      generalConstraintInfo = new Array(12).fill(0)\r\n    }\r\n    const biWriter = new BitWriter()\r\n    biWriter.writeU(9, 0)\r\n    biWriter.writeU(3, spsParams.spsMaxSublayersMinus1 + 1)\r\n    biWriter.writeU(2, 1)\r\n    biWriter.writeU(2, spsParams.chromaFormatIdc)\r\n    biWriter.writeU(3, spsParams.bitDepthMinus8)\r\n    biWriter.writeU(5, 0b11111)\r\n    biWriter.writeU(2, 0)\r\n    biWriter.writeU(6, generalConstraintInfo.length)\r\n    biWriter.writeU(7, spsParams.profile)\r\n    biWriter.writeU1(spsParams.tierFlag)\r\n    biWriter.writeU(8, spsParams.level)\r\n    biWriter.writeU1(spsParams.ptlFrameOnlyConstraintFlag)\r\n    biWriter.writeU1(spsParams.ptlMultilayerEnabledFlag)\r\n\r\n    if (generalConstraintInfo.length) {\r\n      for (let i = 0; i < generalConstraintInfo.length - 1; i++) {\r\n        biWriter.writeU(8, generalConstraintInfo[i])\r\n      }\r\n      biWriter.writeU(6, generalConstraintInfo[generalConstraintInfo.length - 1])\r\n    }\r\n    else {\r\n      biWriter.writeU(6, 0b111111)\r\n    }\r\n\r\n    if (spsParams.spsMaxSublayersMinus1 + 1 > 1) {\r\n      let ptl_sublayer_level_present_flags = 0\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        ptl_sublayer_level_present_flags = (ptl_sublayer_level_present_flags << 1 | spsParams.ptlSublayerLevelPresentFlag[i])\r\n      }\r\n      biWriter.writeU(spsParams.spsMaxSublayersMinus1, ptl_sublayer_level_present_flags)\r\n\r\n      for (let j = spsParams.spsMaxSublayersMinus1 + 1; j <= 8 && spsParams.spsMaxSublayersMinus1 > 0; ++j) {\r\n        biWriter.writeU1(0)\r\n      }\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        if (spsParams.ptlSublayerLevelPresentFlag[i]) {\r\n          biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n        }\r\n      }\r\n    }\r\n    biWriter.writeU(8, spsParams.generalSubProfileIdc.length)\r\n    for (let i = 0; i < spsParams.generalSubProfileIdc.length; i++) {\r\n      biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n    }\r\n    biWriter.writeU(16, spsParams.width)\r\n    biWriter.writeU(16, spsParams.height)\r\n    biWriter.writeU(16, 0)\r\n    biWriter.padding()\r\n    ptl = biWriter.getBuffer().subarray(0, biWriter.getPointer())\r\n  }\r\n\r\n  let length = 2 + (ptl ? ptl.length : 0)\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n\r\n  bufferWriter.writeUint8(NALULengthSizeMinusOne << 1 | (ptl ? 1 : 0) | 0xf8)\r\n\r\n  if (ptl) {\r\n    bufferWriter.writeBuffer(ptl)\r\n  }\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kVPS_NUT)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kSPS_NUT)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kPPS_NUT)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return type !== VVCNaluType.kVPS_NUT\r\n          && type !== VVCNaluType.kSPS_NUT\r\n          && type !== VVCNaluType.kPPS_NUT\r\n          && type !== VVCNaluType.kAUD_NUT\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    if (type === VVCNaluType.kIDR_N_LP\r\n      || type === VVCNaluType.kIDR_W_RADL\r\n      || type === VVCNaluType.kCRA_NUT\r\n      || type === VVCNaluType.kGDR_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? ((extradata[0] >>> 1) & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    nalus.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  let length = vpss.reduce((prev, vps) => {\r\n    return prev + 4 + vps.length\r\n  }, 0)\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 7)\r\n  const buffer = mapUint8Array(bufferPointer, length + 7)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(VVCNaluType.kAUD_NUT << 3)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(vpss, (vps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(vps)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    if (type === VVCNaluType.kIDR_N_LP\r\n      || type === VVCNaluType.kIDR_W_RADL\r\n      || type === VVCNaluType.kCRA_NUT\r\n      || type === VVCNaluType.kGDR_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = (nalu[1] >>> 3) & 0x1f\r\n\r\n    if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length || vpss.length) {\r\n    const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (vpss.length && spss.length && ppss.length) {\r\n      const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParametersBySps(stream: AVStream, sps: Uint8Array) {\r\n  const { profile, level, width, height } = parseSPS(sps)\r\n  stream.codecpar.profile = profile\r\n  stream.codecpar.level = level\r\n  stream.codecpar.width = width\r\n  stream.codecpar.height = height\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[0] >>> 1) & 0x03\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      parseAVCodecParametersBySps(stream, spss[0])\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return false\r\n  }\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      return type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize + 1)) >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport interface VvcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chromaFormatIdc: number\r\n  bitDepthMinus8: number\r\n  generalProfileSpace: number\r\n  tierFlag: number\r\n  generalConstraintInfo: number[]\r\n  generalSubProfileIdc: number[]\r\n  ptlFrameOnlyConstraintFlag: number\r\n  ptlMultilayerEnabledFlag: number\r\n  spsMaxSublayersMinus1: number\r\n  ptlSublayerLevelPresentFlag: number[]\r\n  sublayerLevelIdc: number[]\r\n  sps_log2_max_pic_order_cnt_lsb_minus4: number\r\n  sps_poc_msb_cycle_flag: number\r\n  sps_poc_msb_cycle_len_minus1: number\r\n  sps_num_extra_ph_bytes: number\r\n    sps_extra_ph_bit_present_flag: number[]\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): VvcSPS {\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bitDepthMinus8 = 0\r\n  let chromaFormatIdc = 1\r\n  let generalProfileSpace = 0\r\n  let tierFlag = 0\r\n  let ptlFrameOnlyConstraintFlag = 0\r\n  let ptlMultilayerEnabledFlag = 0\r\n\r\n  const generalConstraintInfo = []\r\n  const ptlSublayerLevelPresentFlag = []\r\n  const sublayerLevelIdc = []\r\n  const generalSubProfileIdc = []\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nuh_reserved_zero_bit\r\n  bitReader.readU1()\r\n  // layerId\r\n  bitReader.readU(6)\r\n  // nalu type\r\n  bitReader.readU(5)\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_seq_parameter_set_id && sps_video_parameter_set_id\r\n  bitReader.readU(8)\r\n\r\n  const spsMaxSublayersMinus1 = bitReader.readU(3)\r\n  chromaFormatIdc = bitReader.readU(2)\r\n  const sps_log2_ctu_size_minus5 = bitReader.readU(2)\r\n  const sps_ptl_dpb_hrd_params_present_flag = bitReader.readU(1)\r\n  if (sps_ptl_dpb_hrd_params_present_flag) {\r\n    profile = bitReader.readU(7)\r\n    tierFlag = bitReader.readU(1)\r\n    level = bitReader.readU(8)\r\n    ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n    ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n    const gci_present_flag = bitReader.readU(1)\r\n    if (gci_present_flag) {\r\n      for (let j = 0; j < 8; j++) {\r\n        generalConstraintInfo[j] = bitReader.readU(8)\r\n      }\r\n      generalConstraintInfo[8] = bitReader.readU(7)\r\n      const gci_num_reserved_bits = bitReader.readU(8)\r\n      bitReader.readU(gci_num_reserved_bits)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      ptlSublayerLevelPresentFlag[i] = bitReader.readU(1)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      if (ptlSublayerLevelPresentFlag[i]) {\r\n        sublayerLevelIdc[i] = bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    const ptl_num_sub_profiles = bitReader.readU(8)\r\n    if (ptl_num_sub_profiles) {\r\n      for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n        generalSubProfileIdc[i] = bitReader.readU(32)\r\n      }\r\n    } \r\n  }\r\n\r\n  // sps_gdr_enabled_flag\r\n  bitReader.readU1()\r\n  const sps_ref_pic_resampling_enabled_flag = bitReader.readU1()\r\n  if (sps_ref_pic_resampling_enabled_flag) {\r\n    // sps_res_change_in_clvs_allowed_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  const sps_pic_width_max_in_luma_samples = width = expgolomb.readUE(bitReader)\r\n  const sps_pic_height_max_in_luma_samples = height = expgolomb.readUE(bitReader)\r\n\r\n  if (bitReader.readU1()) {\r\n    // sps_conf_win_left_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_right_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_top_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_bottom_offset\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  if (bitReader.readU1()) {\r\n    const sps_num_subpics_minus1 = expgolomb.readUE(bitReader)\r\n    const ctb_log2_size_y = sps_log2_ctu_size_minus5 + 5\r\n    const ctb_size_y      = 1 << ctb_log2_size_y\r\n    const tmp_width_val   = sps_pic_width_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const tmp_height_val  = sps_pic_height_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const wlen            = Math.ceil(Math.log2(tmp_width_val))\r\n    const hlen            = Math.ceil(Math.log2(tmp_height_val))\r\n\r\n    let sps_subpic_id_len = 0\r\n    let sps_subpic_same_size_flag = 0\r\n    let sps_independent_subpics_flag = 0\r\n     // sps_num_subpics_minus1\r\n    if (sps_num_subpics_minus1 > 0) {\r\n      sps_independent_subpics_flag = bitReader.readU1()\r\n      sps_subpic_same_size_flag = bitReader.readU1()\r\n    }\r\n    for (let i = 0; sps_num_subpics_minus1 > 0 && i <= sps_num_subpics_minus1; i++) {\r\n      if (!sps_subpic_same_size_flag || i == 0) {\r\n        if (i > 0 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i > 0 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n      }\r\n      if (!sps_independent_subpics_flag) {\r\n        // sps_subpic_treated_as_pic_flag && sps_loop_filter_across_subpic_enabled_flag\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n    sps_subpic_id_len = expgolomb.readUE(bitReader) + 1\r\n    // sps_subpic_id_mapping_explicitly_signalled_flag\r\n    if (bitReader.readU(1)) {\r\n       // sps_subpic_id_mapping_present_flag\r\n      if (bitReader.readU(1)) {\r\n        for (let i = 0; i <= sps_num_subpics_minus1; i++) {\r\n          // sps_subpic_id[i]\r\n          bitReader.readU(sps_subpic_id_len)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  bitDepthMinus8 = expgolomb.readUE(bitReader)\r\n\r\n  // sps_entropy_coding_sync_enabled_flag\r\n  bitReader.readU(1)\r\n  // sps_entry_point_offsets_present_flag\r\n  bitReader.readU(1)\r\n\r\n  const sps_log2_max_pic_order_cnt_lsb_minus4 = bitReader.readU(4)\r\n  const sps_poc_msb_cycle_flag = bitReader.readU(1)\r\n  let sps_poc_msb_cycle_len_minus1 = 0\r\n  if (sps_poc_msb_cycle_flag) {\r\n    sps_poc_msb_cycle_len_minus1 = expgolomb.readUE(bitReader)\r\n  }\r\n  const sps_extra_ph_bit_present_flag: number[] = []\r\n  const sps_num_extra_ph_bytes = bitReader.readU(2)\r\n  for (let i = 0; i < (sps_num_extra_ph_bytes * 8); i++) {\r\n    sps_extra_ph_bit_present_flag[i] = bitReader.readU(1)\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chromaFormatIdc,\r\n    bitDepthMinus8,\r\n    generalProfileSpace,\r\n    tierFlag,\r\n    generalConstraintInfo,\r\n    generalSubProfileIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    spsMaxSublayersMinus1,\r\n    ptlSublayerLevelPresentFlag,\r\n    sublayerLevelIdc,\r\n    sps_log2_max_pic_order_cnt_lsb_minus4,\r\n    sps_poc_msb_cycle_flag,\r\n    sps_poc_msb_cycle_len_minus1,\r\n    sps_num_extra_ph_bytes,\r\n    sps_extra_ph_bit_present_flag\r\n  }\r\n}\r\n\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n\r\n  if (extradata[0] === 0 && extradata[1] === 0 && extradata[2] === 0 && extradata[3] === 1) {\r\n    extradata = annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n\r\n  const bitReader = new BitReader()\r\n  bitReader.appendBuffer(extradata)\r\n  const ptlPresentFlag = bitReader.readU(8) & 0x01\r\n  if (ptlPresentFlag) {\r\n    return parsePTL(bitReader)\r\n  }\r\n  return {} as Data\r\n}","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from '../avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n  \r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public destroy(formatContext: AVIFormatContext): void {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  // @ts-ignore\r\n  @deasync\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia matroska decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport { IOError } from 'common/io/error'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat } from '../avformat'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData, addAVPacketSideData, createAVPacket } from 'avutil/util/avpacket'\r\nimport AVStream, { AVDisposition } from '../AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { EBMLId, MATROSKABlockAddIdType, MATROSKALacingMode, MATROSKATrackEncodingComp, MATROSKATrackType, MkvTag2CodecId, WebmTag2CodecId } from './matroska/matroska'\r\nimport { IOFlags } from 'common/io/flags'\r\nimport { Additions, ClusterIndex, MatroskaContext, TrackEntry } from './matroska/type'\r\nimport { EbmlSyntaxAttachments, EbmlSyntaxBlockGroup, EbmlSyntaxChapters, EbmlSyntaxCluster, EbmlSyntaxCues, EbmlSyntaxHeadSeek,\r\n  EbmlSyntaxHeader, EbmlSyntaxInfo, EbmlSyntaxTags, EbmlSyntaxTracks, parseEbmlSyntax, readEbmlId, readVInt, readVInt64,\r\n  readVSint\r\n} from './matroska/imatroska'\r\n\r\nimport * as array from 'common/util/array'\r\nimport * as h264 from '../codecs/h264'\r\nimport * as hevc from '../codecs/hevc'\r\nimport * as vvc from '../codecs/vvc'\r\nimport * as vp8 from '../codecs/vp8'\r\nimport * as vp9 from '../codecs/vp9'\r\nimport * as av1 from '../codecs/av1'\r\nimport * as mp3 from '../codecs/mp3'\r\nimport * as opus from '../codecs/opus'\r\nimport * as aac from '../codecs/aac'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport findStreamByTrackUid from './matroska/function/findStreamByTrackUid'\r\nimport findStreamByTrackNumber from './matroska/function/findStreamByTrackNumber'\r\nimport * as intwrite from 'avutil/util/intwrite'\r\nimport * as is from 'common/util/is'\r\nimport * as object from 'common/util/object'\r\nimport * as riff from './riff/riff'\r\nimport * as isomTags from './isom/tags'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as text from 'common/util/text'\r\nimport isDef from 'common/function/isDef'\r\n\r\nexport default class IMatroskaFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.MATROSKA\r\n\r\n  private context: MatroskaContext\r\n\r\n  private blockReader: BufferReader\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n    const context: MatroskaContext = {\r\n      isLive: true,\r\n      firstCluster: -1n,\r\n      segmentStart: -1n,\r\n      header: {\r\n        version: 0,\r\n        readVersion: 0,\r\n        maxIdLength: 4,\r\n        maxSizeLength: 8,\r\n        docType: '',\r\n        docTypeVersion: 0,\r\n        docTypeReadVersion: 0\r\n      },\r\n      seekHead: null,\r\n      info: null,\r\n      tracks: null,\r\n      attachments: null,\r\n      chapters: null,\r\n      cues: null,\r\n      tags: null,\r\n\r\n      currentCluster: {\r\n        timeCode: 0n,\r\n        pos: -1n,\r\n        block: {\r\n          pos: -1n,\r\n          size: -1n\r\n        },\r\n        blockGroup: {\r\n          block: null\r\n        }\r\n      },\r\n      clusterIndexes: [],\r\n      clusterIndexesPosMap: new Map()\r\n    }\r\n    formatContext.privateData = this.context = context\r\n  }\r\n\r\n  private analyzeStreams(formatContext: AVIFormatContext) {\r\n\r\n    const tag2CodecId = this.context.header.docType === 'webm' ? WebmTag2CodecId : MkvTag2CodecId\r\n\r\n    if (this.context.tracks) {\r\n      array.each(this.context.tracks.entry, (track) => {\r\n        const stream = formatContext.createStream()\r\n        stream.privData = track\r\n        stream.codecpar.codecId = tag2CodecId[track.codecId] || AVCodecID.AV_CODEC_ID_NONE\r\n        switch (track.type) {\r\n          case MATROSKATrackType.AUDIO:\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n            break\r\n          case MATROSKATrackType.VIDEO:\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_VIDEO\r\n            break\r\n          case MATROSKATrackType.SUBTITLE:\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n            break\r\n          default:\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_UNKNOWN\r\n        }\r\n\r\n        if (track.language) {\r\n          stream.metadata['language'] = track.language\r\n        }\r\n        if (track.name) {\r\n          stream.metadata['name'] = track.name\r\n        }\r\n        track.currentDts = -1n\r\n\r\n        if (track.audio) {\r\n          if (track.codecName === 'A_PCM/FLOAT/IEEE') {\r\n            if (track.audio.bitDepth === 64) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_F64LE\r\n            }\r\n            else if (track.audio.bitDepth === 32) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_F32LE\r\n            }\r\n          }\r\n          else if (track.codecName === 'A_PCM/INT/BIG') {\r\n            if (track.audio.bitDepth === 16) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S16BE\r\n            }\r\n            else if (track.audio.bitDepth === 24) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S24BE\r\n            }\r\n            else if (track.audio.bitDepth === 32) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S32BE\r\n            }\r\n          }\r\n          else if (track.codecName === 'A_PCM/INT/LIT') {\r\n            if (track.audio.bitDepth === 8) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_U8\r\n            }\r\n            else if (track.audio.bitDepth === 16) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n            }\r\n            else if (track.audio.bitDepth === 24) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S24LE\r\n            }\r\n            else if (track.audio.bitDepth === 32) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_PCM_S32LE\r\n            }\r\n          }\r\n\r\n          stream.codecpar.chLayout.nbChannels = track.audio.channels\r\n          stream.codecpar.sampleRate = static_cast<int32>(track.audio.sampleRate)\r\n          stream.codecpar.bitsPerCodedSample = track.audio.bitDepth\r\n        }\r\n        else if (track.video) {\r\n          stream.codecpar.width = track.video.pixelWidth\r\n          stream.codecpar.height = track.video.pixelHeight\r\n          if (track.video.color) {\r\n            if (is.number(track.video.color.primaries)) {\r\n              stream.codecpar.colorPrimaries = track.video.color.primaries\r\n            }\r\n            if (is.number(track.video.color.transferCharacteristics)) {\r\n              stream.codecpar.colorTrc = track.video.color.transferCharacteristics\r\n            }\r\n            if (is.number(track.video.color.range)) {\r\n              stream.codecpar.colorRange = track.video.color.range\r\n            }\r\n            if (is.number(track.video.color.matrixCoefficients)) {\r\n              stream.codecpar.colorSpace = track.video.color.matrixCoefficients\r\n            }\r\n          }\r\n        }\r\n\r\n        let extradataOffset = 0\r\n\r\n        if (track.codecId === 'V_MS/VFW/FOURCC' && track.codecPrivate?.size >= 40) {\r\n          stream.codecpar.bitsPerCodedSample = (track.codecPrivate.data[15] << 8) | track.codecPrivate.data[14]\r\n          stream.codecpar.codecTag = (track.codecPrivate.data[19] << 24) |  (track.codecPrivate.data[18] << 16)\r\n            | (track.codecPrivate.data[17] << 8) | track.codecPrivate.data[16]\r\n          \r\n          stream.codecpar.codecId = riff.codecBmpTags[stream.codecpar.codecTag] || AVCodecID.AV_CODEC_ID_NONE\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_NONE) {\r\n            stream.codecpar.codecId === isomTags.codecMovVideoTags[stream.codecpar.codecTag] || AVCodecID.AV_CODEC_ID_NONE\r\n          }\r\n          extradataOffset = 40\r\n        }\r\n        else if (track.codecId === 'V_QUICKTIME' && track.codecPrivate?.size >= 21) {\r\n          const tags = stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO ? isomTags.codecMovAudioTags : isomTags.codecMovVideoTags\r\n          stream.codecpar.codecTag = (track.codecPrivate.data[3] << 24) |  (track.codecPrivate.data[2] << 16)\r\n          | (track.codecPrivate.data[1] << 8) | track.codecPrivate.data[0]\r\n\r\n          const codecId = tags[stream.codecpar.codecTag]\r\n          if (codecId) {\r\n            const data = new Uint8Array(4)\r\n            const size = static_cast<int32>(track.codecPrivate.size)\r\n            data[0] = (size >>> 24) & 0xff\r\n            data[1] = (size >>> 16) & 0xff\r\n            data[2] = (size >>> 8) & 0xff\r\n            data[3] = size & 0xff\r\n            track.codecPrivate.size += 4n\r\n            track.codecPrivate.data = concatTypeArray(Uint8Array, [data, track.codecPrivate.data])\r\n          }\r\n          stream.codecpar.codecId = codecId || AVCodecID.AV_CODEC_ID_NONE\r\n        }\r\n\r\n        if (track.codecPrivate?.data && (track.codecPrivate.size - static_cast<int64>(extradataOffset)) > 0) {\r\n          let codecPrivateData = track.codecPrivate.data.subarray(extradataOffset)\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_SSA\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ASS\r\n          ) {\r\n            const header = text.decode(codecPrivateData)\r\n            let lines = header.split(/\\r?\\n/)\r\n            for (let i = 0; i < lines.length; i++) {\r\n              if (lines[i].trim() === '[Events]') {\r\n                lines = lines.slice(0, i)\r\n                break\r\n              }\r\n            }\r\n            lines.push('[Events]')\r\n            lines.push('Format: ReadOrder, Layer, Style, Name, MarginL, MarginR, MarginV, Effect, Text')\r\n            codecPrivateData = text.encode(lines.join('\\n'))\r\n          }\r\n\r\n          stream.codecpar.extradataSize = codecPrivateData.length\r\n          stream.codecpar.extradata = avMalloc(codecPrivateData.length)\r\n          memcpyFromUint8Array(stream.codecpar.extradata, codecPrivateData.length, codecPrivateData)\r\n\r\n          if (stream.codecpar.extradata) {\r\n            switch (stream.codecpar.codecId) {\r\n              case AVCodecID.AV_CODEC_ID_H264:\r\n                h264.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_HEVC:\r\n                hevc.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_VVC:\r\n                vvc.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_AV1:\r\n                av1.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_VP8:\r\n                vp8.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_VP9:\r\n                vp9.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_AAC:\r\n                aac.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_MP3:\r\n                mp3.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n              case AVCodecID.AV_CODEC_ID_OPUS:\r\n                opus.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize))\r\n                break\r\n            }\r\n          }\r\n          else {\r\n\r\n            let extradata: Uint8Array\r\n\r\n            switch (stream.codecpar.codecId) {\r\n              case AVCodecID.AV_CODEC_ID_AAC:\r\n                extradata = aac.avCodecParameters2Extradata(stream.codecpar)\r\n                break\r\n            }\r\n            if (extradata) {\r\n              stream.codecpar.extradataSize = extradata.length\r\n              stream.codecpar.extradata = avMalloc(stream.codecpar.extradataSize)\r\n              memcpyFromUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize, extradata)\r\n            }\r\n          }\r\n        }\r\n\r\n        if (this.context.info) {\r\n          stream.timeBase.num = 1\r\n          if (this.context.info.timestampScale) {\r\n            stream.timeBase.den = static_cast<int32>((AV_TIME_BASE * 1000) / this.context.info.timestampScale)\r\n          }\r\n          else {\r\n            stream.timeBase.den = 1000\r\n            this.context.info.timestampScale = AV_TIME_BASE\r\n          }\r\n          if (this.context.info.duration) {\r\n            stream.duration = static_cast<int64>(this.context.info.duration)\r\n          }\r\n        }\r\n\r\n        if (track.default == null || track.default) {\r\n          stream.disposition |= AVDisposition.DEFAULT\r\n        }\r\n\r\n        if (track.encodings) {\r\n          array.each(track.encodings.entry, (entry) => {\r\n            if (entry.compression && isDef(entry.compression.algo)) {\r\n              track.needDecompression = true\r\n            }\r\n            if (entry.encryption && isDef(entry.encryption.algo)) {\r\n              track.needDecryption = true\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    if (this.context.attachments) {\r\n      array.each(this.context.attachments.entry, (attachment) => {\r\n        const stream = formatContext.createStream()\r\n        stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_ATTACHMENT\r\n        stream.privData = attachment\r\n        if (attachment.data) {\r\n          stream.codecpar.extradataSize = static_cast<int32>(attachment.data.size)\r\n          stream.codecpar.extradata = avMalloc(stream.codecpar.extradataSize)\r\n          memcpyFromUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize, attachment.data.data)\r\n        }\r\n      })\r\n    }\r\n\r\n    if (this.context.tags) {\r\n      array.each(this.context.tags.entry, (tag) => {\r\n        if (tag.tag?.name === 'DURATION') {\r\n          let time = tag.tag.string.replaceAll('\\x00', '').split('.')\r\n          let f = time[0].split(':')\r\n\r\n          let duration = BigInt(+f[0]) * BigInt(1000000 * 60 * 60)\r\n            + BigInt(+f[1]) * BigInt(1000000 * 60)\r\n            + BigInt(+f[2]) * 1000000n\r\n            + (BigInt(+time[1]) / 1000n)\r\n\r\n          const stream = findStreamByTrackUid(formatContext.streams, tag.target.trackUid)\r\n\r\n          if (stream) {\r\n            stream.duration = avRescaleQ(duration, AV_TIME_BASE_Q, stream.timeBase)\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    if (this.context.chapters) {\r\n      array.each(this.context.chapters.entry, (chapter) => {\r\n        const atom = chapter.atom\r\n        if (atom) {\r\n          array.each(atom, (item) => {\r\n            formatContext.chapters.push({\r\n              id: item.uid,\r\n              start: item.start,\r\n              end: item.end,\r\n              timeBase: {\r\n                num: 1,\r\n                den: 1000000000\r\n              },\r\n              metadata: {\r\n                title: item.display?.title || '',\r\n                language: item.display?.language || ''\r\n              }\r\n            })\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    const magic = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n    if (magic !== EBMLId.HEADER) {\r\n      logger.error('not matroska format')\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    const headerSize = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n    this.context.header = object.extend(this.context.header, await parseEbmlSyntax(formatContext, headerSize, EbmlSyntaxHeader))\r\n\r\n    const segmentId = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n    if (segmentId !== EBMLId.SEGMENT) {\r\n      logger.error('not matroska format')\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    const segmentSize = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n\r\n    this.context.segmentStart = formatContext.ioReader.getPos()\r\n    const segmentEndPos = formatContext.ioReader.getPos() + segmentSize\r\n\r\n    const readTopLevelEbml: Set<EBMLId> = new Set()\r\n\r\n    let hasTracks = false\r\n    let hasCluster = false\r\n\r\n    while (formatContext.ioReader.getPos() < segmentEndPos || !hasTracks || !hasCluster) {\r\n      const currentElementPos = formatContext.ioReader.getPos()\r\n      const id = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n\r\n      if (id === errorType.DATA_INVALID) {\r\n        await this.syncTopLevelElement(formatContext, 2)\r\n        continue\r\n      }\r\n\r\n      const length = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n\r\n      if (length === static_cast<int64>(errorType.DATA_INVALID)) {\r\n        await this.syncTopLevelElement(formatContext, 2)\r\n        continue\r\n      }\r\n\r\n      if (id === EBMLId.SEEK_HEAD) {\r\n        this.context.isLive = false\r\n        this.context.seekHead = await parseEbmlSyntax(formatContext, length, EbmlSyntaxHeadSeek)\r\n      }\r\n      else if (id === EBMLId.CUES) {\r\n        this.context.isLive = false\r\n        this.context.cues = await parseEbmlSyntax(formatContext, length, EbmlSyntaxCues)\r\n      }\r\n      else if (id === EBMLId.CHAPTERS) {\r\n        this.context.isLive = false\r\n        this.context.chapters = await parseEbmlSyntax(formatContext, length, EbmlSyntaxChapters)\r\n      }\r\n      else if (id === EBMLId.INFO) {\r\n        this.context.info = await parseEbmlSyntax(formatContext, length, EbmlSyntaxInfo)\r\n      }\r\n      else if (id === EBMLId.TAGS) {\r\n        this.context.tags = await parseEbmlSyntax(formatContext, length, EbmlSyntaxTags)\r\n      }\r\n      else if (id === EBMLId.ATTACHMENTS) {\r\n        this.context.attachments = await parseEbmlSyntax(formatContext, length, EbmlSyntaxAttachments)\r\n      }\r\n      else if (id === EBMLId.TRACKS) {\r\n        hasTracks = true\r\n        this.context.tracks = await parseEbmlSyntax(formatContext, length, EbmlSyntaxTracks)\r\n      }\r\n      else if (id === EBMLId.CLUSTER) {\r\n        hasCluster = true\r\n        this.context.firstCluster = currentElementPos\r\n        if (this.context.isLive || !this.context.seekHead || !(formatContext.ioReader.flags & IOFlags.SEEKABLE)) {\r\n          break\r\n        }\r\n        const entry = this.context.seekHead.entry\r\n        let i = 0\r\n        for (; i < entry.length; i++) {\r\n          if (!readTopLevelEbml.has(entry[i].id)) {\r\n            await formatContext.ioReader.seek(entry[i].pos + this.context.segmentStart)\r\n            break\r\n          }\r\n        }\r\n        if (i === entry.length) {\r\n          break\r\n        }\r\n      }\r\n      else {\r\n        await formatContext.ioReader.skip(static_cast<int32>(length))\r\n      }\r\n      readTopLevelEbml.add(id)\r\n    }\r\n\r\n    if (this.context.firstCluster > 0) {\r\n      await formatContext.ioReader.seek(this.context.firstCluster)\r\n    }\r\n\r\n    this.analyzeStreams(formatContext)\r\n\r\n    return 0\r\n  }\r\n\r\n  private parseAdditions(avpacket: pointer<AVPacket>, additions: Additions) {\r\n    for (let i = 0; i < additions.entry.length; i++) {\r\n      const addition = additions.entry[i]\r\n      if (addition.additional?.size) {\r\n        if (addition.additionalId === MATROSKABlockAddIdType.ITU_T_T35) {\r\n          // TODO handle ITU_T_T35\r\n          logger.warn('ITU_T_T35 not support now')\r\n        }\r\n\r\n        const data = avMalloc(addition.additional.data.length + 8)\r\n        intwrite.wb64(data, static_cast<uint64>(addition.additionalId))\r\n        memcpyFromUint8Array(data + 8, addition.additional.data.length, addition.additional.data)\r\n        addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL, data, addition.additional.data.length + 8)\r\n      }\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async parseBlock(formatContext: AVIFormatContext, packet: pointer<AVPacket>) {\r\n\r\n    const buffer = this.context.currentCluster.block?.data || this.context.currentCluster.blockGroup.block.data\r\n    let basePos = this.context.currentCluster.block?.pos\r\n    if (basePos < 0) {\r\n      basePos = this.context.currentCluster.blockGroup.block.pos\r\n    }\r\n\r\n    let isKey = -1\r\n    let additions: Additions\r\n    let duration = 0n\r\n\r\n    if (this.context.currentCluster.blockGroup?.block) {\r\n      additions = this.context.currentCluster.blockGroup.additions\r\n      if (this.context.currentCluster.blockGroup.reference) {\r\n        isKey = this.context.currentCluster.blockGroup.reference.length === 0 ? 1 : 0\r\n      }\r\n      else {\r\n        isKey = 1\r\n      }\r\n      if (this.context.currentCluster.blockGroup.duration) {\r\n        duration = this.context.currentCluster.blockGroup.duration\r\n      }\r\n    }\r\n\r\n    if (!this.blockReader) {\r\n      this.blockReader = new BufferReader(buffer)\r\n    }\r\n    else {\r\n      this.blockReader.resetBuffer(buffer)\r\n    }\r\n\r\n    const now = this.blockReader.getPos()\r\n\r\n    const trackNumber = static_cast<uint32>(await readVInt64(this.blockReader, 8))\r\n\r\n    const stream = findStreamByTrackNumber(formatContext.streams, trackNumber)\r\n\r\n    if (!stream) {\r\n      logger.error(`invalid track number ${trackNumber}`)\r\n      return errorType.EAGAIN\r\n    }\r\n\r\n    const timestamp = this.blockReader.readInt16()\r\n    const flags = this.blockReader.readUint8()\r\n    if (isKey === -1) {\r\n      isKey = (flags & 0x80) ? 1 : 0\r\n    }\r\n\r\n    const lacing = (flags >>> 1) & 0x03\r\n\r\n    let frameCount = 0\r\n    let frameSize: number[] = []\r\n\r\n    switch (lacing) {\r\n      case MATROSKALacingMode.XIPH: {\r\n        frameCount = this.blockReader.readUint8() + 1\r\n        let sum = 0\r\n        for (let i = 0; i < frameCount - 1; i++) {\r\n          let size = 0\r\n          while (true) {\r\n            const next = this.blockReader.readUint8()\r\n            if (next === 0) {\r\n              break\r\n            }\r\n            if (next !== 0xff) {\r\n              size += next\r\n              break\r\n            }\r\n            size += 0xff\r\n          }\r\n          sum += size\r\n          frameSize.push(size)\r\n        }\r\n        // the last frame\r\n        frameSize.push(buffer.length - static_cast<int32>(this.blockReader.getPos() - now) - sum)\r\n        break\r\n      }\r\n      case MATROSKALacingMode.EBML: {\r\n        frameCount = this.blockReader.readUint8() + 1\r\n        frameSize.push(await readVInt(this.blockReader, 4))\r\n        let sum = frameSize[0]\r\n        for (let i = 1; i < frameCount - 1; i++) {\r\n          const next = await readVSint(this.blockReader, 4)\r\n          let size = next + frameSize[i - 1]\r\n          sum += size\r\n          frameSize.push(size)\r\n        }\r\n        // the last frame\r\n        frameSize.push(buffer.length - static_cast<int32>(this.blockReader.getPos() - now) - sum)\r\n\r\n        break\r\n      }\r\n\r\n      case MATROSKALacingMode.FIXED_SIZE:\r\n        frameCount = this.blockReader.readUint8() + 1\r\n        const size = (buffer.length - static_cast<int32>(this.blockReader.getPos() - now)) / frameCount\r\n\r\n        assert(size === (size >>> 0))\r\n\r\n        for (let i = 0; i < frameCount; i++) {\r\n          frameSize.push(size)\r\n        }\r\n        break\r\n      case MATROSKALacingMode.NO_LACING:\r\n        frameCount = 1\r\n        frameSize.push(buffer.length - static_cast<int32>(this.blockReader.getPos() - now))\r\n        break\r\n    }\r\n\r\n    const track = stream.privData as TrackEntry\r\n    const trackTimestampScale = track.timeScale || 1\r\n\r\n    if (track.needDecryption) {\r\n      throw new Error('not support encryption stream')\r\n    }\r\n\r\n    // 纳秒时间戳\r\n    let pts = (this.context.currentCluster.timeCode + static_cast<int64>((timestamp * trackTimestampScale) as float))\r\n      * static_cast<int64>(this.context.info.timestampScale)\r\n    if (track.codecDelay) {\r\n      pts -= track.codecDelay\r\n    }\r\n    // 微秒时间戳\r\n    pts /= 1000n\r\n    pts = avRescaleQ(pts, AV_TIME_BASE_Q, stream.timeBase)\r\n\r\n    duration = static_cast<int64>((static_cast<int32>(duration) * trackTimestampScale) as float) * static_cast<int64>(this.context.info.timestampScale)\r\n    duration /= 1000n\r\n    duration = avRescaleQ(duration, AV_TIME_BASE_Q, stream.timeBase)\r\n\r\n    for (let i = 0; i < frameCount; i++) {\r\n      const avpacket = i !== 0 ? createAVPacket() : packet\r\n\r\n      let size = frameSize[i]\r\n      let offset = 0\r\n      let header: Uint8Array\r\n\r\n      if (track.needDecompression) {\r\n        const compression = track.encodings.entry.find((entry) => {\r\n          return !!entry.compression\r\n        })\r\n        switch (compression.compression.algo) {\r\n          case MATROSKATrackEncodingComp.HEADER_STRIP:\r\n            header = compression.compression.settings.data\r\n            size += header.length\r\n            offset = header.length\r\n            break\r\n          default:\r\n            throw new Error(`not support compression stream, algo: ${compression.compression.algo}`)\r\n        }\r\n\r\n      }\r\n\r\n      avpacket.pos = basePos + this.blockReader.getPos()\r\n      avpacket.streamIndex = stream.index\r\n      avpacket.timeBase = stream.timeBase\r\n      avpacket.pts = pts\r\n      avpacket.size = size\r\n      avpacket.duration = duration\r\n      const data = avMalloc(size)\r\n      if (header) {\r\n        memcpyFromUint8Array(data, offset, header)\r\n      }\r\n      memcpyFromUint8Array(data + offset, frameSize[i], this.blockReader.readBuffer(frameSize[i]))\r\n\r\n      addAVPacketData(avpacket, data, size)\r\n\r\n      if (stream.codecpar.codecType !== AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n        if (isKey) {\r\n          avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n        }\r\n        avpacket.dts = pts\r\n      }\r\n      else {\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n        ) {\r\n          avpacket.bitFormat = h264.BitFormat.AVCC\r\n        }\r\n        if (isKey) {\r\n          avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n          if (track.gopCount > 1) {\r\n            track.dtsDelta = avRescaleQ(track.maxPts - track.minPts, stream.timeBase, AV_TIME_BASE_Q) / static_cast<int64>(track.gopCount - 1)\r\n            track.firstGopGot = true\r\n          }\r\n          else if (!track.dtsDelta) {\r\n            // 以 30 帧开始\r\n            track.dtsDelta = avRescaleQ(33n, AV_MILLI_TIME_BASE_Q, AV_TIME_BASE_Q)\r\n          }\r\n          track.gopCount = 1\r\n          track.minPts = pts\r\n          track.maxPts = pts\r\n        }\r\n        else {\r\n          if (!track.firstGopGot && track.gopCount > 2 && pts > track.maxPts) {\r\n            track.dtsDelta = avRescaleQ(track.maxPts - track.minPts, stream.timeBase, AV_TIME_BASE_Q) / static_cast<int64>(track.gopCount - 1)\r\n          }\r\n          else if (!track.dtsDelta) {\r\n            // 以 30 帧开始\r\n            track.dtsDelta = avRescaleQ(33n, AV_MILLI_TIME_BASE_Q, AV_TIME_BASE_Q)\r\n          }\r\n          track.gopCount++\r\n        }\r\n        if (pts > track.maxPts) {\r\n          track.maxPts = pts\r\n        }\r\n        if (track.currentDts >= 0n) {\r\n          if (duration) {\r\n            track.currentDts = track.currentDts + avRescaleQ(duration, stream.timeBase, AV_TIME_BASE_Q)\r\n            avpacket.dts = avRescaleQ(track.currentDts, AV_TIME_BASE_Q, stream.timeBase)\r\n          }\r\n          else {\r\n            track.currentDts = track.currentDts + track.dtsDelta\r\n            avpacket.dts = avRescaleQ(track.currentDts, AV_TIME_BASE_Q, stream.timeBase)\r\n          }\r\n        }\r\n        else {\r\n          track.currentDts = avRescaleQ(avpacket.pts, stream.timeBase, AV_TIME_BASE_Q)\r\n          avpacket.dts = avpacket.pts\r\n          // 第一个包从 0 开始\r\n          if (track.currentDts < 100000n) {\r\n            track.currentDts = 0n\r\n            avpacket.dts = 0n\r\n          }\r\n        }\r\n      }\r\n\r\n      if (additions) {\r\n        this.parseAdditions(avpacket, additions)\r\n      }\r\n\r\n      if (i !== 0) {\r\n        formatContext.interval.packetBuffer.push(avpacket)\r\n      }\r\n    }\r\n\r\n    this.context.currentCluster.block = {\r\n      pos: -1n,\r\n      size: -1n\r\n    }\r\n    this.context.currentCluster.blockGroup = {\r\n      block: null\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private addClusterIndex(clusterIndex: ClusterIndex) {\r\n\r\n    if (this.context.clusterIndexesPosMap.has(clusterIndex.pos)) {\r\n      return\r\n    }\r\n\r\n    const index = array.binarySearch(this.context.clusterIndexes, (sample) => {\r\n      if (sample.time < clusterIndex.time) {\r\n        return 1\r\n      }\r\n      else {\r\n        return -1\r\n      }\r\n    })\r\n    if (index > -1) {\r\n      this.context.clusterIndexesPosMap.set(clusterIndex.pos, index)\r\n      this.context.clusterIndexes.splice(index, 0, clusterIndex)\r\n    }\r\n    else {\r\n      this.context.clusterIndexesPosMap.set(clusterIndex.pos, this.context.clusterIndexes.length)\r\n      this.context.clusterIndexes.push(clusterIndex)\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const now = formatContext.ioReader.getPos()\r\n    const id = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n\r\n    if (id === errorType.DATA_INVALID) {\r\n      await this.syncTopLevelElement(formatContext)\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n\r\n    const length = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n\r\n    if (length === static_cast<int64>(errorType.DATA_INVALID)) {\r\n      await this.syncTopLevelElement(formatContext)\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n\r\n    if (id === EBMLId.CLUSTER) {\r\n      this.context.currentCluster.pos = now\r\n      this.context.currentCluster.timeCode = 0n\r\n      await parseEbmlSyntax(\r\n        formatContext,\r\n        length,\r\n        EbmlSyntaxCluster,\r\n        this.context.currentCluster,\r\n        [EBMLId.SIMPLE_BLOCK, EBMLId.BLOCK_GROUP]\r\n      )\r\n      this.addClusterIndex({\r\n        time: this.context.currentCluster.timeCode,\r\n        pos: now\r\n      })\r\n      let ret = await this.parseBlock(formatContext, avpacket)\r\n      if (ret === errorType.EAGAIN) {\r\n        return this.readAVPacket_(formatContext, avpacket)\r\n      }\r\n      else if (ret < 0) {\r\n        return ret\r\n      }\r\n    }\r\n    else if (id === EBMLId.SIMPLE_BLOCK) {\r\n      this.context.currentCluster.block = {\r\n        pos: formatContext.ioReader.getPos(),\r\n        size: length,\r\n        data: await formatContext.ioReader.readBuffer(static_cast<int32>(length))\r\n      }\r\n      let ret = await this.parseBlock(formatContext, avpacket)\r\n      if (ret === errorType.EAGAIN) {\r\n        return this.readAVPacket_(formatContext, avpacket)\r\n      }\r\n      else if (ret < 0) {\r\n        return ret\r\n      }\r\n    }\r\n    else if (id === EBMLId.BLOCK_GROUP) {\r\n      await parseEbmlSyntax(\r\n        formatContext,\r\n        length,\r\n        EbmlSyntaxBlockGroup,\r\n        this.context.currentCluster.blockGroup\r\n      )\r\n      let ret = await this.parseBlock(formatContext, avpacket)\r\n      if (ret === errorType.EAGAIN) {\r\n        return this.readAVPacket_(formatContext, avpacket)\r\n      }\r\n      else if (ret < 0) {\r\n        return ret\r\n      }\r\n    }\r\n    else if (id === EBMLId.CUES\r\n      || id === EBMLId.TAGS\r\n      || id === EBMLId.ATTACHMENTS\r\n      || id === EBMLId.CHAPTERS\r\n      || id === EBMLId.INFO\r\n      || id === EBMLId.TRACKS\r\n      || id === EBMLId.SEEK_HEAD\r\n    ) {\r\n      await formatContext.ioReader.skip(static_cast<int32>(length))\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    else {\r\n      await this.syncTopLevelElement(formatContext)\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      return await this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END) {\r\n        logger.error(error.message)\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async syncTopLevelElement(formatContext: AVIFormatContext, analyzeCount: int32 = 3) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    while (true) {\r\n      try {\r\n        const now = formatContext.ioReader.getPos()\r\n        \r\n        const id = await formatContext.ioReader.peekUint32()\r\n\r\n        if (id === EBMLId.CLUSTER\r\n          || id === EBMLId.CUES\r\n          || id === EBMLId.TAGS\r\n          || id === EBMLId.ATTACHMENTS\r\n          || id === EBMLId.CHAPTERS\r\n          || id === EBMLId.INFO\r\n          || id === EBMLId.TRACKS\r\n          || id === EBMLId.SEEK_HEAD\r\n        ) {\r\n          pos = now\r\n          let count = 0\r\n\r\n          await formatContext.ioReader.skip(4)\r\n          \r\n          const length = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n\r\n          if (length === static_cast<int64>(errorType.DATA_INVALID)) {\r\n            await formatContext.ioReader.seek(now + 1n)\r\n            continue\r\n          }\r\n\r\n          await formatContext.ioReader.skip(static_cast<int32>(length))\r\n          while (count <= analyzeCount) {\r\n            const id = await readEbmlId(formatContext, this.context.header.maxIdLength)\r\n            const length = await readVInt64(formatContext.ioReader, this.context.header.maxSizeLength)\r\n            if (id === EBMLId.CLUSTER\r\n              || id === EBMLId.CUES\r\n              || id === EBMLId.TAGS\r\n              || id === EBMLId.ATTACHMENTS\r\n              || id === EBMLId.CHAPTERS\r\n              || id === EBMLId.INFO\r\n              || id === EBMLId.TRACKS\r\n              || id === EBMLId.SEEK_HEAD\r\n            ) {\r\n              count++\r\n              await formatContext.ioReader.skip(static_cast<int32>(length))\r\n            }\r\n            else {\r\n              break\r\n            }\r\n          }\r\n          if (count < analyzeCount) {\r\n            await formatContext.ioReader.seek(pos + 1n)\r\n            pos = NOPTS_VALUE_BIGINT\r\n          }\r\n          else {\r\n            break\r\n          }\r\n        }\r\n        else {\r\n          await formatContext.ioReader.skip(1)\r\n          pos = NOPTS_VALUE_BIGINT\r\n        }\r\n      }\r\n      catch (error) {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n    }\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n\r\n    const now = formatContext.ioReader.getPos()\r\n    const pts = avRescaleQ(timestamp, stream.timeBase, AV_TIME_BASE_Q)\r\n\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    if (this.context.cues?.entry.length) {\r\n      const track = stream.privData as TrackEntry\r\n      for (let i = 0; i < this.context.cues.entry.length; i++) {\r\n        const cue =  this.context.cues.entry[i]\r\n        const time = (cue.time || 0n) * static_cast<int64>(this.context.info.timestampScale) / 1000n\r\n        if (time > pts) {\r\n          const poses = this.context.cues.entry[Math.max(i - 1, 0)].pos\r\n          if (poses.length) {\r\n            const matchPos = poses.find((p) => p.track === track.number)\r\n            if (matchPos) {\r\n              pos = matchPos.pos + this.context.segmentStart\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pos === NOPTS_VALUE_BIGINT && this.context.clusterIndexes.length) {\r\n      for (let i = 0; i < this.context.clusterIndexes.length; i++) {\r\n        const time = this.context.clusterIndexes[i].time * static_cast<int64>(this.context.info.timestampScale) / 1000n\r\n        if (time > pts) {\r\n          pos = this.context.clusterIndexes[Math.max(i - 1, 0)].pos\r\n          break\r\n        }\r\n      }\r\n      if (pos === NOPTS_VALUE_BIGINT) {\r\n        pos = this.context.clusterIndexes[this.context.clusterIndexes.length - 1].pos\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n      array.each(this.context.tracks.entry, (track) => {\r\n        track.currentDts = -1n\r\n      })\r\n      return now\r\n    }\r\n\r\n    return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return this.context.tracks?.entry.length ?? 2\r\n  }\r\n}\r\n","/*\r\n * libmedia isom tag defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport mktagle from 'avformat/function/mktagle'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const codecMovVideoTags: Record<int32, AVCodecID> = {\r\n  [mktagle('mp4v')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVID')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('3IV2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('vvc1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktagle('vvi1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktagle('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('hvc1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('dvhe')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n\r\n  [mktagle('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc2')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc3')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc4')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai5p')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai5q')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai52')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai53')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai55')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai56')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai1p')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai1q')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai12')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai13')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai15')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai16')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('AVin')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('aivx')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('rv64')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('xalg')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avlg')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('dva1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('dvav')]: AVCodecID.AV_CODEC_ID_H264,\r\n\r\n  [mktagle('vp08')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktagle('vp09')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktagle('av01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n}\r\n\r\nexport const codecMovAudioTags: Record<int32, AVCodecID> = {\r\n  [mktagle('mp4a')]: AVCodecID.AV_CODEC_ID_AAC,\r\n  [mktagle('ac-3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktagle('sac3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktagle('ac-4')]: AVCodecID.AV_CODEC_ID_AC4,\r\n\r\n  [mktagle('dtsc')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtsh')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtsl')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtse')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('DTS ')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('ec-3')]: AVCodecID.AV_CODEC_ID_EAC3,\r\n\r\n  [mktagle('.mp3')]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [mktagle('mp3 ')]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [0x6D730055 as int32]: AVCodecID.AV_CODEC_ID_MP3,\r\n\r\n  [mktagle('spex')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktagle('SPXN')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktagle('fLaC')]: AVCodecID.AV_CODEC_ID_FLAC,\r\n  [mktagle('Opus')]: AVCodecID.AV_CODEC_ID_OPUS,\r\n\r\n  [mktagle('alaw')]: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  [mktagle('ulaw')]: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  [mktagle('fl32')]: AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  [mktagle('fl64')]: AVCodecID.AV_CODEC_ID_PCM_F64LE,\r\n  [mktagle('twos')]: AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n  [mktagle('lpcm')]: AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  [mktagle('sowt')]: AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  [mktagle('in24')]: AVCodecID.AV_CODEC_ID_PCM_S24LE,\r\n  [mktagle('in32')]: AVCodecID.AV_CODEC_ID_PCM_S32LE,\r\n  [mktagle('sowt')]: AVCodecID.AV_CODEC_ID_PCM_S8,\r\n  [mktagle('raw ')]: AVCodecID.AV_CODEC_ID_PCM_U8,\r\n  [mktagle('NONE')]: AVCodecID.AV_CODEC_ID_PCM_U8\r\n}","/*\r\n * libmedia\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../../../AVStream'\r\nimport { TrackEntry } from '../type'\r\n\r\nexport default function findStreamByTrackNumber(streams: AVStream[], number: uint32) {\r\n  for (let i = 0; i < streams.length; i++) {\r\n    const track = streams[i].privData as TrackEntry\r\n    if (track.number === number) {\r\n      return streams[i]\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../../../AVStream'\r\nimport { TrackEntry } from '../type'\r\n\r\nexport default function findStreamByTrackUid(streams: AVStream[], uid: uint64) {\r\n  for (let i = 0; i < streams.length; i++) {\r\n    const track = streams[i].privData as TrackEntry\r\n    if (track.uid === uid) {\r\n      return streams[i]\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia matroska decoder util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../../AVFormatContext'\r\nimport { EBMLId, EbmlType } from './matroska'\r\nimport { Addition, Additions, Attachment, Attachments, AudioTrack,\r\n  BlockGroup, Chapter, ChapterAtom, ChapterDisplay, Chapters, Cluster,\r\n  CuePoint, CuePointPos, Cues, Header, Info, MasteringMeta, MatroskaContext, SeekHead, SeekHeadEntry,\r\n  SimpleTag, Tag, TagTargets, Tags, TrackCombinePlanes, TrackEncoding,\r\n  TrackEncodingCompression, TrackEncodingEncryption, TrackEncodings, TrackEntry,\r\n  TrackOperation, TrackPlane, Tracks, VideoColor, VideoProjection, VideoTrack\r\n} from './type'\r\n\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport { BytesReader, BytesReaderSync } from 'common/io/interface'\r\n\r\nconst MAX_ATTACHMENT_READ_SIZE = static_cast<int64>(20 * 1024 * 1024)\r\n\r\ninterface EbmlSyntax<T> {\r\n  type: EbmlType\r\n  isArray?: boolean\r\n  filedName: keyof T\r\n  child?: Partial<Record<EBMLId, EbmlSyntax<any>>>\r\n}\r\n\r\nexport const EbmlSyntaxHeadSeekEntry: Partial<Record<EBMLId, EbmlSyntax<SeekHeadEntry>>> = {\r\n  [EBMLId.SEEK_ID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'id'\r\n  },\r\n  [EBMLId.SEEK_POSITION]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'pos'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxHeadSeek: Partial<Record<EBMLId, EbmlSyntax<SeekHead>>> = {\r\n  [EBMLId.SEEK_ENTRY]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxHeadSeekEntry\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxInfo: Partial<Record<EBMLId, EbmlSyntax<Info>>> = {\r\n  [EBMLId.SEGMENT_UID]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'segmentUUID'\r\n  },\r\n  [EBMLId.TIME_CODE_SCALE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'timestampScale'\r\n  },\r\n  [EBMLId.DURATION]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'duration'\r\n  },\r\n  [EBMLId.TITLE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'title'\r\n  },\r\n  [EBMLId.MUXING_APP]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'muxingApp'\r\n  },\r\n  [EBMLId.WRITING_APP]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'writingApp'\r\n  },\r\n  [EBMLId.DATE_UTC]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'dateUTC'\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxTrackAudio: Partial<Record<EBMLId, EbmlSyntax<AudioTrack>>> = {\r\n  [EBMLId.AUDIO_SAMPLING_FREQ]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'sampleRate'\r\n  },\r\n  [EBMLId.AUDIO_OUT_SAMPLING_FREQ]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'outSampleRate'\r\n  },\r\n  [EBMLId.AUDIO_BITDEPTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'bitDepth'\r\n  },\r\n  [EBMLId.AUDIO_CHANNELS]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'channels'\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxMasteringMeta: Partial<Record<EBMLId, EbmlSyntax<MasteringMeta>>> = {\r\n  [EBMLId.VIDEO_COLOR_RX]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'rx'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_RY]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'ry'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_GX]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'gx'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_GY]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'gy'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_BX]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'bx'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_BY]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'by'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_WHITE_X]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'whiteX'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_WHITE_Y]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'whiteY'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_LUMINA_NCE_MIN]: {\r\n    type: EbmlType.FLOAT,\r\n    isArray: true,\r\n    filedName: 'minLuminance'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_LUMINA_NCE_MAX]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'maxLuminance'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxVideoColor: Partial<Record<EBMLId, EbmlSyntax<VideoColor>>> = {\r\n  [EBMLId.VIDEO_COLOR_MATRIX_COEFF]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'matrixCoefficients'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_BITS_PER_CHANNEL]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'bitsPerChannel'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CB_SUB_HORZ]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'cbSubHorz'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CB_SUB_VERT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'cbSubVert'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CHROMA_SUB_HORZ]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chromaSubHorz'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CHROMA_SUB_VERT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chromaSubVert'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CHROMA_SITING_HORZ]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chromaSitingHorz'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_CHROMA_SITING_VERT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chromaSitingVert'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_RANGE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'range'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_TRANSFER_CHARACTERISTICS]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'transferCharacteristics'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_PRIMARIES]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'primaries'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_MAX_CLL]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'maxCll'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_MAX_FALL]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'maxFall'\r\n  },\r\n  [EBMLId.VIDEO_COLOR_MASTERING_META]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'masteringMeta',\r\n    child: EbmlSyntaxMasteringMeta\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxVideoProjection: Partial<Record<EBMLId, EbmlSyntax<VideoProjection>>> = {\r\n  [EBMLId.VIDEO_PROJECTION_TYPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION_PRIVATE]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'private'\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION_POSE_YAW]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'yaw'\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION_POSE_PITCH]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'pitch'\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION_POSE_ROLL]: {\r\n    type: EbmlType.FLOAT,\r\n    filedName: 'roll'\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxTrackVideo: Partial<Record<EBMLId, EbmlSyntax<VideoTrack>>> = {\r\n  [EBMLId.VIDEO_FRAMERATE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'framerate'\r\n  },\r\n  [EBMLId.VIDEO_DISPLAY_WIDTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'displayWidth'\r\n  },\r\n  [EBMLId.VIDEO_DISPLAY_HEIGHT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'displayHeight'\r\n  },\r\n  [EBMLId.VIDEO_PIXEL_WIDTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'pixelWidth'\r\n  },\r\n  [EBMLId.VIDEO_PIXEL_HEIGHT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'pixelHeight'\r\n  },\r\n  [EBMLId.VIDEO_COLORSPACE]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'colorSpace'\r\n  },\r\n  [EBMLId.VIDEO_ALPHA_MODE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'alphaMode'\r\n  },\r\n  [EBMLId.VIDEO_COLOR]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'color',\r\n    child: EbmlSyntaxVideoColor\r\n  },\r\n  [EBMLId.VIDEO_PROJECTION]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'projection',\r\n    child: EbmlSyntaxVideoProjection\r\n  },\r\n  [EBMLId.VIDEO_DISPLAY_UNIT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'displayUnit'\r\n  },\r\n  [EBMLId.VIDEO_FLAG_INTERLACED]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'interlaced'\r\n  },\r\n  [EBMLId.VIDEO_FIELD_ORDER]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'fieldOrder'\r\n  },\r\n  [EBMLId.VIDEO_STEREO_MODE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'stereoMode'\r\n  },\r\n  [EBMLId.VIDEO_ASPECT_RATIO]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'aspectRatio'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackPlane: Partial<Record<EBMLId, EbmlSyntax<TrackPlane>>> = {\r\n  [EBMLId.TRACK_PLANE_TYPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.TRACK_PLANE_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'uid'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackCombinePlanes: Partial<Record<EBMLId, EbmlSyntax<TrackCombinePlanes>>> = {\r\n  [EBMLId.TRACK_PLANE]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'planes',\r\n    child: EbmlSyntaxTrackPlane\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackOperation: Partial<Record<EBMLId, EbmlSyntax<TrackOperation>>> = {\r\n  [EBMLId.TRACK_COMBINE_PLANES]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxTrackCombinePlanes\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackEncodingCompression: Partial<Record<EBMLId, EbmlSyntax<TrackEncodingCompression>>> = {\r\n  [EBMLId.ENCODING_COMP_ALGO]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'algo'\r\n  },\r\n  [EBMLId.ENCODING_COMP_SETTINGS]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'settings'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackEncodingEncryption: Partial<Record<EBMLId, EbmlSyntax<TrackEncodingEncryption>>> = {\r\n  [EBMLId.ENCODING_ENC_ALGO]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'algo'\r\n  },\r\n  [EBMLId.ENCODING_ENC_KEY_ID]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'keyId'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackEncoding: Partial<Record<EBMLId, EbmlSyntax<TrackEncoding>>> = {\r\n  [EBMLId.ENCODING_SCOPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'scope'\r\n  },\r\n  [EBMLId.ENCODING_TYPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.ENCODING_COMPRESSION]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'compression',\r\n    child: EbmlSyntaxTrackEncodingCompression\r\n  },\r\n  [EBMLId.ENCODING_ENCRYPTION]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'encryption',\r\n    child: EbmlSyntaxTrackEncodingEncryption\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxTrackEncodings: Partial<Record<EBMLId, EbmlSyntax<TrackEncodings>>> = {\r\n  [EBMLId.TRACK_CONTENT_ENCODING]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxTrackEncoding\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTrackEntry: Partial<Record<EBMLId, EbmlSyntax<TrackEntry>>> = {\r\n  [EBMLId.TRACK_NUMBER]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'number'\r\n  },\r\n  [EBMLId.TRACK_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'uid'\r\n  },\r\n  [EBMLId.TRACK_TYPE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.TRACK_NAME]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'name'\r\n  },\r\n  [EBMLId.TRACK_FLAG_DEFAULT]: {\r\n    type: EbmlType.BOOL,\r\n    filedName: 'default'\r\n  },\r\n  [EBMLId.TRACK_FLAG_ENABLED]: {\r\n    type: EbmlType.BOOL,\r\n    filedName: 'enabled'\r\n  },\r\n  [EBMLId.TRACK_LANGUAGE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'language'\r\n  },\r\n  [EBMLId.TRACK_TIME_CODE_SCALE]: {\r\n    type: EbmlType.DOUBLE,\r\n    filedName: 'timeScale'\r\n  },\r\n  [EBMLId.CODEC_ID]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'codecId'\r\n  },\r\n  [EBMLId.CODEC_NAME]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'codecName'\r\n  },\r\n  [EBMLId.CODEC_PRIVATE]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'codecPrivate'\r\n  },\r\n  [EBMLId.TRACK_AUDIO]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'audio',\r\n    child: EbmlSyntaxTrackAudio\r\n  },\r\n  [EBMLId.TRACK_VIDEO]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'video',\r\n    child: EbmlSyntaxTrackVideo\r\n  },\r\n  [EBMLId.TRACK_OPERATION]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'operations',\r\n    child: EbmlSyntaxTrackOperation\r\n  },\r\n  [EBMLId.TRACK_CONTENT_ENCODINGS]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'encodings',\r\n    child: EbmlSyntaxTrackEncodings\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTracks: Partial<Record<EBMLId, EbmlSyntax<Tracks>>> = {\r\n  [EBMLId.TRACK_ENTRY]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxTrackEntry\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxAttachment: Partial<Record<EBMLId, EbmlSyntax<Attachment>>> = {\r\n  [EBMLId.FILE_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'uid'\r\n  },\r\n  [EBMLId.FILE_NAME]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'name'\r\n  },\r\n  [EBMLId.FILE_MIMETYPE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'mime'\r\n  },\r\n  [EBMLId.FILE_DESC]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'description'\r\n  },\r\n  [EBMLId.FILE_DATA]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'data'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxAttachments: Partial<Record<EBMLId, EbmlSyntax<Attachments>>> = {\r\n  [EBMLId.ATTACHED_FILE]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxAttachment\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxChapterDisplay: Partial<Record<EBMLId, EbmlSyntax<ChapterDisplay>>> = {\r\n  [EBMLId.CHAP_STRING]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'title'\r\n  },\r\n  [EBMLId.CHAP_LANG]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'language'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxChapterAtom: Partial<Record<EBMLId, EbmlSyntax<ChapterAtom>>> = {\r\n  [EBMLId.CHAPTER_TIME_START]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'start'\r\n  },\r\n  [EBMLId.CHAPTER_TIME_END]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'end'\r\n  },\r\n  [EBMLId.CHAPTER_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'uid'\r\n  },\r\n  [EBMLId.CHAPTER_DISPLAY]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'display',\r\n    child: EbmlSyntaxChapterDisplay\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxChapter: Partial<Record<EBMLId, EbmlSyntax<Chapter>>> = {\r\n  [EBMLId.CHAPTER_ATOM]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'atom',\r\n    child: EbmlSyntaxChapterAtom\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxChapters: Partial<Record<EBMLId, EbmlSyntax<Chapters>>> = {\r\n  [EBMLId.EDITION_ENTRY]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxChapter\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxCuePointPos: Partial<Record<EBMLId, EbmlSyntax<CuePointPos>>> = {\r\n  [EBMLId.CUE_TRACK]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'track'\r\n  },\r\n  [EBMLId.CUE_CLUSTER_POSITION]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'pos'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxCuePoint: Partial<Record<EBMLId, EbmlSyntax<CuePoint>>> = {\r\n  [EBMLId.CUE_TIME]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'time'\r\n  },\r\n  [EBMLId.CUE_TRACK_POSITION]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'pos',\r\n    child: EbmlSyntaxCuePointPos\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxCues: Partial<Record<EBMLId, EbmlSyntax<Cues>>> = {\r\n  [EBMLId.POINT_ENTRY]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxCuePoint\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTagTargets: Partial<Record<EBMLId, EbmlSyntax<TagTargets>>> = {\r\n  [EBMLId.TAG_TARGETS_TYPE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'type'\r\n  },\r\n  [EBMLId.TAG_TARGETS_TYPE_VALUE]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'typeValue'\r\n  },\r\n  [EBMLId.TAG_TARGETS_TRACK_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'trackUid'\r\n  },\r\n  [EBMLId.TAG_TARGETS_CHAPTER_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'chapterUid'\r\n  },\r\n  [EBMLId.TAG_TARGETS_ATTACH_UID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'attachUid'\r\n  },\r\n}\r\n\r\nexport const EbmlSyntaxSimpleTag: Partial<Record<EBMLId, EbmlSyntax<SimpleTag>>> = {\r\n  [EBMLId.TAG_NAME]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'name'\r\n  },\r\n  [EBMLId.TAG_STRING]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'string'\r\n  },\r\n  [EBMLId.TAG_LANG]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'language'\r\n  },\r\n  [EBMLId.TAG_DEFAULT]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'default'\r\n  },\r\n  [EBMLId.TAG_DEFAULT_BUG]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'default'\r\n  },\r\n  [EBMLId.TAG_SIMPLE]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'sub'\r\n  }\r\n}\r\nEbmlSyntaxSimpleTag[EBMLId.TAG_SIMPLE].child = EbmlSyntaxSimpleTag\r\n\r\nexport const EbmlSyntaxTag: Partial<Record<EBMLId, EbmlSyntax<Tag>>> = {\r\n  [EBMLId.TAG_SIMPLE]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'tag',\r\n    child: EbmlSyntaxSimpleTag\r\n  },\r\n  [EBMLId.TAG_TARGETS]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'target',\r\n    child: EbmlSyntaxTagTargets\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxTags: Partial<Record<EBMLId, EbmlSyntax<Tags>>> = {\r\n  [EBMLId.TAG]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxTag\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxAddition: Partial<Record<EBMLId, EbmlSyntax<Addition>>> = {\r\n  [EBMLId.BLOCK_ADD_ID]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'additionalId'\r\n  },\r\n  [EBMLId.BLOCK_ADDITIONAL]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'additional'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxAdditions: Partial<Record<EBMLId, EbmlSyntax<Additions>>> = {\r\n  [EBMLId.BLOCK_MORE]: {\r\n    type: EbmlType.OBJECT,\r\n    isArray: true,\r\n    filedName: 'entry',\r\n    child: EbmlSyntaxAddition\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxBlockGroup: Partial<Record<EBMLId, EbmlSyntax<BlockGroup>>> = {\r\n  [EBMLId.BLOCK]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'block'\r\n  },\r\n  [EBMLId.BLOCK_ADDITIONS]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'additions',\r\n    child: EbmlSyntaxAdditions\r\n  },\r\n  [EBMLId.BLOCK_DURATION]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'duration'\r\n  },\r\n  [EBMLId.DISCARD_PADDING]: {\r\n    type: EbmlType.SINT64,\r\n    filedName: 'discardPadding'\r\n  },\r\n  [EBMLId.BLOCK_REFERENCE]: {\r\n    type: EbmlType.SINT64,\r\n    isArray: true,\r\n    filedName: 'reference'\r\n  },\r\n  [EBMLId.CODEC_STATE]: {\r\n    type: EbmlType.BOOL,\r\n    filedName: 'nonSimple'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxCluster: Partial<Record<EBMLId, EbmlSyntax<Cluster>>> = {\r\n  [EBMLId.SIMPLE_BLOCK]: {\r\n    type: EbmlType.BUFFER,\r\n    filedName: 'block'\r\n  },\r\n  [EBMLId.BLOCK_GROUP]: {\r\n    type: EbmlType.OBJECT,\r\n    filedName: 'blockGroup',\r\n    child: EbmlSyntaxBlockGroup\r\n  },\r\n  [EBMLId.CLUSTER_TIME_CODE]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'timeCode'\r\n  },\r\n  [EBMLId.CLUSTER_POSITION]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'pos'\r\n  },\r\n  [EBMLId.CLUSTER_PREV_SIZE]: {\r\n    type: EbmlType.UINT64,\r\n    filedName: 'prevSize'\r\n  }\r\n}\r\n\r\nexport const EbmlSyntaxHeader: Partial<Record<EBMLId, EbmlSyntax<Header>>> = {\r\n  [EBMLId.EBML_VERSION]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'version'\r\n  },\r\n  [EBMLId.EBML_READ_VERSION]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'readVersion'\r\n  },\r\n  [EBMLId.EBML_MAX_ID_LENGTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'maxIdLength'\r\n  },\r\n  [EBMLId.EBML_MAX_SIZE_LENGTH]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'maxSizeLength'\r\n  },\r\n  [EBMLId.DOCTYPE]: {\r\n    type: EbmlType.STRING,\r\n    filedName: 'docType'\r\n  },\r\n  [EBMLId.DOC_TYPE_VERSION]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'docTypeVersion'\r\n  },\r\n  [EBMLId.DOC_TYPE_READ_VERSION]: {\r\n    type: EbmlType.UINT,\r\n    filedName: 'docTypeReadVersion'\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readVInt(reader: BytesReader | BytesReaderSync, maxLen: number) {\r\n\r\n  assert(maxLen <= 4)\r\n\r\n  const pos = reader.getPos()\r\n\r\n  let mask = await reader.readUint8()\r\n\r\n  if (!mask) {\r\n    logger.error(`0x00 as pos ${pos} invalid as first byte of an EBML number`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  let len = 1\r\n\r\n  while (!(mask & 0x80)) {\r\n    len++\r\n    mask <<= 1\r\n  }\r\n  mask &= 0x7f\r\n\r\n  if (len > maxLen) {\r\n    logger.error(`Length ${len} indicated by an EBML number's first byte ${mask.toString(16)} at pos ${pos} exceeds max length ${maxLen}.`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  let value = mask >>> (len - 1)\r\n\r\n  while (--len) {\r\n    value <<= 8\r\n    const next = await reader.readUint8()\r\n    value |= next\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readVSint(reader: BytesReader | BytesReaderSync, maxLen: number) {\r\n\r\n  assert(maxLen <= 4)\r\n\r\n  const now = reader.getPos()\r\n  const value = await readVInt(reader, maxLen)\r\n\r\n  return value - ((1 << (7 * (static_cast<int32>(reader.getPos() - now)) - 1)) - 1)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readVInt64(reader: BytesReader | BytesReaderSync, maxLen: number) {\r\n\r\n  assert(maxLen <= 8)\r\n\r\n  const pos = reader.getPos()\r\n  let mask = await reader.readUint8()\r\n  let len = 1\r\n\r\n  if (!mask) {\r\n    logger.error(`0x00 as pos ${pos} invalid as first byte of an EBML number`)\r\n    return static_cast<int64>(errorType.DATA_INVALID)\r\n  }\r\n\r\n  while (!(mask & 0x80)) {\r\n    len++\r\n    mask <<= 1\r\n  }\r\n  mask &= 0x7f\r\n\r\n  if (len > maxLen) {\r\n    logger.error(`Length ${len} indicated by an EBML number's first byte ${mask.toString(16)} at pos ${pos} exceeds max length ${maxLen}.`)\r\n    return static_cast<int64>(errorType.DATA_INVALID)\r\n  }\r\n\r\n  let value = static_cast<int64>(mask >>> (len - 1))\r\n\r\n  while (--len) {\r\n    value <<= 8n\r\n    const next = await reader.readUint8()\r\n    value |= static_cast<int64>(next)\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readUint(formatContext: AVIFormatContext, len: int64) {\r\n  switch (len) {\r\n    case 0n:\r\n      return 0\r\n    case 1n:\r\n      return formatContext.ioReader.readUint8()\r\n    case 2n:\r\n      return formatContext.ioReader.readUint16()\r\n    case 3n:\r\n      return formatContext.ioReader.readUint24()\r\n    case 4n:\r\n      return formatContext.ioReader.readUint32()\r\n    case 8n:\r\n      return formatContext.ioReader.readUint64()\r\n  }\r\n\r\n  let num = 0n\r\n  let n = 0\r\n  while (n++ < len) {\r\n    const next = await formatContext.ioReader.readUint8()\r\n    num = (num << 8n) | static_cast<uint64>(next)\r\n  }\r\n  return num\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readInt(formatContext: AVIFormatContext, len: int64) {\r\n  switch (len) {\r\n    case 0n:\r\n      return 0\r\n    case 1n:\r\n      return formatContext.ioReader.readInt8()\r\n    case 2n:\r\n      return formatContext.ioReader.readInt16()\r\n    case 4n:\r\n      return formatContext.ioReader.readInt32()\r\n    case 8n:\r\n      return formatContext.ioReader.readInt64()\r\n  }\r\n\r\n  let num = 0n\r\n  let n = 0\r\n  while (n++ < len) {\r\n    const next = await formatContext.ioReader.readUint8()\r\n    num = (num << 8n) | static_cast<uint64>(next)\r\n  }\r\n\r\n  if (len === 3n) {\r\n    return static_cast<int32>(BigInt.asIntN(24, num) as int64)\r\n  }\r\n\r\n  return BigInt.asIntN(64, num)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readFloat(formatContext: AVIFormatContext, len: int64) {\r\n  if (len === 4n) {\r\n    return formatContext.ioReader.readFloat()\r\n  }\r\n  else if (len === 8n) {\r\n    return formatContext.ioReader.readDouble()\r\n  }\r\n  else {\r\n    await formatContext.ioReader.skip(static_cast<int32>(len))\r\n    return 0.0\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function readEbmlId(formatContext: AVIFormatContext, maxLen: number) {\r\n  const pos = formatContext.ioReader.getPos()\r\n  let mask = await formatContext.ioReader.peekUint8()\r\n  if (!mask) {\r\n    logger.error(`0x00 as pos ${pos} invalid as first byte of an EBML number`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  let len = 1\r\n\r\n  while (!(mask & 0x80)) {\r\n    len++\r\n    mask <<= 1\r\n  }\r\n\r\n  if (len > maxLen) {\r\n    logger.error(`Length ${len} indicated by an EBML number's first byte ${mask.toString(16)} at pos ${pos} exceeds max length ${maxLen}.`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  let value = 0\r\n\r\n  while (len--) {\r\n    value <<= 8\r\n    const next = await formatContext.ioReader.readUint8()\r\n    value |= next\r\n  }\r\n  return value \r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function parseEbml(formatContext: AVIFormatContext, size: int64, callback: (id: EBMLId, length: int64) => Promise<void | boolean>) {\r\n  const matroskaContext = formatContext.privateData as MatroskaContext\r\n  const now = formatContext.ioReader.getPos()\r\n  while (formatContext.ioReader.getPos() < now + size) {\r\n    const id = await readEbmlId(formatContext, matroskaContext.header.maxIdLength)\r\n    const length = await readVInt64(formatContext.ioReader, matroskaContext.header.maxSizeLength)\r\n    const currentPos = formatContext.ioReader.getPos()\r\n    if ((await callback(id, length)) === false) {\r\n      return\r\n    }\r\n    assert(formatContext.ioReader.getPos() - currentPos === length)\r\n  }\r\n  assert(formatContext.ioReader.getPos() - now === size)\r\n}\r\n\r\n// @ts-ignore\r\n@deasync\r\nexport async function parseEbmlSyntax<T extends Record<string, any>>(\r\n  formatContext: AVIFormatContext,\r\n  size: int64,\r\n  syntax: Partial<Record<EBMLId, EbmlSyntax<T>>>,\r\n  ebml:  Partial<T> = {},\r\n  stopId: EBMLId[] = []\r\n) {\r\n  await parseEbml(formatContext, size, async (id, length) => {\r\n    if (syntax[id]) {\r\n      const item = syntax[id]\r\n      let value: any\r\n      switch (item.type) {\r\n        case EbmlType.UINT:\r\n          value = await readUint(formatContext, length)\r\n          break\r\n        case EbmlType.UINT64: {\r\n          value = await readUint(formatContext, length)\r\n          if (is.number(value)) {\r\n            value = BigInt(value)\r\n          }\r\n          break\r\n        }\r\n        case EbmlType.SINT:\r\n          value = await readInt(formatContext, length)\r\n          break\r\n        case EbmlType.SINT64: {\r\n          value = await readInt(formatContext, length)\r\n          if (is.number(value)) {\r\n            value = BigInt(value)\r\n          }\r\n          break\r\n        }\r\n        case EbmlType.DOUBLE:\r\n        case EbmlType.FLOAT:\r\n          value = await readFloat(formatContext, length)\r\n          break\r\n        case EbmlType.STRING:\r\n          value = await formatContext.ioReader.readString(static_cast<int32>(length))\r\n          break\r\n        case EbmlType.BOOL:\r\n          value = !!(await readUint(formatContext, length))\r\n          break\r\n        case EbmlType.BUFFER:\r\n          value = {\r\n            pos: formatContext.ioReader.getPos(),\r\n            size: length,\r\n            data: (length < MAX_ATTACHMENT_READ_SIZE) ? await formatContext.ioReader.readBuffer(static_cast<int32>(length)) : null\r\n          }\r\n          break\r\n        case EbmlType.OBJECT: {\r\n          if (item.child) {\r\n            value = await parseEbmlSyntax(formatContext, length, item.child) as any\r\n          }\r\n          else {\r\n            value = {}\r\n          }\r\n          break\r\n        }\r\n        default:\r\n          await formatContext.ioReader.skip(static_cast<int32>(length))\r\n          break\r\n      }\r\n      if (value != null) {\r\n        if (item.isArray) {\r\n          const list: any[] = ebml[item.filedName] || []\r\n          list.push(value)\r\n          ebml[item.filedName] = list as any\r\n        }\r\n        else {\r\n          ebml[item.filedName] = value\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      await formatContext.ioReader.skip(static_cast<int32>(length))\r\n    }\r\n    if (stopId.length && array.has(stopId, id)) {\r\n      return false\r\n    }\r\n  })\r\n  return ebml as T\r\n}","/*\r\n * libmedia matroska defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum EbmlType {\r\n  NONE,\r\n  UINT,\r\n  UINT64,\r\n  SINT,\r\n  SINT64,\r\n  FLOAT,\r\n  DOUBLE,\r\n  STRING,\r\n  BUFFER,\r\n  OBJECT,\r\n  BOOL\r\n}\r\n\r\nexport const enum EBMLId {\r\n  HEADER = 0x1A45DFA3,\r\n  SEGMENT = 0x18538067,\r\n\r\n  EBML_VERSION = 0x4286,\r\n  EBML_READ_VERSION = 0x42F7,\r\n  EBML_MAX_ID_LENGTH = 0x42F2,\r\n  EBML_MAX_SIZE_LENGTH = 0x42F3,\r\n  DOCTYPE = 0x4282,\r\n  DOC_TYPE_VERSION = 0x4287,\r\n  DOC_TYPE_READ_VERSION = 0x4285,\r\n  VOID = 0xEC,\r\n  CRC32 = 0xBF,\r\n\r\n  // Matroska top-level master ID\r\n  INFO = 0x1549A966,\r\n  TRACKS = 0x1654AE6B,\r\n  CUES = 0x1C53BB6B,\r\n  TAGS = 0x1254C367,\r\n  SEEK_HEAD = 0x114D9B74,\r\n  ATTACHMENTS = 0x1941A469,\r\n  CLUSTER = 0x1F43B675,\r\n  CHAPTERS = 0x1043A770,\r\n\r\n  /* IDs in the info master */\r\n  TIME_CODE_SCALE = 0x2AD7B1,\r\n  DURATION = 0x4489,\r\n  TITLE = 0x7BA9,\r\n  WRITING_APP = 0x5741,\r\n  MUXING_APP = 0x4D80,\r\n  DATE_UTC = 0x4461,\r\n  SEGMENT_UID = 0x73A4,\r\n\r\n  /* ID in the tracks master */\r\n  TRACK_ENTRY = 0xAE,\r\n\r\n  /* IDs in the track entry master */\r\n  TRACK_NUMBER = 0xD7,\r\n  TRACK_UID = 0x73C5,\r\n  TRACK_TYPE = 0x83,\r\n  TRACK_VIDEO = 0xE0,\r\n  TRACK_AUDIO = 0xE1,\r\n  TRACK_OPERATION = 0xE2,\r\n  TRACK_COMBINE_PLANES = 0xE3,\r\n  TRACK_PLANE = 0xE4,\r\n  TRACK_PLANE_UID = 0xE5,\r\n  TRACK_PLANE_TYPE = 0xE6,\r\n  CODEC_ID = 0x86,\r\n  CODEC_PRIVATE = 0x63A2,\r\n  CODEC_NAME = 0x258688,\r\n  CODEC_INFO_URL = 0x3B4040,\r\n  CODEC_DOWN_LOAD_URL = 0x26B240,\r\n  CODEC_DECODE_ALL = 0xAA,\r\n  CODEC_DELAY = 0x56AA,\r\n  SEEK_PREROLL = 0x56BB,\r\n  TRACK_NAME = 0x536E,\r\n  TRACK_LANGUAGE = 0x22B59C,\r\n  TRACK_FLAG_ENABLED = 0xB9,\r\n  TRACK_FLAG_DEFAULT = 0x88,\r\n  TRACK_FLAG_FORCED = 0x55AA,\r\n  TRACK_FLAG_LACING = 0x9C,\r\n  TRACK_MIN_CACHE = 0x6DE7,\r\n  TRACK_MAX_CACHE = 0x6DF8,\r\n  TRACK_DEFAULT_DURATION = 0x23E383,\r\n  TRACK_CONTENT_ENCODINGS = 0x6D80,\r\n  TRACK_CONTENT_ENCODING = 0x6240,\r\n  TRACK_TIME_CODE_SCALE = 0x23314F,\r\n  TRACK_MAX_BLK_ADD_ID = 0x55EE,\r\n\r\n  /* IDs in the track video master */\r\n  VIDEO_FRAMERATE = 0x2383E3,\r\n  VIDEO_DISPLAY_WIDTH = 0x54B0,\r\n  VIDEO_DISPLAY_HEIGHT = 0x54BA,\r\n  VIDEO_PIXEL_WIDTH = 0xB0,\r\n  VIDEO_PIXEL_HEIGHT = 0xBA,\r\n  VIDEO_PIXEL_CROP_B = 0x54AA,\r\n  VIDEO_PIXEL_CROP_T = 0x54BB,\r\n  VIDEO_PIXEL_CROP_L = 0x54CC,\r\n  VIDEO_PIXEL_CROP_R = 0x54DD,\r\n  VIDEO_DISPLAY_UNIT = 0x54B2,\r\n  VIDEO_FLAG_INTERLACED = 0x9A,\r\n  VIDEO_FIELD_ORDER = 0x9D,\r\n  VIDEO_STEREO_MODE = 0x53B8,\r\n  VIDEO_ALPHA_MODE = 0x53C0,\r\n  VIDEO_ASPECT_RATIO = 0x54B3,\r\n  VIDEO_COLORSPACE = 0x2EB524,\r\n  VIDEO_COLOR = 0x55B0,\r\n\r\n  VIDEO_COLOR_MATRIX_COEFF = 0x55B1,\r\n  VIDEO_COLOR_BITS_PER_CHANNEL = 0x55B2,\r\n  VIDEO_COLOR_CHROMA_SUB_HORZ = 0x55B3,\r\n  VIDEO_COLOR_CHROMA_SUB_VERT = 0x55B4,\r\n  VIDEO_COLOR_CB_SUB_HORZ = 0x55B5,\r\n  VIDEO_COLOR_CB_SUB_VERT = 0x55B6,\r\n  VIDEO_COLOR_CHROMA_SITING_HORZ = 0x55B7,\r\n  VIDEO_COLOR_CHROMA_SITING_VERT = 0x55B8,\r\n  VIDEO_COLOR_RANGE = 0x55B9,\r\n  VIDEO_COLOR_TRANSFER_CHARACTERISTICS = 0x55BA,\r\n\r\n  VIDEO_COLOR_PRIMARIES = 0x55BB,\r\n  VIDEO_COLOR_MAX_CLL = 0x55BC,\r\n  VIDEO_COLOR_MAX_FALL = 0x55BD,\r\n\r\n  VIDEO_COLOR_MASTERING_META = 0x55D0,\r\n  VIDEO_COLOR_RX = 0x55D1,\r\n  VIDEO_COLOR_RY = 0x55D2,\r\n  VIDEO_COLOR_GX = 0x55D3,\r\n  VIDEO_COLOR_GY = 0x55D4,\r\n  VIDEO_COLOR_BX = 0x55D5,\r\n  VIDEO_COLOR_BY = 0x55D6,\r\n  VIDEO_COLOR_WHITE_X = 0x55D7,\r\n  VIDEO_COLOR_WHITE_Y = 0x55D8,\r\n  VIDEO_COLOR_LUMINA_NCE_MAX = 0x55D9,\r\n  VIDEO_COLOR_LUMINA_NCE_MIN = 0x55DA,\r\n\r\n  VIDEO_PROJECTION = 0x7670,\r\n  VIDEO_PROJECTION_TYPE = 0x7671,\r\n  VIDEO_PROJECTION_PRIVATE = 0x7672,\r\n  VIDEO_PROJECTION_POSE_YAW = 0x7673,\r\n  VIDEO_PROJECTION_POSE_PITCH = 0x7674,\r\n  VIDEO_PROJECTION_POSE_ROLL = 0x7675,\r\n\r\n  /* IDs in the track audio master */\r\n  AUDIO_SAMPLING_FREQ = 0xB5,\r\n  AUDIO_OUT_SAMPLING_FREQ = 0x78B5,\r\n\r\n  AUDIO_BITDEPTH = 0x6264,\r\n  AUDIO_CHANNELS = 0x9F,\r\n\r\n  /* IDs in the content encoding master */\r\n  ENCODING_ORDER = 0x5031,\r\n  ENCODING_SCOPE = 0x5032,\r\n  ENCODING_TYPE = 0x5033,\r\n  ENCODING_COMPRESSION = 0x5034,\r\n  ENCODING_COMP_ALGO = 0x4254,\r\n  ENCODING_COMP_SETTINGS = 0x4255,\r\n\r\n  ENCODING_ENCRYPTION = 0x5035,\r\n  ENCODING_ENC_AES_SETTINGS = 0x47E7,\r\n  ENCODING_ENC_ALGO = 0x47E1,\r\n  ENCODING_ENC_KEY_ID = 0x47E2,\r\n  ENCODING_SIG_ALGO = 0x47E5,\r\n  ENCODING_SIG_HASH_ALGO = 0x47E6,\r\n  ENCODING_SIG_KEY_ID = 0x47E4,\r\n  ENCODING_SIG_NATURE = 0x47E3,\r\n\r\n  /* ID in the cues master */\r\n  POINT_ENTRY = 0xBB,\r\n\r\n  /* IDs in the point entry master */\r\n  CUE_TIME = 0xB3,\r\n  CUE_TRACK_POSITION = 0xB7,\r\n\r\n  /* IDs in the cue track position master */\r\n  CUE_TRACK = 0xF7,\r\n  CUE_CLUSTER_POSITION = 0xF1,\r\n  CUE_RELATIVE_POSITION = 0xF0,\r\n  CUE_DURATION = 0xB2,\r\n  CUE_BLOCKNUMBER = 0x5378,\r\n\r\n  /* IDs in the tags master */\r\n  TAG = 0x7373,\r\n  TAG_SIMPLE = 0x67C8,\r\n  TAG_NAME = 0x45A3,\r\n  TAG_STRING = 0x4487,\r\n  TAG_LANG = 0x447A,\r\n  TAG_DEFAULT = 0x4484,\r\n  TAG_DEFAULT_BUG = 0x44B4,\r\n  TAG_TARGETS = 0x63C0,\r\n  TAG_TARGETS_TYPE = 0x63CA,\r\n  TAG_TARGETS_TYPE_VALUE = 0x68CA,\r\n  TAG_TARGETS_TRACK_UID = 0x63C5,\r\n  TAG_TARGETS_CHAPTER_UID = 0x63C4,\r\n  TAG_TARGETS_ATTACH_UID = 0x63C6,\r\n\r\n  /* IDs in the seek head master */\r\n  SEEK_ENTRY = 0x4DBB,\r\n\r\n  /* IDs in the seek point master */\r\n  SEEK_ID = 0x53AB,\r\n  SEEK_POSITION = 0x53AC,\r\n\r\n  /* IDs in the cluster master */\r\n  CLUSTER_TIME_CODE = 0xE7,\r\n  CLUSTER_POSITION = 0xA7,\r\n  CLUSTER_PREV_SIZE = 0xAB,\r\n  BLOCK_GROUP = 0xA0,\r\n  BLOCK_ADDITIONS = 0x75A1,\r\n  BLOCK_MORE = 0xA6,\r\n  BLOCK_ADD_ID = 0xEE,\r\n  BLOCK_ADDITIONAL = 0xA5,\r\n  SIMPLE_BLOCK = 0xA3,\r\n\r\n  /* IDs in the block group master */\r\n  BLOCK = 0xA1,\r\n  BLOCK_DURATION = 0x9B,\r\n  BLOCK_REFERENCE = 0xFB,\r\n  CODEC_STATE = 0xA4,\r\n  DISCARD_PADDING = 0x75A2,\r\n\r\n  /* IDs in the attachments master */\r\n  ATTACHED_FILE = 0x61A7,\r\n  FILE_DESC = 0x467E,\r\n  FILE_NAME = 0x466E,\r\n  FILE_MIMETYPE = 0x4660,\r\n  FILE_DATA = 0x465C,\r\n  FILE_UID = 0x46AE,\r\n\r\n  /* IDs in the chapters master */\r\n  EDITION_ENTRY = 0x45B9,\r\n  CHAPTER_ATOM = 0xB6,\r\n  CHAPTER_TIME_START = 0x91,\r\n  CHAPTER_TIME_END = 0x92,\r\n  CHAPTER_DISPLAY = 0x80,\r\n  CHAP_STRING = 0x85,\r\n  CHAP_LANG = 0x437C,\r\n  CHAP_COUNTRY = 0x437E,\r\n  EDITION_UID = 0x45BC,\r\n  EDITION_FLAG_HIDDEN = 0x45BD,\r\n  EDITION_FLAG_DEFAULT = 0x45DB,\r\n  EDITION_FLAG_ORDERED = 0x45DD,\r\n  CHAPTER_UID = 0x73C4,\r\n  CHAPTER_FLAG_HIDDEN = 0x98,\r\n  CHAPTER_FLAG_ENABLED = 0x4598,\r\n  CHAPTER_PHYS_EQUIV = 0x63C3\r\n}\r\n\r\nexport const enum MATROSKATrackType {\r\n  NONE = 0x0,\r\n  VIDEO = 0x1,\r\n  AUDIO = 0x2,\r\n  COMPLEX = 0x3,\r\n  LOGO = 0x10,\r\n  SUBTITLE = 0x11,\r\n  BUTTONS = 0x12,\r\n  CONTROL = 0x20,\r\n  METADATA = 0x21,\r\n}\r\n\r\nexport const enum MATROSKATrackEncodingComp {\r\n  Z_LIB = 0,\r\n  BZ_LIB = 1,\r\n  LZO = 2,\r\n  HEADER_STRIP = 3\r\n}\r\n\r\nexport const enum MATROSKAVideoInterlaceFlag {\r\n  UNDETERMINED = 0,\r\n  INTERLACED = 1,\r\n  PROGRESSIVE = 2\r\n}\r\n\r\nexport const enum MATROSKAVideoFieldOrder {\r\n  PROGRESSIVE = 0,\r\n  TT = 1,\r\n  UNDETERMINED = 2,\r\n  BB = 6,\r\n  TB = 9,\r\n  BT = 14\r\n}\r\n\r\nexport const enum MATROSKAVideoStereoModeType {\r\n  MONO = 0,\r\n  LEFT_RIGHT = 1,\r\n  BOTTOM_TOP = 2,\r\n  TOP_BOTTOM = 3,\r\n  CHECKERBOARD_RL = 4,\r\n  CHECKERBOARD_LR = 5,\r\n  ROW_INTERLEAVED_RL = 6,\r\n  ROW_INTERLEAVED_LR = 7,\r\n  COL_INTERLEAVED_RL = 8,\r\n  COL_INTERLEAVED_LR = 9,\r\n  ANAGLYPH_CYAN_RED  = 10,\r\n  RIGHT_LEFT = 11,\r\n  ANAGLYPH_GREEN_MAG = 12,\r\n  BOTH_EYES_BLOCK_LR = 13,\r\n  BOTH_EYES_BLOCK_RL = 14,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAVideoDisplayUint {\r\n  PIXELS = 0,\r\n  CENTIMETERS = 1,\r\n  INCHES = 2,\r\n  DAR = 3,\r\n  UNKNOWN = 4\r\n}\r\n\r\nexport const enum MATROSKAColourChromaSitingHorz {\r\n  UNDETERMINED = 0,\r\n  LEFT = 1,\r\n  HALF = 2,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAColourChromaSitingVert {\r\n  UNDETERMINED = 0,\r\n  TOP = 1,\r\n  HALF = 2,\r\n  NB\r\n}\r\n\r\nexport const enum MATROSKAVideoProjectionType {\r\n  RECTANGULAR = 0,\r\n  EQUIRECTANGULAR = 1,\r\n  CUBE_MAP = 2,\r\n  MESH = 3\r\n}\r\n\r\nexport const enum MATROSKALacingMode {\r\n  NO_LACING = 0,\r\n  XIPH = 1,\r\n  FIXED_SIZE = 2,\r\n  EBML = 3\r\n}\r\n\r\nexport const enum MATROSKABlockAddIdType {\r\n  DEFAULT = 0,\r\n  OPAQUE = 1,\r\n  ITU_T_T35 = 4,\r\n  DVCC = 0x64766343,\r\n  DVVC = 0x64767643\r\n}\r\n\r\nexport const enum MATROSKATrackEncodingComp {\r\n  MATROSKA_TRACK_ENCODING_COMP_ZLIB        = 0,\r\n  MATROSKA_TRACK_ENCODING_COMP_BZLIB       = 1,\r\n  MATROSKA_TRACK_ENCODING_COMP_LZO         = 2,\r\n  MATROSKA_TRACK_ENCODING_COMP_HEADERSTRIP = 3\r\n}\r\n\r\nexport const MkvTag2CodecId: Record<string, AVCodecID> = {\r\n  'A_AAC': AVCodecID.AV_CODEC_ID_AAC,\r\n  'A_AC3': AVCodecID.AV_CODEC_ID_AC3,\r\n  'A_ALAC': AVCodecID.AV_CODEC_ID_ALAC,\r\n  'A_DTS': AVCodecID.AV_CODEC_ID_DTS,\r\n  'A_EAC3': AVCodecID.AV_CODEC_ID_EAC3,\r\n  'A_FLAC': AVCodecID.AV_CODEC_ID_FLAC,\r\n  'A_MLP': AVCodecID.AV_CODEC_ID_MLP,\r\n  'A_MPEG/L2': AVCodecID.AV_CODEC_ID_MP2,\r\n  'A_MPEG/L1': AVCodecID.AV_CODEC_ID_MP1,\r\n  'A_MPEG/L3': AVCodecID.AV_CODEC_ID_MP3,\r\n  'A_OPUS': AVCodecID.AV_CODEC_ID_OPUS,\r\n  'A_OPUS/EXPERIMENTAL': AVCodecID.AV_CODEC_ID_OPUS,\r\n  'A_PCM/FLOAT/IEEE': AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  'A_PCM/INT/BIG': AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n  'A_PCM/INT/LIT': AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  'A_QUICKTIME/QDMC': AVCodecID.AV_CODEC_ID_QDMC,\r\n  'A_QUICKTIME/QDM2': AVCodecID.AV_CODEC_ID_QDM2,\r\n  'A_REAL/14_4': AVCodecID.AV_CODEC_ID_RA_144,\r\n  'A_REAL/28_8': AVCodecID.AV_CODEC_ID_RA_288,\r\n  'A_REAL/ATRC': AVCodecID.AV_CODEC_ID_ATRAC3,\r\n  'A_REAL/COOK': AVCodecID.AV_CODEC_ID_COOK,\r\n  'A_REAL/SIPR': AVCodecID.AV_CODEC_ID_SIPR,\r\n  'A_TRUEHD': AVCodecID.AV_CODEC_ID_TRUEHD,\r\n  'A_TTA1': AVCodecID.AV_CODEC_ID_TTA,\r\n  'A_VORBIS': AVCodecID.AV_CODEC_ID_VORBIS,\r\n  'A_WAVPACK4': AVCodecID.AV_CODEC_ID_WAVPACK,\r\n\r\n  'D_WEBVTT/SUBTITLES': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/CAPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/DESCRIPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/METADATA': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n\r\n  'S_TEXT/UTF8': AVCodecID.AV_CODEC_ID_SUBRIP,\r\n  'S_TEXT/ASCII': AVCodecID.AV_CODEC_ID_TEXT,\r\n  'S_TEXT/ASS': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_TEXT/SSA': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_ASS': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_SSA': AVCodecID.AV_CODEC_ID_ASS,\r\n  'S_VOBSUB': AVCodecID.AV_CODEC_ID_DVD_SUBTITLE,\r\n  'S_DVBSUB': AVCodecID.AV_CODEC_ID_DVB_SUBTITLE,\r\n  'S_HDMV/PGS': AVCodecID.AV_CODEC_ID_HDMV_PGS_SUBTITLE,\r\n  'S_HDMV/TEXTST': AVCodecID.AV_CODEC_ID_HDMV_TEXT_SUBTITLE,\r\n\r\n  'V_AV1': AVCodecID.AV_CODEC_ID_AV1,\r\n  'V_DIRAC': AVCodecID.AV_CODEC_ID_DIRAC,\r\n  'V_FFV1': AVCodecID.AV_CODEC_ID_FFV1,\r\n  'V_MJPEG': AVCodecID.AV_CODEC_ID_MJPEG,\r\n  'V_MPEG1': AVCodecID.AV_CODEC_ID_MPEG1VIDEO,\r\n  'V_MPEG2': AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  'V_MPEG4/ISO/ASP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/AP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/SP': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'V_MPEG4/ISO/AVC': AVCodecID.AV_CODEC_ID_H264,\r\n  'V_MPEGH/ISO/HEVC': AVCodecID.AV_CODEC_ID_HEVC,\r\n  'V_MPEGH/ISO/VVC': AVCodecID.AV_CODEC_ID_VVC,\r\n  'V_MPEG4/MS/V3': AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  'V_PRORES': AVCodecID.AV_CODEC_ID_PRORES,\r\n  'V_REAL/RV10': AVCodecID.AV_CODEC_ID_RV10,\r\n  'V_REAL/RV20': AVCodecID.AV_CODEC_ID_RV20,\r\n  'V_REAL/RV30': AVCodecID.AV_CODEC_ID_RV30,\r\n  'V_REAL/RV40': AVCodecID.AV_CODEC_ID_RV40,\r\n  'V_SNOW': AVCodecID.AV_CODEC_ID_SNOW,\r\n  'V_THEORA': AVCodecID.AV_CODEC_ID_THEORA,\r\n  'V_UNCOMPRESSED': AVCodecID.AV_CODEC_ID_RAWVIDEO,\r\n  'V_VP8': AVCodecID.AV_CODEC_ID_VP8,\r\n  'V_VP9': AVCodecID.AV_CODEC_ID_VP9\r\n}\r\n\r\nexport const WebmTag2CodecId: Record<string, AVCodecID> = {\r\n  'V_VP8': AVCodecID.AV_CODEC_ID_VP8,\r\n  'V_VP9': AVCodecID.AV_CODEC_ID_VP9,\r\n  'V_AV1': AVCodecID.AV_CODEC_ID_AV1,\r\n\r\n  'A_VORBIS': AVCodecID.AV_CODEC_ID_VORBIS,\r\n  'A_OPUS': AVCodecID.AV_CODEC_ID_OPUS,\r\n\r\n  'D_WEBVTT/SUBTITLES': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/CAPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/DESCRIPTIONS': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n  'D_WEBVTT/METADATA': AVCodecID.AV_CODEC_ID_WEBVTT,\r\n}\r\n","import mktagle from 'avformat/function/mktagle'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const WavTag2CodecId = {\r\n  0x0001: AVCodecID.AV_CODEC_ID_PCM_U8,\r\n  0x0002: AVCodecID.AV_CODEC_ID_ADPCM_MS,\r\n  0x0003: AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  0x0006: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  0x0007: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  0x000A: AVCodecID.AV_CODEC_ID_WMAVOICE,\r\n  0x0010: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0011: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0017: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0020: AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA,\r\n  0x0022: AVCodecID.AV_CODEC_ID_TRUESPEECH,\r\n  0x0031: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0032: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0038: AVCodecID.AV_CODEC_ID_AMR_NB,\r\n  0x0042: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0x0045: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0014: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0040: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0061: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK4,\r\n  0x0062: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK3,\r\n  0x0064: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0069: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0075: AVCodecID.AV_CODEC_ID_METASOUND,\r\n  0x0083: AVCodecID.AV_CODEC_ID_G729,\r\n  0x00ff: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x0111: AVCodecID.AV_CODEC_ID_G723_1,\r\n\r\n  // ADTS AAC\r\n  0x1600: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x1602: AVCodecID.AV_CODEC_ID_AAC_LATM,\r\n  0x2000: AVCodecID.AV_CODEC_ID_AC3\r\n}\r\n\r\nexport const codecBmpTags: Record<int32, AVCodecID> = {\r\n  [mktagle('H264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('h264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('X264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('x264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('DAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('SMV2')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('VSSH')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('Q264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('V264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('GAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('UMSV')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('tshd')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('INMC')]: AVCodecID.AV_CODEC_ID_H264,\r\n\r\n  [mktagle('FMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DX50')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVID')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MP4S')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4S2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [0x04 as int32]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ZMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('BLZ0')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('mp4v')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('UMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WV1F')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SEDG')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('RMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('3IV2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WAWV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FFDS')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FVFW')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DCOD')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MVXM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DXGM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VIDM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4T3')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('G264')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('HDX4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DMK2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DYM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIGI')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EPHV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EM4A')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4CC')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SN40')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VSPX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ULDX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SIPP')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVIX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DreX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('QMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PLV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GLV4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MNM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GTM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  [mktagle('MPG4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP42')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('DIV2')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('MP43')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('MPG3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV5')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV6')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DVX3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('AP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL1')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL0')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n\r\n  [mktagle('VP80')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktagle('VP90')]: AVCodecID.AV_CODEC_ID_VP9\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in litten end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktagLe(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 3; i >= 0; i--) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia av1 syntax util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\n\r\nexport function f(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function uvlc(bitReader: BitReader) {\r\n  let leadingZeros = 0\r\n  while (true) {\r\n    let done = f(bitReader, 1)\r\n    if (done) {\r\n      break\r\n    }\r\n    leadingZeros++\r\n  }\r\n  if (leadingZeros >= 32) {\r\n    return (1 << 32) - 1\r\n  }\r\n  const value =\tf(bitReader, leadingZeros)\r\n  return value + (1 << leadingZeros) - 1\r\n}\r\n\r\nexport function le(bitReader: BitReader, n: number) {\r\n  let t = 0\r\n  for (let i = 0; i < n; i++) {\r\n    let byte = f(bitReader, 8)\r\n    t += (byte << (i * 8))\r\n  }\r\n  return t\r\n}\r\n\r\nexport function leb128(bitReader: BitReader) {\r\n  let value = 0\r\n  let Leb128Bytes = 0\r\n  for (let i = 0; i < 8; i++ ) {\r\n    let leb128Byte_ = f(bitReader, 8)\r\n    value |= ((leb128Byte_ & 0x7f) << (i * 7))\r\n    Leb128Bytes += 1\r\n    if (!(leb128Byte_ & 0x80)) {\r\n      break\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\nexport function su(bitReader: BitReader, n: number) {\r\n  let value = f(bitReader, n)\r\n  let signMask = 1 << (n - 1)\r\n  if (value & signMask) {\r\n    value = value - 2 * signMask\r\n  }\r\n  return value\r\n}\r\n\r\nexport function ns(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tf(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit =\tf(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n\r\nexport function L(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0 ; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function NS(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tL(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit = L(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n","/*\r\n * libmedia expgolomb util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\nimport BitWriter from 'common/io/BitWriter'\r\n\r\nconst UESizeTable = [\r\n  // 0 的二进制所需的比特个数\r\n  1,\r\n  // 1 的二进制所需的比特个数    \r\n  1,\r\n  // 2~3 的二进制所需的比特个数   \r\n  2, 2,\r\n  // 4~7 的二进制所需的比特个数\r\n  3, 3, 3, 3,\r\n  // 8~15 的二进制所需的比特个数\r\n  4, 4, 4, 4, 4, 4, 4, 4,\r\n  // 16~31 的二进制所需的比特个数\r\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\r\n  // 32~63 的二进制所需的比特个数\r\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\r\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\r\n  // 64~127 的二进制所需的比特个数\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n  // 128~255 的二进制所需的比特个数\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\r\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\r\n]\r\n\r\n/**\r\n * ue(v) 指数哥伦布解码\r\n */\r\nexport function readUE(bitReader: BitReader) {\r\n  let result = 0\r\n  // leadingZeroBits\r\n  let i = 0\r\n\r\n  while (i < 32 && bitReader.readU1() === 0) {\r\n    i++\r\n  }\r\n  // 计算 read_bits ( leadingZeroBits )\r\n  result = bitReader.readU(i)\r\n  // 计算 codeNum，1 << i 即为 2 的 i 次幂\r\n  result += (1 << i) - 1\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * se(v) 有符号指数哥伦布解码\r\n */\r\nexport function readSE(bitReader: BitReader) {\r\n  let result = readUE(bitReader)\r\n\r\n  // 判断 result 的奇偶性\r\n  if (result & 0x01) {\r\n    // 如果为奇数，说明编码前 > 0\r\n    result = (result + 1) / 2\r\n  }\r\n  else {\r\n    // 如果为偶数，说明编码前 <= 0\r\n    result = -result / 2\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * te(v) 截断指数哥伦布解码\r\n */\r\nexport function readTE(bitReader: BitReader, x: number) {\r\n  let result = 0\r\n  // 判断取值上限\r\n  if (x === 1) {\r\n    // 如果为 1 则将读取到的比特值取反\r\n    result = 1 - bitReader.readU1()\r\n  }\r\n  else if (x > 1) {\r\n    // 否则按照 ue(v) 进行解码\r\n    result = readUE(bitReader)\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * ue(v) 指数哥伦布编码\r\n */\r\nexport function writeUE(bitWriter: BitWriter, value: number) {\r\n  let size = 0\r\n\r\n  if (value === 0) {\r\n    // 0 直接编码为 1\r\n    bitWriter.writeU1(1)\r\n  }\r\n  else {\r\n    let tmp = ++value\r\n    // 判断所需比特个数是否大于 16 位\r\n    if ( tmp >= 0x00010000 ) {\r\n      size += 16\r\n      tmp >>= 16\r\n    }\r\n\r\n    // 判断此时所需比特个数是否大于 8 位\r\n    if ( tmp >= 0x100 ) {\r\n      size += 8\r\n      tmp >>= 8\r\n    }\r\n    // 最终 tmp 移位至 8 位以内，去查表\r\n    size += UESizeTable[tmp]\r\n\r\n    // 最终得出编码 value 所需的总比特数：2 * size - 1\r\n    bitWriter.writeU(2 * size - 1, value)\r\n  }\r\n}\r\n\r\n/**\r\n * se(v) 有符号指数哥伦布编码\r\n */\r\nexport function writeSE(bitWriter: BitWriter, value: number) {\r\n  if (value <= 0) {\r\n    writeUE(bitWriter, -value * 2)\r\n  }\r\n  else {\r\n    writeUE(bitWriter, value * 2 - 1)\r\n  }\r\n}\r\n\r\n/**\r\n * te(v) 截断指数哥伦布编码\r\n */\r\nexport function writeTE(bitWriter: BitWriter, x: number, value: number) {\r\n  if (x === 1) {\r\n    bitWriter.writeU1(1 & ~value)\r\n  }\r\n  else if (x > 1) {\r\n    writeUE(bitWriter, value)\r\n  }\r\n}\r\n","/*\r\n * libmedia int read util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport function r8(p: pointer<void>): uint8 {\r\n  return accessof(reinterpret_cast<pointer<uint8>>(p))\r\n}\r\n\r\nexport function rl16(p: pointer<void>): uint16 {\r\n  return (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) | r8(p)\r\n}\r\n\r\nexport function rb16(p: pointer<void>): uint16 {\r\n  return (r8(p) << 8) | r8(reinterpret_cast<pointer<uint8>>(p + 1))\r\n}\r\n\r\nexport function rl24(p: pointer<void>): int32 {\r\n  return (r8(reinterpret_cast<pointer<uint8>>(p + 2)) << 16) | (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) + r8(p)\r\n}\r\n\r\nexport function rb24(p: pointer<void>): int32 {\r\n  return (r8(p) << 16) | (r8(reinterpret_cast<pointer<uint8>>(p + 1)) << 8) | r8(reinterpret_cast<pointer<uint8>>(p + 2))\r\n}\r\n\r\nexport function rl32(p: pointer<void>): int32 {\r\n  return (rl16(reinterpret_cast<pointer<uint8>>(p + 2)) << 16) | rl16(p)\r\n}\r\n\r\nexport function rb32(p: pointer<void>): int32 {\r\n  return (rb16(p) << 16) | rb16(reinterpret_cast<pointer<uint8>>(p + 2))\r\n}\r\n\r\nexport function rl64(p: pointer<void>): int64 {\r\n  return (BigInt(rl32(reinterpret_cast<pointer<uint8>>(p + 4))) << 32n) | BigInt(rl32(p))\r\n}\r\n\r\nexport function rb64(p: pointer<void>): int64 {\r\n  return (BigInt(rb32(p)) << 32n) | BigInt(rb32(reinterpret_cast<pointer<uint8>>(p + 4)))\r\n}\r\n","\r\n/*\r\n * libmedia int write util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport function w8(p: pointer<void>, value: number) {\r\n  accessof(reinterpret_cast<pointer<uint8>>(p)) <- reinterpret_cast<uint8>(value & 0xff)\r\n}\r\n\r\nexport function wl16(p: pointer<void>, value: uint16) {\r\n  w8(p, value)\r\n  w8(p + 1, value >>> 8)\r\n}\r\n\r\nexport function wb16(p: pointer<void>, value: uint16) {\r\n  w8(p, value >>> 8)\r\n  w8(p + 1, value)\r\n}\r\n\r\nexport function wl24(p: pointer<void>, value: uint32) {\r\n  w8(p, value)\r\n  w8(p + 1, value >>> 8)\r\n  w8(p + 2, value >>> 16)\r\n}\r\n\r\nexport function wb24(p: pointer<void>, value: uint32) {\r\n  w8(p, value >>> 16)\r\n  w8(p + 1, value >>> 8)\r\n  w8(p + 2, value)\r\n}\r\n\r\nexport function wl32(p: pointer<void>, value: uint32) {\r\n  wl16(p, value & 0xffff)\r\n  wl16(p + 2, value >>> 16)\r\n}\r\n\r\nexport function wb32(p: pointer<void>, value: uint32) {\r\n  wb16(p, value >>> 16)\r\n  wb16(p + 2, value & 0xffff)\r\n}\r\n\r\nexport function wl64(p: pointer<void>, value: uint64) {\r\n  wl32(p, static_cast<uint32>(value))\r\n  wl32(p + 4, static_cast<uint32>(value >> 32n))\r\n}\r\n\r\nexport function wb64(p: pointer<void>, value: uint64) {\r\n  wb32(p, static_cast<uint32>(value >> 32n))\r\n  wb32(p + 4, static_cast<uint32>(value))\r\n}\r\n","/*\r\n * libmedia nalu util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport * as array from 'common/util/array'\r\n\r\nexport function isAnnexb(data: Uint8ArrayInterface) {\r\n  return data.length > 4\r\n  && data[0] === 0\r\n  && data[1] === 0\r\n  && (\r\n    data[2] === 1\r\n    || data[2] === 0 && data[3] === 1\r\n  )\r\n}\r\n\r\nexport function getNextNaluStart(data: Uint8ArrayInterface, offset: number) {\r\n  let t = 0\r\n  for (let i = offset; i < data.length; i++) {\r\n    switch (data[i]) {\r\n      case 0:\r\n        t++\r\n        break\r\n      case 1:\r\n        if (t >= 2) {\r\n          return {\r\n            offset: i - Math.min(t, 3),\r\n            startCode: Math.min(t + 1, 4)\r\n          }\r\n        }\r\n        t = 0\r\n        break\r\n      default:\r\n        t = 0\r\n    }\r\n  }\r\n  return {\r\n    offset: -1,\r\n    startCode: 0\r\n  }\r\n}\r\n\r\nexport function splitNaluByStartCode<T extends Uint8ArrayInterface>(buffer: T): T[] {\r\n  const list = []\r\n  let offset = 0\r\n  let current = getNextNaluStart(buffer, offset)\r\n  let next = {\r\n    offset: -1,\r\n    startCode: 0\r\n  }\r\n  while (next = getNextNaluStart(buffer, current.offset + current.startCode), next.offset > -1) {\r\n    list.push(buffer.subarray(current.offset + current.startCode, next.offset, true))\r\n    current = next\r\n  }\r\n  list.push(buffer.subarray(current.offset + current.startCode, undefined, true))\r\n\r\n  return list\r\n}\r\n\r\nexport function splitNaluByLength<T extends Uint8ArrayInterface>(buffer: T, naluLengthSizeMinusOne: int32): T[] {\r\n  const list = []\r\n  const bufferReader = new BufferReader(buffer)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    const nalu = buffer.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length, true)\r\n    bufferReader.skip(length)\r\n    list.push(nalu)\r\n  }\r\n  return list\r\n}\r\n\r\nexport function joinNaluByStartCode(nalus: Uint8ArrayInterface[], output?: Uint8Array, slice: boolean = false): Uint8Array {\r\n  if (!output) {\r\n    let length = nalus.reduce((prev, nalu, index) => {\r\n      return prev + ((index && slice) ? 3 : 4) + nalu.length\r\n    }, 0)\r\n    output = new Uint8Array(length)\r\n  }\r\n\r\n  const bufferWriter = new BufferWriter(output)\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index && slice) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n  })\r\n\r\n  return output\r\n}\r\n\r\nexport function joinNaluByLength(nalus: Uint8Array[], naluLengthSizeMinusOne: int32, output?: Uint8Array): Uint8Array {\r\n  if (!output) {\r\n    const length = nalus.reduce((prev, nalu) => {\r\n      return prev + naluLengthSizeMinusOne + 1 + nalu.length\r\n    }, 0)\r\n    output = new Uint8Array(length)\r\n  }\r\n  const bufferWriter = new BufferWriter(output)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu)\r\n  })\r\n  return output\r\n}\r\n\r\nexport function naluUnescape(data: Uint8Array, start = 0, end?: number) {\r\n\r\n  if (!end) {\r\n    end = data.length\r\n  }\r\n\r\n  const buffer = new Uint8Array(data.length)\r\n\r\n  let zeroCount = 0\r\n  let pos = 0\r\n  for (let i = 0; i < data.length; i++) {\r\n    if (i >= start && i < end) {\r\n      if (data[i] === 0) {\r\n        zeroCount++\r\n      }\r\n      else {\r\n        if (data[i] === 3 && zeroCount === 2 && i + 1 < data.length && data[i + 1] <= 3) {\r\n          i++\r\n          if (i === data.length) {\r\n            break\r\n          }\r\n          else {\r\n            if (data[i] === 0) {\r\n              zeroCount = 1\r\n            }\r\n            else {\r\n              zeroCount = 0\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          zeroCount = 0\r\n        }\r\n      }\r\n    }\r\n    buffer[pos++] = data[i]\r\n  }\r\n\r\n  return buffer.slice(0, pos)\r\n}\r\n\r\nexport function naluEscape(data: Uint8Array, start: number = 0, end?: number) {\r\n  if (!end) {\r\n    end = data.length\r\n  }\r\n\r\n  const indexes = []\r\n  let zeroCount = 0\r\n  for (let i = start; i < end; i++) {\r\n\r\n    if (i >= end) {\r\n      break\r\n    }\r\n\r\n    if (data[i] === 0) {\r\n      zeroCount++\r\n    }\r\n    else {\r\n      if (data[i] <= 3 && zeroCount === 2) {\r\n        indexes.push(i)\r\n      }\r\n      zeroCount = 0\r\n    }\r\n  }\r\n\r\n  if (indexes.length) {\r\n    const buffer = new Uint8Array(data.length + indexes.length)\r\n    let pos = 0\r\n    let subData = data.subarray(0, indexes[0])\r\n    buffer.set(subData, pos)\r\n    pos += subData.length\r\n\r\n    buffer[pos++] = 3\r\n\r\n    for (let i = 1; i < indexes.length; i++) {\r\n      subData = data.subarray(indexes[i - 1], indexes[i])\r\n      buffer.set(subData, pos)\r\n      pos += subData.length\r\n      buffer[pos++] = 3\r\n    }\r\n\r\n    subData = data.subarray(indexes[indexes.length - 1], data.length)\r\n    buffer.set(subData, pos)\r\n    pos += subData.length\r\n\r\n    return buffer\r\n  }\r\n  else {\r\n    return data\r\n  }\r\n}\r\n","/**\r\n * bit 读取器\r\n */\r\n\r\nimport { IOError } from './error'\r\nimport * as logger from '../util/logger'\r\nimport { Uint8ArrayInterface } from './interface'\r\n\r\nexport default class BitReader {\r\n\r\n  private buffer: Uint8Array\r\n\r\n  private pointer: number\r\n\r\n  private bitsLeft: number\r\n\r\n  private size: number\r\n\r\n  private endPointer: number\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array) => number\r\n\r\n  /**\r\n   * @param data 待读取的字节\r\n   * @param bigEndian 是否按大端字节序读取，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024) {\r\n    this.pointer = 0\r\n    this.bitsLeft = 8\r\n\r\n    this.size = size\r\n    this.endPointer = 0\r\n    this.error = 0\r\n\r\n    this.buffer = new Uint8Array(this.size)\r\n  }\r\n\r\n  /**\r\n   * 不影响原读取操作的情况下，读取 1 个比特\r\n   */\r\n  public peekU1() {\r\n    let result = 0\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitsLeft === 0) {\r\n      this.flush()\r\n    }\r\n\r\n    let pointer = this.pointer\r\n    let bitsLeft = this.bitsLeft\r\n\r\n    if (bitsLeft === 0) {\r\n      pointer++\r\n      bitsLeft = 8\r\n    }\r\n\r\n    result = (this.buffer[pointer] >> (bitsLeft - 1)) & 0x01\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 读取 1 个比特\r\n   */\r\n  public readU1() {\r\n    let result = 0\r\n\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitsLeft === 0) {\r\n      this.flush()\r\n    }\r\n\r\n    this.bitsLeft--\r\n\r\n    result = (this.buffer[this.pointer] >> this.bitsLeft) & 0x01\r\n\r\n    if (this.bitsLeft === 0) {\r\n      this.pointer++\r\n      this.bitsLeft = 8\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 读取 n 个比特\r\n   * \r\n   * @param n\r\n   */\r\n  public readU(n: number) {\r\n    let result = 0\r\n    for (let i = 0; i < n; i++) {\r\n      result |= (this.readU1() << (n - i - 1))\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可读字节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.endPointer - this.pointer\r\n  }\r\n\r\n  public getPos() {\r\n    return this.pointer\r\n  }\r\n\r\n  public skip(n: number) {\r\n    const byte = (n - (n % 8)) / 8\r\n\r\n    this.pointer += byte\r\n\r\n    const bitsLeft = n % 8\r\n\r\n    if (this.bitsLeft <= bitsLeft) {\r\n      this.pointer++\r\n      this.bitsLeft = 8 - (bitsLeft - this.bitsLeft)\r\n    }\r\n    else {\r\n      this.bitsLeft -= bitsLeft\r\n    }\r\n  }\r\n\r\n  public flush() {\r\n\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOReader error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.bitsLeft === 0) {\r\n      this.pointer++\r\n    }\r\n\r\n    if (this.size - this.remainingLength() <= 0) {\r\n      return\r\n    }\r\n\r\n    if (this.pointer < this.endPointer) {\r\n      this.buffer.set(this.buffer.subarray(this.pointer, this.endPointer), 0)\r\n\r\n      const len = this.onFlush(this.buffer.subarray(this.endPointer - this.pointer, this.size))\r\n\r\n      if (len < 0) {\r\n        this.error = len\r\n        throw Error('IOReader error, flush failed')\r\n      }\r\n\r\n      this.endPointer = this.endPointer - this.pointer + len\r\n      this.pointer = 0\r\n    }\r\n    else {\r\n      const len = this.onFlush(this.buffer)\r\n\r\n      this.endPointer = len\r\n      this.pointer = 0\r\n      this.bitsLeft = 8\r\n\r\n      if (len < 0) {\r\n        this.error = len\r\n        throw Error('IOReader error, flush failed')\r\n      }\r\n    }\r\n  }\r\n\r\n  public getBuffer() {\r\n    return this.buffer\r\n  }\r\n\r\n  public appendBuffer(buffer: Uint8ArrayInterface) {\r\n    if (this.size - this.endPointer >= buffer.length) {\r\n      this.buffer.set(buffer, this.endPointer)\r\n      this.endPointer += buffer.length\r\n    }\r\n    else {\r\n      this.buffer.set(this.buffer.subarray(this.pointer, this.endPointer), 0)\r\n      this.endPointer = this.endPointer - this.pointer\r\n      this.pointer = 0\r\n\r\n      if (this.size - this.endPointer >= buffer.length) {\r\n        this.buffer.set(buffer, this.endPointer)\r\n        this.endPointer += buffer.length\r\n      }\r\n      else {\r\n        const len = Math.min(this.size - this.endPointer, buffer.length)\r\n        this.buffer.set(buffer.subarray(0, len), this.endPointer)\r\n        this.endPointer += len\r\n\r\n        logger.warn('BSReader, call appendBuffer but the buffer\\'s size is lagger then the remaining size')\r\n      }\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    this.pointer = this.endPointer = 0\r\n    this.bitsLeft = 8\r\n    this.error = 0\r\n  }\r\n\r\n  public skipPadding() {\r\n    if (this.bitsLeft < 8) {\r\n      this.bitsLeft = 8\r\n      this.pointer++\r\n    }\r\n  }\r\n}\r\n","/**\r\n * bit 写存器\r\n */\r\n\r\nimport { IOError } from './error'\r\n\r\n/**\r\n * 写字节流工具\r\n */\r\n\r\nexport default class BitWriter {\r\n\r\n  private buffer: Uint8Array\r\n\r\n  private pointer: number\r\n\r\n  private bitPointer: number\r\n\r\n  private size: number\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array, pos?: number) => number\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024) {\r\n    this.pointer = 0\r\n    this.bitPointer = 0\r\n    this.size = size\r\n    this.error = 0\r\n\r\n    this.buffer = new Uint8Array(this.size)\r\n  }\r\n\r\n  /**\r\n   * 写一个 bit\r\n   * \r\n   * @param bit \r\n   */\r\n  public writeU1(bit: number) {\r\n    if (this.remainingLength() < 1 || this.remainingLength() === 1 && this.bitPointer >= 8) {\r\n      this.flush()\r\n    }\r\n\r\n    if (bit & 0x01) {\r\n      this.buffer[this.pointer] |= (1 << (7 - this.bitPointer))\r\n    }\r\n    else {\r\n      this.buffer[this.pointer] &= ~(1 << (7 - this.bitPointer))\r\n    }\r\n\r\n\r\n    this.bitPointer++\r\n\r\n    if (this.bitPointer === 8) {\r\n      this.pointer++\r\n      this.bitPointer = 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 n 个比特\r\n   * \r\n   * @param n\r\n   */\r\n  public writeU(n: number, v: number) {\r\n    for (let i = 0; i < n; i++) {\r\n      this.writeU1(v >> (n - i - 1 ) & 0x01)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.size - this.pointer\r\n  }\r\n\r\n  public flush() {\r\n\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('BSWriter error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.pointer) {\r\n      if (this.bitPointer && this.pointer > 1) {\r\n        const ret = this.onFlush(this.buffer.subarray(0, this.pointer - 1))\r\n        if (ret !== 0) {\r\n          this.error = ret\r\n          throw Error('BSWriter error, flush failed')\r\n        }\r\n        this.buffer[0] = this.buffer[this.pointer]\r\n      }\r\n      else if (this.bitPointer === 0) {\r\n        const ret = this.onFlush(this.buffer.subarray(0, this.pointer))\r\n        if (ret !== 0) {\r\n          this.error = ret\r\n          throw Error('BSWriter error, flush failed')\r\n        }\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  public padding() {\r\n    while (this.bitPointer !== 0) {\r\n      this.writeU1(0)\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    this.pointer = 0\r\n    this.bitPointer = 0\r\n    this.error = 0\r\n  }\r\n\r\n  public getBuffer() {\r\n    return this.buffer\r\n  }\r\n\r\n  public getPointer() {\r\n    return this.pointer\r\n  }\r\n}\r\n","/**\r\n * 写字节流工具\r\n */\r\n\r\nimport * as logger from '../util/logger'\r\nimport { Uint8ArrayInterface, BytesWriterSync } from './interface'\r\nimport * as text from '../util/text'\r\n\r\nexport default class BufferWriter implements BytesWriterSync {\r\n\r\n  private data: DataView\r\n\r\n  private buffer: Uint8ArrayInterface\r\n\r\n  private byteStart: number\r\n\r\n  private pos: number\r\n\r\n  private size: number\r\n\r\n  private littleEndian: boolean\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   * @param bigEndian 是否按大端字节序写，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(data: Uint8ArrayInterface, bigEndian: boolean = true) {\r\n    this.buffer = data\r\n    this.data = data instanceof Uint8Array ? new DataView(data.buffer) : data.view\r\n    this.byteStart = data instanceof Uint8Array ? data.byteOffset : 0\r\n    this.pos = 0\r\n    this.size = data.byteLength\r\n    this.littleEndian = !bigEndian\r\n  }\r\n\r\n  /**\r\n   * 写 8 位无符号整数\r\n   */\r\n  public writeUint8(value: number) {\r\n    this.data.setUint8(this.pos++ + this.byteStart, value)\r\n  }\r\n\r\n  /**\r\n   * 读取 16 位无符号整数\r\n   */\r\n  public writeUint16(value: number) {\r\n    this.data.setUint16(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 2\r\n  }\r\n\r\n  /**\r\n   * 写 24 位无符号整数\r\n   */\r\n  public writeUint24(value: number) {\r\n    const high = value & 0xf00\r\n    const middle = value & 0x0f0\r\n    const low = value & 0x00f\r\n    if (this.littleEndian) {\r\n      this.writeUint8(low)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(high)\r\n    }\r\n    else {\r\n      this.writeUint8(high)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(low)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 32 位无符号整数\r\n   */\r\n  public writeUint32(value: number) {\r\n    this.data.setUint32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写 64 位无符号整数\r\n   */\r\n  public writeUint64(value: bigint) {\r\n    const low = value & 0xffffffffn\r\n    const high = (value & (0xffffffffn << 32n)) >> 32n\r\n    if (this.littleEndian) {\r\n      this.writeUint32(Number(low))\r\n      this.writeUint32(Number(high))\r\n    }\r\n    else {\r\n      this.writeUint32(Number(high))\r\n      this.writeUint32(Number(low))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 8 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeInt8(value: number) {\r\n    this.data.setInt8(this.pos++ + this.byteStart, value)\r\n  }\r\n\r\n  /**\r\n   * 写 16 位有符号整数\r\n   */\r\n  public writeInt16(value: number) {\r\n    this.data.setInt16(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 2\r\n  }\r\n\r\n  /**\r\n   * 写 32 位有符号整数\r\n   */\r\n  public writeInt32(value: number) {\r\n    this.data.setInt32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写 64 位有符号整数\r\n   */\r\n  public writeInt64(value: bigint) {\r\n    const low = value & BigInt(0xffffffff)\r\n    const high = (value & (BigInt(0xffffffff) << 32n)) >> 32n\r\n    if (this.littleEndian) {\r\n      this.writeInt32(Number(low))\r\n      this.writeInt32(Number(high))\r\n    }\r\n    else {\r\n      this.writeInt32(Number(high))\r\n      this.writeInt32(Number(low))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写单精度浮点数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeFloat(value: number) {\r\n    this.data.setFloat32(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 4\r\n  }\r\n\r\n  /**\r\n   * 写双精度浮点数\r\n   */\r\n  public writeDouble(value: number) {\r\n    this.data.setFloat64(this.pos + this.byteStart, value, this.littleEndian)\r\n    this.pos += 8\r\n  }\r\n\r\n  /**\r\n   * 获取当前写指针\r\n   * \r\n   * @returns \r\n   */\r\n  public getPos() {\r\n    return this.pos\r\n  }\r\n\r\n  /**\r\n   * seek 写指针\r\n   * \r\n   * @param pos \r\n   */\r\n  public seek(pos: number) {\r\n    if (pos > this.size) {\r\n      pos = this.size\r\n    }\r\n    this.pos = Math.max(0, pos)\r\n  }\r\n\r\n  /**\r\n   * 跳过指定字节长度\r\n   * \r\n   * @param length \r\n   */\r\n  public skip(length: number) {\r\n    this.seek(this.pos + length)\r\n  }\r\n\r\n  /**\r\n   * 返回指定字节长度\r\n   * \r\n   * @param length \r\n   */\r\n  public back(length: number) {\r\n    this.seek(this.pos - length)\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingSize() {\r\n    return this.size - this.pos\r\n  }\r\n\r\n  /**\r\n   * 写指定长度的二进制 buffer 数据\r\n   * \r\n   * @param length \r\n   * @returns \r\n   */\r\n  public writeBuffer(buffer: Uint8ArrayInterface) {\r\n    let length = buffer.length\r\n    if (this.remainingSize() < length) {\r\n      length = this.remainingSize()\r\n      logger.warn(`the remaining buffer size is smaller then the wrote buffer, hope set ${buffer.length}, but set ${length}`)\r\n    }\r\n    this.buffer.set(buffer, this.pos)\r\n    this.pos += buffer.length\r\n  }\r\n\r\n  /**\r\n   * 写一个字符串\r\n   */\r\n  public writeString(str: string) {\r\n    const buffer = text.encode(str)\r\n    this.writeBuffer(buffer)\r\n    return buffer.length\r\n  }\r\n\r\n  public getWroteBuffer() {\r\n    return this.buffer.subarray(0, this.pos)\r\n  }\r\n\r\n  public resetBuffer(data: Uint8ArrayInterface, bigEndian: boolean = true) {\r\n    this.buffer = data\r\n    this.data = data instanceof Uint8Array ? new DataView(data.buffer) : data.view\r\n    this.byteStart = data instanceof Uint8Array ? data.byteOffset : 0\r\n\r\n    this.pos = 0\r\n    this.size = data.byteLength\r\n    this.littleEndian = !bigEndian\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}