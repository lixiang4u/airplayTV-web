{"version":3,"file":"src_avformat_formats_OFlvFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/bsf/AVBSFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/h2645/Annexb2AvccFilter.ts","webpack://AVTranscoder/./src/avformat/codecs/vvc.ts","webpack://AVTranscoder/./src/avformat/formats/OFlvFormat.ts","webpack://AVTranscoder/./src/avformat/formats/flv/FlvHeader.ts","webpack://AVTranscoder/./src/avformat/formats/flv/FlvScriptTag.ts","webpack://AVTranscoder/./src/avformat/formats/flv/codecs/aac.ts","webpack://AVTranscoder/./src/avformat/formats/flv/codecs/enhanced.ts","webpack://AVTranscoder/./src/avformat/formats/flv/codecs/h264.ts","webpack://AVTranscoder/./src/avformat/formats/flv/flv.ts","webpack://AVTranscoder/./src/avformat/formats/flv/oflv.ts"],"sourcesContent":["/*\r\n * libmedia AVBSFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avMallocz } from 'avutil/util/mem'\r\nimport { copyCodecParameters, freeCodecParameters } from 'avutil/util/codecparameters'\r\n\r\nexport default abstract class AVBSFilter {\r\n\r\n  inCodecpar: pointer<AVCodecParameters>\r\n  inTimeBase: Rational\r\n\r\n  outCodecpar: pointer<AVCodecParameters>\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    this.inCodecpar = avMallocz(sizeof(AVCodecParameters))\r\n    copyCodecParameters(this.inCodecpar, codecpar)\r\n\r\n    this.inTimeBase = {\r\n      den: timeBase.den,\r\n      num: timeBase.num\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy() {\r\n    if (this.inCodecpar) {\r\n      freeCodecParameters(this.inCodecpar)\r\n      this.inCodecpar = nullptr\r\n    }\r\n  }\r\n\r\n  public abstract sendAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract receiveAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract reset(): number\r\n}\r\n","/*\r\n * libmedia Annexb2AvccFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, addAVPacketSideData, copyAVPacketProps, createAVPacket,\r\n  destroyAVPacket, refAVPacket, unrefAVPacket\r\n} from 'avutil/util/avpacket'\r\n\r\nimport * as h264 from '../../codecs/h264'\r\nimport * as hevc from '../../codecs/hevc'\r\nimport * as vvc from '../../codecs/vvc'\r\nimport { mapSafeUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as errorType from 'avutil/error'\r\nimport { isAnnexb } from 'avutil/util/nalu'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default class Annexb2AvccFilter extends AVBSFilter {\r\n\r\n  private cache: pointer<AVPacket>\r\n  private cached: boolean\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n    this.cache = createAVPacket()\r\n    this.cached = false\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy(): void {\r\n    super.destroy()\r\n    destroyAVPacket(this.cache)\r\n    this.cache = nullptr\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n\r\n    const buffer = mapSafeUint8Array(avpacket.data, avpacket.size)\r\n\r\n    if (avpacket.bitFormat === h264.BitFormat.AVCC || !isAnnexb(buffer)) {\r\n      refAVPacket(this.cache, avpacket)\r\n    }\r\n    else {\r\n\r\n      copyAVPacketProps(this.cache, avpacket)\r\n\r\n      let convert: {\r\n        bufferPointer: pointer<uint8>,\r\n        length: size,\r\n        extradata: Uint8Array,\r\n        key: boolean\r\n      }\r\n\r\n      if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        convert = h264.annexb2Avcc(buffer)\r\n      }\r\n      else if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n        convert = hevc.annexb2Avcc(buffer)\r\n      }\r\n      else if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n        convert = vvc.annexb2Avcc(buffer)\r\n      }\r\n      else {\r\n        logger.fatal(`not support for codecId: ${this.inCodecpar.codecId}`)\r\n      }\r\n\r\n      this.cache.bitFormat = h264.BitFormat.AVCC\r\n\r\n      addAVPacketData(this.cache, convert.bufferPointer, convert.length)\r\n\r\n      if (convert.key) {\r\n        this.cache.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      }\r\n\r\n      if (convert.extradata) {\r\n        const extradata = avMalloc(convert.extradata.length)\r\n        memcpyFromUint8Array(extradata, convert.extradata.length, convert.extradata)\r\n        addAVPacketSideData(this.cache, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradata, convert.extradata.length)\r\n      }\r\n    }\r\n    this.cached = true\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.cached) {\r\n      unrefAVPacket(avpacket)\r\n      refAVPacket(avpacket, this.cache)\r\n      this.cached = false\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.DATA_INVALID\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia vvc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { naluUnescape, splitNaluByStartCode, isAnnexb } from 'avutil/util/nalu'\r\nimport { addAVPacketSideData, getAVPacketData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { Data } from 'common/types/type'\r\nimport { BitFormat } from './h264'\r\nimport * as intread from 'avutil/util/intread'\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum VVCNaluType {\r\n  kTRAIL_NUT      = 0,\r\n  kSTSA_NUT       = 1,\r\n  kRADL_NUT       = 2,\r\n  kRASL_NUT       = 3,\r\n  kRSV_VCL_4      = 4,\r\n  kRSV_VCL_5      = 5,\r\n  kRSV_VCL_6      = 6,\r\n  kIDR_W_RADL     = 7,\r\n  kIDR_N_LP       = 8,\r\n  kCRA_NUT        = 9,\r\n  kGDR_NUT        = 10,\r\n  kRSV_IRAP_11    = 11,\r\n  kOPI_NUT        = 12,\r\n  kDCI_NUT        = 13,\r\n  kVPS_NUT        = 14,\r\n  kSPS_NUT        = 15,\r\n  kPPS_NUT        = 16,\r\n  kPREFIX_APS_NUT = 17,\r\n  kSUFFIX_APS_NUT = 18,\r\n  kPH_NUT         = 19,\r\n  kAUD_NUT        = 20,\r\n  kEOS_NUT        = 21,\r\n  kEOB_NUT        = 22,\r\n  kPREFIX_SEI_NUT = 23,\r\n  kSUFFIX_SEI_NUT = 24,\r\n  kFD_NUT         = 25,\r\n  kRSV_NVCL_26    = 26,\r\n  kRSV_NVCL_27    = 27,\r\n  kUNSPEC_28      = 28,\r\n  kUNSPEC_29      = 29,\r\n  kUNSPEC_30      = 30,\r\n  kUNSPEC_31      = 31,\r\n}\r\n\r\nexport const enum VVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\nexport const enum VVCAPSType {\r\n  kALF     = 0,\r\n  kLMCS    = 1,\r\n  kSCALING = 2\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nfunction parsePTL(bitReader: BitReader) {\r\n  const olsIdx = bitReader.readU(9)\r\n  const numSublayers = bitReader.readU(3)\r\n  const constantFrameRate = bitReader.readU(2)\r\n  const chromaFormatIdc = bitReader.readU(2)\r\n  const bitDepthMinus8 = bitReader.readU(3)\r\n  bitReader.readU(5)\r\n\r\n  // VvcPTLRecord\r\n  bitReader.readU(2)\r\n  const num_bytes_constraint_info = bitReader.readU(6)\r\n  const generalProfileIdc = bitReader.readU(7)\r\n  const generalTierFlag = bitReader.readU(1)\r\n  const generalLevelIdc = bitReader.readU(8)\r\n  const ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n  const ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n  const generalConstraintInfo = []\r\n  const sublayerLevelIdc = []\r\n\r\n  if (num_bytes_constraint_info) {\r\n    for (let i = 0; i < num_bytes_constraint_info - 1; i++) {\r\n      generalConstraintInfo[i] = bitReader.readU(8)\r\n    }\r\n    generalConstraintInfo[num_bytes_constraint_info - 1] = bitReader.readU(6)\r\n  }\r\n  else {\r\n    bitReader.readU(6)\r\n  }\r\n  if (numSublayers > 1) {\r\n    let ptl_sublayer_present_mask = 0\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      const val = bitReader.readU(1)\r\n      ptl_sublayer_present_mask |= val << j\r\n    }\r\n    for (let j = numSublayers; j <= 8 && numSublayers > 1; ++j) {\r\n      bitReader.readU(1)\r\n    }\r\n\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      if (ptl_sublayer_present_mask & (1 << j)) {\r\n        sublayerLevelIdc[j] = bitReader.readU(8)\r\n      }\r\n    }\r\n  }\r\n  const ptl_num_sub_profiles = bitReader.readU(8)\r\n  const generalSubProfileIdc = []\r\n  if (ptl_num_sub_profiles) {\r\n    for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n      generalSubProfileIdc.push(bitReader.readU(8))\r\n    }\r\n  }\r\n\r\n  const maxPictureWidth = bitReader.readU(16)\r\n  const maxPictureHeight = bitReader.readU(16)\r\n  const avgFramerate = bitReader.readU(16)\r\n\r\n  return {\r\n    olsIdx,\r\n    numSublayers,\r\n    bitDepthMinus8,\r\n    chromaFormatIdc,\r\n    constantFrameRate,\r\n    generalProfileIdc,\r\n    generalTierFlag,\r\n    generalLevelIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    generalConstraintInfo,\r\n    sublayerLevelIdc,\r\n    generalSubProfileIdc,\r\n    maxPictureWidth,\r\n    maxPictureHeight,\r\n    avgFramerate\r\n  }\r\n}\r\n/* eslint-enable camelcase */\r\n\r\n/**\r\n * \r\n * vvcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 5   reserved (11111)\r\n * - 2   lengthSizeMinusOne\r\n * - 1   ptl_present_flag\r\n * if ptl_present_flag\r\n *   - 9   ols_idx\r\n *   - 3  num_sublayers\r\n *   - 2  constant_frame_rate\r\n *   - 2  chroma_format_idc\r\n *   - 3  bit_depth_minus8\r\n *   - 5  reserved (11111)\r\n *   VvcPTLRecord\r\n *   - 2 reserved (11)\r\n *   - 6 num_bytes_constraint_info\r\n *   - 7 general_profile_idc\r\n *   - 1 general_tier_flag\r\n *   - 8 general_level_idc\r\n *   - 1 general_level_idc\r\n *   - 1 ptl_multilayer_enabled_flag\r\n *   if num_bytes_constraint_info > 0\r\n *      for (i = 0; i < num_bytes_constraint_info - 1; i++)\r\n *        - 8 general_constraint_info[i]\r\n *      - 6 general_constraint_info[num_bytes_constraint_info - 1]\r\n *   else\r\n *      - 6 reserved\r\n *   if num_sublayers > 1\r\n *      - num_sublayers - 2 ptl_sublayer_level_present_flag\r\n *      - 8 - num_sublayers + 1 ptl_reserved_zero_bit\r\n *      for (i = num_sublayers -2; i >= 0; i--)\r\n *        if ptl_sublayer_present_mask & (1 << i)\r\n *          - 8 sublayer_level_idc[i]\r\n *    - 8 ptl_num_sub_profiles\r\n *    if ptl_num_sub_profiles\r\n *      for (i = 0; i < ptl_num_sub_profiles; i++)\r\n *        - 32 general_sub_profile_idc[i]\r\n *    - 16 max_picture_width\r\n *    - 16 max_picture_height\r\n *    - 16 avg_frame_rate\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 2   reserved (0)\r\n * - 5   NAL_unit_type\r\n * if nalu_type != VVC_NALU_DEC_PARAM && nalu_type != VVC_NALU_OPI\r\n *    - 16  numNalus\r\n * else\r\n *   numNalus = 1\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n\r\n  const bufferReader = new BufferReader(extradata, true)\r\n\r\n  const ptlPresentFlag = bufferReader.readUint8() & 0x01\r\n\r\n  if (ptlPresentFlag) {\r\n    const bitReader = new BitReader()\r\n    bitReader.appendBuffer(extradata.subarray(1))\r\n    parsePTL(bitReader)\r\n    bufferReader.skip(bitReader.getPointer())\r\n  }\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x1f\r\n    let count = 1\r\n\r\n    if (naluType !== VVCNaluType.kDCI_NUT && naluType !== VVCNaluType.kOPI_NUT) {\r\n      count = bufferReader.readUint16()\r\n    }\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n\r\n  const sps = spss[0]\r\n  let ptl: Uint8Array\r\n  if (sps) {\r\n    const spsParams = parseSPS(sps)\r\n    let generalConstraintInfo = spsParams.generalConstraintInfo\r\n    if (!generalConstraintInfo.length) {\r\n      generalConstraintInfo = new Array(12).fill(0)\r\n    }\r\n    const biWriter = new BitWriter()\r\n    biWriter.writeU(9, 0)\r\n    biWriter.writeU(3, spsParams.spsMaxSublayersMinus1 + 1)\r\n    biWriter.writeU(2, 1)\r\n    biWriter.writeU(2, spsParams.chromaFormatIdc)\r\n    biWriter.writeU(3, spsParams.bitDepthMinus8)\r\n    biWriter.writeU(5, 0b11111)\r\n    biWriter.writeU(2, 0)\r\n    biWriter.writeU(6, generalConstraintInfo.length)\r\n    biWriter.writeU(7, spsParams.profile)\r\n    biWriter.writeU1(spsParams.tierFlag)\r\n    biWriter.writeU(8, spsParams.level)\r\n    biWriter.writeU1(spsParams.ptlFrameOnlyConstraintFlag)\r\n    biWriter.writeU1(spsParams.ptlMultilayerEnabledFlag)\r\n\r\n    if (generalConstraintInfo.length) {\r\n      for (let i = 0; i < generalConstraintInfo.length - 1; i++) {\r\n        biWriter.writeU(8, generalConstraintInfo[i])\r\n      }\r\n      biWriter.writeU(6, generalConstraintInfo[generalConstraintInfo.length - 1])\r\n    }\r\n    else {\r\n      biWriter.writeU(6, 0b111111)\r\n    }\r\n\r\n    if (spsParams.spsMaxSublayersMinus1 + 1 > 1) {\r\n      let ptlSubLayerLevelPresentFlags = 0\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        ptlSubLayerLevelPresentFlags = (ptlSubLayerLevelPresentFlags << 1 | spsParams.ptlSublayerLevelPresentFlag[i])\r\n      }\r\n      biWriter.writeU(spsParams.spsMaxSublayersMinus1, ptlSubLayerLevelPresentFlags)\r\n\r\n      for (let j = spsParams.spsMaxSublayersMinus1 + 1; j <= 8 && spsParams.spsMaxSublayersMinus1 > 0; ++j) {\r\n        biWriter.writeU1(0)\r\n      }\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        if (spsParams.ptlSublayerLevelPresentFlag[i]) {\r\n          biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n        }\r\n      }\r\n    }\r\n    biWriter.writeU(8, spsParams.generalSubProfileIdc.length)\r\n    for (let i = 0; i < spsParams.generalSubProfileIdc.length; i++) {\r\n      biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n    }\r\n    biWriter.writeU(16, spsParams.width)\r\n    biWriter.writeU(16, spsParams.height)\r\n    biWriter.writeU(16, 0)\r\n    biWriter.padding()\r\n    ptl = biWriter.getBuffer().subarray(0, biWriter.getPointer())\r\n  }\r\n\r\n  let length = 2 + (ptl ? ptl.length : 0)\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n\r\n  bufferWriter.writeUint8(NALULengthSizeMinusOne << 1 | (ptl ? 1 : 0) | 0xf8)\r\n\r\n  if (ptl) {\r\n    bufferWriter.writeBuffer(ptl)\r\n  }\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kVPS_NUT)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kSPS_NUT)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kPPS_NUT)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface) {\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return type !== VVCNaluType.kVPS_NUT\r\n          && type !== VVCNaluType.kSPS_NUT\r\n          && type !== VVCNaluType.kPPS_NUT\r\n          && type !== VVCNaluType.kAUD_NUT\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  array.each(nalus, (nalu) => {\r\n    if (NALULengthSizeMinusOne === 3) {\r\n      bufferWriter.writeUint32(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 2) {\r\n      bufferWriter.writeUint24(nalu.length)\r\n    }\r\n    else if (NALULengthSizeMinusOne === 1) {\r\n      bufferWriter.writeUint16(nalu.length)\r\n    }\r\n    else {\r\n      bufferWriter.writeUint8(nalu.length)\r\n    }\r\n    bufferWriter.writeBuffer(nalu.subarray(0))\r\n\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    if (type === VVCNaluType.kIDR_N_LP\r\n      || type === VVCNaluType.kIDR_W_RADL\r\n      || type === VVCNaluType.kCRA_NUT\r\n      || type === VVCNaluType.kGDR_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? ((extradata[0] >>> 1) & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n    nalus.push(bufferReader.readBuffer(length))\r\n  }\r\n\r\n  let length = vpss.reduce((prev, vps) => {\r\n    return prev + 4 + vps.length\r\n  }, 0)\r\n  length = spss.reduce((prev, sps) => {\r\n    return prev + 4 + sps.length\r\n  }, length)\r\n  length = ppss.reduce((prev, pps) => {\r\n    return prev + 4 + pps.length\r\n  }, length)\r\n  length = nalus.reduce((prev, nalu, index) => {\r\n    return prev + (index ? 3 : 4) + nalu.length\r\n  }, length)\r\n\r\n  const bufferPointer = avMalloc(length + 7)\r\n  const buffer = mapUint8Array(bufferPointer, length + 7)\r\n\r\n  const bufferWriter = new BufferWriter(buffer)\r\n\r\n  // AUD\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(0x01)\r\n  bufferWriter.writeUint8(0x00)\r\n  bufferWriter.writeUint8(VVCNaluType.kAUD_NUT << 3)\r\n  bufferWriter.writeUint8(0xf0)\r\n\r\n  array.each(vpss, (vps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(vps)\r\n  })\r\n\r\n  array.each(spss, (sps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(sps)\r\n  })\r\n\r\n  array.each(ppss, (pps) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(pps)\r\n  })\r\n\r\n  array.each(nalus, (nalu, index) => {\r\n    bufferWriter.writeUint8(0x00)\r\n    bufferWriter.writeUint8(0x00)\r\n    if (!index) {\r\n      bufferWriter.writeUint8(0x00)\r\n    }\r\n    bufferWriter.writeUint8(0x01)\r\n    bufferWriter.writeBuffer(nalu)\r\n\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    if (type === VVCNaluType.kIDR_N_LP\r\n      || type === VVCNaluType.kIDR_W_RADL\r\n      || type === VVCNaluType.kCRA_NUT\r\n      || type === VVCNaluType.kGDR_NUT\r\n    ) {\r\n      key = true\r\n    }\r\n  })\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7,\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAvccExtraData(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  const naluLengthSizeMinusOne = stream.metadata.naluLengthSizeMinusOne ?? NALULengthSizeMinusOne\r\n\r\n  let vpss = []\r\n  let spss = []\r\n  let ppss = []\r\n\r\n  const bufferReader = new BufferReader(data)\r\n  while (bufferReader.remainingSize() > 0) {\r\n    let length = 0\r\n    if (naluLengthSizeMinusOne === 3) {\r\n      length = bufferReader.readUint32()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 2) {\r\n      length = bufferReader.readUint24()\r\n    }\r\n    else if (naluLengthSizeMinusOne === 1) {\r\n      length = bufferReader.readUint16()\r\n    }\r\n    else {\r\n      length = bufferReader.readUint8()\r\n    }\r\n\r\n    const nalu = data.subarray(static_cast<int32>(bufferReader.getPos()), static_cast<int32>(bufferReader.getPos()) + length)\r\n    bufferReader.skip(length)\r\n\r\n    const naluType = (nalu[1] >>> 3) & 0x1f\r\n\r\n    if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss.push(nalu)\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss.push(nalu)\r\n    }\r\n    else if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss.push(nalu)\r\n    }\r\n  }\r\n\r\n  if (spss.length || ppss.length || vpss.length) {\r\n    const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    const extradataPointer = avMalloc(extradata.length)\r\n    memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n    addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n  }\r\n}\r\n\r\nexport function parseAnnexbExtraData(avpacket: pointer<AVPacket>, force: boolean = false) {\r\n  if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) && !force) {\r\n    return\r\n  }\r\n\r\n  const data = getAVPacketData(avpacket)\r\n\r\n  if (!isAnnexb(data)) {\r\n    return\r\n  }\r\n\r\n  let nalus = splitNaluByStartCode(data)\r\n\r\n  if (nalus.length > 2) {\r\n    const vpss = []\r\n    const spss = []\r\n    const ppss = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (vpss.length && spss.length && ppss.length) {\r\n      const extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      const extradataPointer = avMalloc(extradata.length)\r\n      memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParametersBySps(stream: AVStream, sps: Uint8Array) {\r\n  const { profile, level, width, height } = parseSPS(sps)\r\n  stream.codecpar.profile = profile\r\n  stream.codecpar.level = level\r\n  stream.codecpar.width = width\r\n  stream.codecpar.height = height\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[0] >>> 1) & 0x03\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      parseAVCodecParametersBySps(stream, spss[0])\r\n    }\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (avpacket.bitFormat === BitFormat.ANNEXB) {\r\n    let nalus = splitNaluByStartCode(mapUint8Array(avpacket.data, avpacket.size))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      return type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize + 1)) >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport interface VvcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  chromaFormatIdc: number\r\n  bitDepthMinus8: number\r\n  generalProfileSpace: number\r\n  tierFlag: number\r\n  generalConstraintInfo: number[]\r\n  generalSubProfileIdc: number[]\r\n  ptlFrameOnlyConstraintFlag: number\r\n  ptlMultilayerEnabledFlag: number\r\n  spsMaxSublayersMinus1: number\r\n  ptlSublayerLevelPresentFlag: number[]\r\n  sublayerLevelIdc: number[]\r\n  sps_log2_max_pic_order_cnt_lsb_minus4: number\r\n  sps_poc_msb_cycle_flag: number\r\n  sps_poc_msb_cycle_len_minus1: number\r\n  sps_num_extra_ph_bytes: number\r\n  sps_extra_ph_bit_present_flag: number[]\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): VvcSPS {\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bitDepthMinus8 = 0\r\n  let chromaFormatIdc = 1\r\n  let generalProfileSpace = 0\r\n  let tierFlag = 0\r\n  let ptlFrameOnlyConstraintFlag = 0\r\n  let ptlMultilayerEnabledFlag = 0\r\n\r\n  const generalConstraintInfo = []\r\n  const ptlSublayerLevelPresentFlag = []\r\n  const sublayerLevelIdc = []\r\n  const generalSubProfileIdc = []\r\n\r\n  const buffer = naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nuh_reserved_zero_bit\r\n  bitReader.readU1()\r\n  // layerId\r\n  bitReader.readU(6)\r\n  // nalu type\r\n  bitReader.readU(5)\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_seq_parameter_set_id && sps_video_parameter_set_id\r\n  bitReader.readU(8)\r\n\r\n  const spsMaxSublayersMinus1 = bitReader.readU(3)\r\n  chromaFormatIdc = bitReader.readU(2)\r\n  const sps_log2_ctu_size_minus5 = bitReader.readU(2)\r\n  const sps_ptl_dpb_hrd_params_present_flag = bitReader.readU(1)\r\n  if (sps_ptl_dpb_hrd_params_present_flag) {\r\n    profile = bitReader.readU(7)\r\n    tierFlag = bitReader.readU(1)\r\n    level = bitReader.readU(8)\r\n    ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n    ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n    const gci_present_flag = bitReader.readU(1)\r\n    if (gci_present_flag) {\r\n      for (let j = 0; j < 8; j++) {\r\n        generalConstraintInfo[j] = bitReader.readU(8)\r\n      }\r\n      generalConstraintInfo[8] = bitReader.readU(7)\r\n      const gci_num_reserved_bits = bitReader.readU(8)\r\n      bitReader.readU(gci_num_reserved_bits)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      ptlSublayerLevelPresentFlag[i] = bitReader.readU(1)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      if (ptlSublayerLevelPresentFlag[i]) {\r\n        sublayerLevelIdc[i] = bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    const ptl_num_sub_profiles = bitReader.readU(8)\r\n    if (ptl_num_sub_profiles) {\r\n      for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n        generalSubProfileIdc[i] = bitReader.readU(32)\r\n      }\r\n    }\r\n  }\r\n\r\n  // sps_gdr_enabled_flag\r\n  bitReader.readU1()\r\n  const sps_ref_pic_resampling_enabled_flag = bitReader.readU1()\r\n  if (sps_ref_pic_resampling_enabled_flag) {\r\n    // sps_res_change_in_clvs_allowed_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  const sps_pic_width_max_in_luma_samples = width = expgolomb.readUE(bitReader)\r\n  const sps_pic_height_max_in_luma_samples = height = expgolomb.readUE(bitReader)\r\n\r\n  if (bitReader.readU1()) {\r\n    // sps_conf_win_left_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_right_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_top_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_bottom_offset\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  if (bitReader.readU1()) {\r\n    const sps_num_subpics_minus1 = expgolomb.readUE(bitReader)\r\n    const ctb_log2_size_y = sps_log2_ctu_size_minus5 + 5\r\n    const ctb_size_y      = 1 << ctb_log2_size_y\r\n    const tmp_width_val   = sps_pic_width_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const tmp_height_val  = sps_pic_height_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const wlen            = Math.ceil(Math.log2(tmp_width_val))\r\n    const hlen            = Math.ceil(Math.log2(tmp_height_val))\r\n\r\n    let sps_subpic_id_len = 0\r\n    let sps_subpic_same_size_flag = 0\r\n    let sps_independent_subpics_flag = 0\r\n    // sps_num_subpics_minus1\r\n    if (sps_num_subpics_minus1 > 0) {\r\n      sps_independent_subpics_flag = bitReader.readU1()\r\n      sps_subpic_same_size_flag = bitReader.readU1()\r\n    }\r\n    for (let i = 0; sps_num_subpics_minus1 > 0 && i <= sps_num_subpics_minus1; i++) {\r\n      if (!sps_subpic_same_size_flag || i == 0) {\r\n        if (i > 0 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i > 0 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n      }\r\n      if (!sps_independent_subpics_flag) {\r\n        // sps_subpic_treated_as_pic_flag && sps_loop_filter_across_subpic_enabled_flag\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n    sps_subpic_id_len = expgolomb.readUE(bitReader) + 1\r\n    // sps_subpic_id_mapping_explicitly_signalled_flag\r\n    if (bitReader.readU(1)) {\r\n      // sps_subpic_id_mapping_present_flag\r\n      if (bitReader.readU(1)) {\r\n        for (let i = 0; i <= sps_num_subpics_minus1; i++) {\r\n          // sps_subpic_id[i]\r\n          bitReader.readU(sps_subpic_id_len)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  bitDepthMinus8 = expgolomb.readUE(bitReader)\r\n\r\n  // sps_entropy_coding_sync_enabled_flag\r\n  bitReader.readU(1)\r\n  // sps_entry_point_offsets_present_flag\r\n  bitReader.readU(1)\r\n\r\n  const sps_log2_max_pic_order_cnt_lsb_minus4 = bitReader.readU(4)\r\n  const sps_poc_msb_cycle_flag = bitReader.readU(1)\r\n  let sps_poc_msb_cycle_len_minus1 = 0\r\n  if (sps_poc_msb_cycle_flag) {\r\n    sps_poc_msb_cycle_len_minus1 = expgolomb.readUE(bitReader)\r\n  }\r\n  const sps_extra_ph_bit_present_flag: number[] = []\r\n  const sps_num_extra_ph_bytes = bitReader.readU(2)\r\n  for (let i = 0; i < (sps_num_extra_ph_bytes * 8); i++) {\r\n    sps_extra_ph_bit_present_flag[i] = bitReader.readU(1)\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    chromaFormatIdc,\r\n    bitDepthMinus8,\r\n    generalProfileSpace,\r\n    tierFlag,\r\n    generalConstraintInfo,\r\n    generalSubProfileIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    spsMaxSublayersMinus1,\r\n    ptlSublayerLevelPresentFlag,\r\n    sublayerLevelIdc,\r\n    sps_log2_max_pic_order_cnt_lsb_minus4,\r\n    sps_poc_msb_cycle_flag,\r\n    sps_poc_msb_cycle_len_minus1,\r\n    sps_num_extra_ph_bytes,\r\n    sps_extra_ph_bit_present_flag\r\n  }\r\n}\r\n\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n\r\n  if (extradata[0] === 0 && extradata[1] === 0 && extradata[2] === 0 && extradata[3] === 1) {\r\n    extradata = annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n\r\n  const bitReader = new BitReader()\r\n  bitReader.appendBuffer(extradata)\r\n  const ptlPresentFlag = bitReader.readU(8) & 0x01\r\n  if (ptlPresentFlag) {\r\n    return parsePTL(bitReader)\r\n  }\r\n  return {} as Data\r\n}\r\n","/*\r\n * libmedia flv encoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport OFormat from './OFormat'\r\nimport FlvHeader from './flv/FlvHeader'\r\nimport FlvScriptTag from './flv/FlvScriptTag'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVOFormatContext } from '../AVFormatContext'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\nimport { AVPacketSideDataType, AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { AVCPacketType, AVCodecID2FlvCodecType, FlvCodecHeaderLength, FlvTag, PacketTypeExt } from './flv/flv'\r\nimport { FlvContext } from './flv/type'\r\n\r\nimport * as oflv from './flv/oflv'\r\n\r\nimport * as flvAAC from './flv/codecs/aac'\r\nimport * as flvH264 from './flv/codecs/h264'\r\nimport * as flvEnhanced from './flv/codecs/enhanced'\r\n\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport { AVFormat } from '../avformat'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport { getAVPacketSideData } from 'avutil/util/avpacket'\r\nimport { avQ2D, avRescaleQ } from 'avutil/util/rational'\r\nimport Annexb2AvccFilter from '../bsf/h2645/Annexb2AvccFilter'\r\nimport { BitFormat } from '../codecs/h264'\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\n\r\n\r\nexport interface FlvFormatOptions {\r\n  hasKeyframes?: boolean\r\n  live?: boolean\r\n}\r\n\r\nexport default class OFlvFormat extends OFormat {\r\n\r\n  public type: AVFormat = AVFormat.FLV\r\n\r\n  private context: FlvContext\r\n\r\n  public header: FlvHeader\r\n\r\n  public script: FlvScriptTag\r\n\r\n  public options: FlvFormatOptions\r\n\r\n  private annexb2AvccFilter: Annexb2AvccFilter\r\n\r\n  constructor(options: FlvFormatOptions = {}) {\r\n    super()\r\n\r\n    this.header = new FlvHeader()\r\n    this.script = new FlvScriptTag()\r\n\r\n    this.options = options\r\n\r\n    this.context = {\r\n      keyframeFilePositions: [],\r\n      keyFrameTimes: [],\r\n      lastkeyframelocation: 0,\r\n      lastkeyframetimestamp: 0n,\r\n      lasttimestamp: 0n,\r\n      framerate: 0,\r\n      filesize: 0,\r\n      audioSize: 0,\r\n      videosize: 0,\r\n      datasize: 0,\r\n      duration: 0,\r\n      scriptWrote: false,\r\n      frameCount: 0,\r\n      firstKeyframePositionWrote: false,\r\n      videoMetadataWrote: false\r\n    }\r\n  }\r\n\r\n  public init(formatContext: AVOFormatContext): number {\r\n    if (formatContext.ioWriter) {\r\n      formatContext.ioWriter.setEndian(true)\r\n    }\r\n\r\n    const audioStream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n    const videoStream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n\r\n    if (audioStream) {\r\n      this.header.hasAudio = true\r\n      this.script.onMetaData.hasAudio = true\r\n\r\n      if (audioStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_SPEEX) {\r\n        if (audioStream.codecpar.sampleRate !== 16000) {\r\n          logger.fatal('flv speex only support 16000 sample rate')\r\n        }\r\n        if (audioStream.codecpar.chLayout.nbChannels !== 1) {\r\n          logger.fatal('flv speex only support 1 channel')\r\n        }\r\n      }\r\n\r\n      if (object.has(AVCodecID2FlvCodecType, audioStream.codecpar.codecId as number)) {\r\n        this.script.onMetaData.audiocodecid = AVCodecID2FlvCodecType[audioStream.codecpar.codecId]\r\n        this.script.onMetaData.stereo = audioStream.codecpar.chLayout.nbChannels > 1 ? true : false\r\n        this.script.onMetaData.audiosamplerate = audioStream.codecpar.sampleRate || 0\r\n        this.script.onMetaData.audiosamplesize = audioStream.codecpar.frameSize || 0\r\n      }\r\n\r\n      audioStream.timeBase.den = 1000\r\n      audioStream.timeBase.num = 1\r\n    }\r\n    if (videoStream) {\r\n      this.header.hasVideo = true\r\n      this.script.onMetaData.hasVideo = true\r\n      if (object.has(AVCodecID2FlvCodecType, videoStream.codecpar.codecId as number)) {\r\n        this.script.onMetaData.videocodecid = AVCodecID2FlvCodecType[videoStream.codecpar.codecId]\r\n        this.script.onMetaData.width = videoStream.codecpar.width || 0\r\n        this.script.onMetaData.height = videoStream.codecpar.height || 0\r\n        this.script.onMetaData.framerate = avQ2D(videoStream.codecpar.framerate)\r\n      }\r\n      videoStream.timeBase.den = 1000\r\n      videoStream.timeBase.num = 1\r\n\r\n      this.annexb2AvccFilter = new Annexb2AvccFilter()\r\n      this.annexb2AvccFilter.init(addressof(videoStream.codecpar), addressof(videoStream.timeBase))\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy(formatContext: AVOFormatContext): void {\r\n    super.destroy(formatContext)\r\n    if (this.annexb2AvccFilter) {\r\n      this.annexb2AvccFilter.destroy()\r\n      this.annexb2AvccFilter = null\r\n    }\r\n  }\r\n\r\n  public writeHeader(formatContext: AVOFormatContext): number {\r\n    this.header.write(formatContext.ioWriter)\r\n    // previousTagSize0 总是 0\r\n    formatContext.ioWriter.writeUint32(0)\r\n\r\n    if (this.options.live) {\r\n      this.script.write(formatContext.ioWriter)\r\n      this.context.scriptWrote = true\r\n    }\r\n\r\n    const audioStream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n    const videoStream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n\r\n    if (audioStream && audioStream.codecpar.extradata) {\r\n      if (audioStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n        const length = flvAAC.writeExtradata(\r\n          formatContext.ioWriter,\r\n          audioStream,\r\n          mapUint8Array(audioStream.codecpar.extradata, audioStream.codecpar.extradataSize)\r\n        )\r\n\r\n        this.context.filesize += length + 4\r\n        this.context.audioSize += audioStream.codecpar.extradataSize\r\n        this.context.datasize += audioStream.codecpar.extradataSize\r\n      }\r\n\r\n      this.script.onMetaData.hasMetadata = true\r\n    }\r\n    if (videoStream && videoStream.codecpar.extradata) {\r\n      if (videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n      ) {\r\n\r\n        const now = formatContext.ioWriter.getPos()\r\n\r\n        const usdEnhanced = videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n          || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n          || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n          || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n\r\n        const length = usdEnhanced\r\n          ? flvEnhanced.writeExtradata(\r\n            formatContext.ioWriter,\r\n            videoStream,\r\n            mapUint8Array(videoStream.codecpar.extradata, videoStream.codecpar.extradataSize),\r\n            AVPacketFlags.AV_PKT_FLAG_KEY\r\n          )\r\n          : flvH264.writeExtradata(\r\n            formatContext.ioWriter,\r\n            videoStream,\r\n            mapUint8Array(videoStream.codecpar.extradata, videoStream.codecpar.extradataSize),\r\n            AVPacketFlags.AV_PKT_FLAG_KEY\r\n          )\r\n        this.context.filesize += length + 4\r\n        this.context.videosize += videoStream.codecpar.extradataSize\r\n        this.context.datasize += videoStream.codecpar.extradataSize\r\n\r\n        this.context.keyFrameTimes.push(0)\r\n        this.context.keyframeFilePositions.push(Number(now))\r\n        this.context.videoMetadataWrote = true\r\n      }\r\n\r\n      this.script.onMetaData.hasMetadata = true\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public writeAVPacket(formatContext: AVOFormatContext, avpacket: pointer<AVPacket>): number {\r\n\r\n    const stream = formatContext.getStreamByIndex(avpacket.streamIndex)\r\n\r\n    if (!stream) {\r\n      logger.warn(`can not found the stream width the packet\\'s streamIndex: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      // 如果有 metadata，先写 metadata 为一个 tag\r\n      const element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n      if (element) {\r\n        const extradata = mapUint8Array(element.data, element.size)\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n          flvAAC.writeExtradata(\r\n            formatContext.ioWriter,\r\n            stream,\r\n            extradata\r\n          )\r\n        }\r\n      }\r\n\r\n      if (avpacket.size) {\r\n        const now = formatContext.ioWriter.getPos()\r\n\r\n        oflv.writeTagHeader(\r\n          formatContext.ioWriter,\r\n          FlvTag.AUDIO,\r\n          avpacket.size + 1 + FlvCodecHeaderLength[stream.codecpar.codecId],\r\n          avRescaleQ(avpacket.dts, avpacket.timeBase, stream.timeBase)\r\n        )\r\n\r\n        oflv.writeAudioTagDataHeader(formatContext.ioWriter, stream)\r\n\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n          flvAAC.writeDataHeader(formatContext.ioWriter, flvAAC.AACPacketType.AAC_RAW)\r\n        }\r\n\r\n        formatContext.ioWriter.writeBuffer(mapUint8Array(avpacket.data, avpacket.size))\r\n\r\n        const previousTagSize = Number(formatContext.ioWriter.getPos() - now)\r\n        formatContext.ioWriter.writeUint32(previousTagSize)\r\n\r\n        this.context.audioSize += previousTagSize\r\n        this.context.filesize += previousTagSize + 4\r\n        this.context.lasttimestamp = avRescaleQ(avpacket.pts, avpacket.timeBase, stream.timeBase)\r\n        this.context.datasize += avpacket.size || 0\r\n      }\r\n    }\r\n    else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n\r\n      if ((stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n      ) && avpacket.bitFormat !== BitFormat.AVCC\r\n      ) {\r\n        this.annexb2AvccFilter.sendAVPacket(avpacket)\r\n        this.annexb2AvccFilter.receiveAVPacket(avpacket)\r\n      }\r\n\r\n      const keyframePos = formatContext.ioWriter.getPos()\r\n\r\n      // 如果有 extradata，先写 extradata 为一个 tag\r\n      const element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n      if (element) {\r\n        const extradata = mapUint8Array(element.data, element.size)\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n        ) {\r\n          flvH264.writeExtradata(\r\n            formatContext.ioWriter,\r\n            stream,\r\n            extradata,\r\n            AVPacketFlags.AV_PKT_FLAG_KEY\r\n          )\r\n        }\r\n        else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n        ) {\r\n          flvEnhanced.writeExtradata(\r\n            formatContext.ioWriter,\r\n            stream,\r\n            mapUint8Array(stream.codecpar.extradata, stream.codecpar.extradataSize),\r\n            AVPacketFlags.AV_PKT_FLAG_KEY\r\n          )\r\n        }\r\n      }\r\n\r\n      if (avpacket.size) {\r\n        const now = formatContext.ioWriter.getPos()\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n        ) {\r\n          const packetType = avpacket.dts !== avpacket.pts\r\n            && (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n              || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n            )\r\n            ? PacketTypeExt.PacketTypeCodedFrames\r\n            : PacketTypeExt.PacketTypeCodedFramesX\r\n\r\n          oflv.writeTagHeader(\r\n            formatContext.ioWriter,\r\n            FlvTag.VIDEO,\r\n            avpacket.size + 1 + FlvCodecHeaderLength[stream.codecpar.codecId]\r\n              + (packetType === PacketTypeExt.PacketTypeCodedFrames ? 3 : 0),\r\n            avRescaleQ(avpacket.dts, avpacket.timeBase, stream.timeBase)\r\n          )\r\n          oflv.writeVideoTagExtDataHeader(formatContext.ioWriter, stream, packetType, avpacket.flags)\r\n\r\n          flvEnhanced.writeCodecTagHeader(formatContext.ioWriter, stream.codecpar.codecId)\r\n\r\n          if (packetType === PacketTypeExt.PacketTypeCodedFrames) {\r\n            let ct = 0\r\n            if (avpacket.pts !== NOPTS_VALUE_BIGINT) {\r\n              ct = static_cast<int32>(avRescaleQ(avpacket.pts - avpacket.dts, avpacket.timeBase, stream.timeBase))\r\n            }\r\n            formatContext.ioWriter.writeUint24(ct)\r\n          }\r\n        }\r\n        else {\r\n          oflv.writeTagHeader(\r\n            formatContext.ioWriter,\r\n            FlvTag.VIDEO,\r\n            avpacket.size + 1 + FlvCodecHeaderLength[stream.codecpar.codecId],\r\n            avRescaleQ(avpacket.dts, avpacket.timeBase, stream.timeBase)\r\n          )\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n          ) {\r\n            oflv.writeVideoTagDataHeader(formatContext.ioWriter, stream, avpacket.flags)\r\n\r\n            let ct = 0\r\n            if (avpacket.pts !== NOPTS_VALUE_BIGINT) {\r\n              ct = static_cast<int32>(avRescaleQ(avpacket.pts - avpacket.dts, avpacket.timeBase, stream.timeBase))\r\n            }\r\n            flvH264.writeDataHeader(formatContext.ioWriter, AVCPacketType.AVC_NALU, ct)\r\n          }\r\n        }\r\n\r\n        formatContext.ioWriter.writeBuffer(mapUint8Array(avpacket.data, avpacket.size))\r\n\r\n        const previousTagSize = Number(formatContext.ioWriter.getPos() - now)\r\n        formatContext.ioWriter.writeUint32(previousTagSize)\r\n\r\n        this.context.videosize += previousTagSize\r\n        this.context.filesize += previousTagSize + 4\r\n        this.context.lasttimestamp = avRescaleQ(avpacket.pts, avpacket.timeBase, stream.timeBase)\r\n        this.context.datasize += avpacket.size || 0\r\n        this.context.frameCount++\r\n\r\n        if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n          if (this.context.firstKeyframePositionWrote || !this.context.videoMetadataWrote) {\r\n            this.context.lastkeyframetimestamp = avRescaleQ(avpacket.pts, avpacket.timeBase, stream.timeBase)\r\n            this.context.lastkeyframelocation = Number(keyframePos)\r\n            this.context.keyFrameTimes.push(Number((Number(this.context.lastkeyframetimestamp) * avQ2D(stream.timeBase)).toFixed(2)))\r\n            this.context.keyframeFilePositions.push(this.context.lastkeyframelocation)\r\n          }\r\n          else {\r\n            this.context.firstKeyframePositionWrote = true\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public writeTrailer(formatContext: AVOFormatContext): number {\r\n\r\n    const videoStream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n    if (videoStream\r\n      && (videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n      )\r\n    ) {\r\n      const usdEnhanced = videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n\r\n      oflv.writeTagHeader(\r\n        formatContext.ioWriter,\r\n        FlvTag.VIDEO,\r\n        1 + FlvCodecHeaderLength[videoStream.codecpar.codecId],\r\n        0n\r\n      )\r\n      if (usdEnhanced) {\r\n        oflv.writeVideoTagExtDataHeader(formatContext.ioWriter, videoStream, PacketTypeExt.PacketTypeSequenceEnd, AVPacketFlags.AV_PKT_FLAG_KEY)\r\n        flvEnhanced.writeCodecTagHeader(formatContext.ioWriter, videoStream.codecpar.codecId)\r\n      }\r\n      else {\r\n        oflv.writeVideoTagDataHeader(formatContext.ioWriter, videoStream, AVPacketFlags.AV_PKT_FLAG_KEY)\r\n        flvH264.writeDataHeader(formatContext.ioWriter, AVCPacketType.AVC_END_OF_ENQUENCE, 0)\r\n      }\r\n      formatContext.ioWriter.writeUint32(11 + 1 + FlvCodecHeaderLength[videoStream.codecpar.codecId])\r\n      this.context.videosize += 11 + 1 + FlvCodecHeaderLength[videoStream.codecpar.codecId]\r\n      this.context.filesize += 11 + 1 + FlvCodecHeaderLength[videoStream.codecpar.codecId] + 4\r\n\r\n      this.script.onMetaData.canSeekToEnd = true\r\n    }\r\n\r\n    if (!this.context.scriptWrote) {\r\n      formatContext.ioWriter.flush()\r\n\r\n      this.script.onMetaData.filesize = this.context.filesize\r\n      this.script.onMetaData.audiosize = this.context.audioSize\r\n      this.script.onMetaData.videosize = this.context.videosize\r\n      this.script.onMetaData.datasize = this.context.datasize\r\n      this.script.onMetaData.lasttimestamp = this.context.lasttimestamp\r\n\r\n      if (this.options.hasKeyframes) {\r\n        this.script.onMetaData.lastkeyframetimestamp = this.context.lastkeyframetimestamp\r\n        this.script.onMetaData.lastkeyframelocation = this.context.lastkeyframelocation\r\n        if (this.context.keyFrameTimes.length > 1) {\r\n          this.script.onMetaData.hasKeyframes = true\r\n          this.script.onMetaData.keyframes = {\r\n            filepositions: this.context.keyframeFilePositions,\r\n            times: this.context.keyFrameTimes\r\n          }\r\n        }\r\n        else {\r\n          this.script.onMetaData.hasKeyframes = false\r\n        }\r\n      }\r\n      else {\r\n        this.script.onMetaData.hasKeyframes = false\r\n      }\r\n\r\n      this.script.onMetaData.duration = Number((Number(this.context.lasttimestamp) / 1000).toFixed(2))\r\n      this.script.onMetaData.audiodatarate = Number((this.context.audioSize / this.script.onMetaData.duration / 1000).toFixed(2))\r\n      this.script.onMetaData.videodatarate = Number((this.context.videosize / this.script.onMetaData.duration / 1000).toFixed(2))\r\n      this.script.onMetaData.framerate = Math.floor(this.context.frameCount / this.script.onMetaData.duration)\r\n\r\n      const size = this.script.computeSize()\r\n\r\n      array.each(this.context.keyframeFilePositions, (item, index) => {\r\n        this.context.keyframeFilePositions[index] = item + 11 + size + 4\r\n      })\r\n\r\n      if (this.script.onMetaData.keyframes) {\r\n        this.script.onMetaData.keyframes.filepositions = this.context.keyframeFilePositions\r\n      }\r\n\r\n      this.context.filesize += 11 + size + 4\r\n      this.script.onMetaData.filesize = this.context.filesize\r\n\r\n      const buffers = []\r\n      const oldFlush = formatContext.ioWriter.onFlush\r\n\r\n      formatContext.ioWriter.onFlush = (buffer) => {\r\n        buffers.push(buffer.slice())\r\n        return 0\r\n      }\r\n\r\n      this.script.write(formatContext.ioWriter)\r\n\r\n      formatContext.ioWriter.flush()\r\n      formatContext.ioWriter.onFlush = oldFlush\r\n      const data = concatTypeArray(Uint8Array, buffers)\r\n      if (oldFlush) {\r\n        oldFlush(data, 13n)\r\n      }\r\n    }\r\n    else {\r\n      formatContext.ioWriter.flush()\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public flush(context: AVOFormatContext): number {\r\n    context.ioWriter.flush()\r\n    return 0\r\n  }\r\n\r\n}\r\n","/*\r\n * libmedia flv header format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\n\r\nexport default class FlvHeader {\r\n  /**\r\n   * 3 bytes 签名\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 1 bytes 版本，比如 0x01 表示 FLV 版本 1\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes 第一位标记是否有视频，第 4 位标记是否有音频，其余位保留\r\n   */\r\n  public flags: number\r\n\r\n  /**\r\n   * 4 bytes FLV header 的大小，单位是字节，目前是 9\r\n   */\r\n  public dataOffset: number\r\n\r\n  /**\r\n   * 是否有视频\r\n   */\r\n  public hasVideo: boolean\r\n\r\n  /**\r\n   * 是否有音频\r\n   */\r\n  public hasAudio: boolean\r\n\r\n  constructor() {\r\n\r\n    this.signature = 'FLV'\r\n    this.version = 1\r\n    this.flags = 0\r\n    this.dataOffset = 9\r\n\r\n    this.hasAudio = false\r\n    this.hasVideo = false\r\n  }\r\n\r\n  @deasync\r\n  public async read(ioReader: IOReader) {\r\n    this.signature = await ioReader.readString(3)\r\n    this.version = await ioReader.readUint8()\r\n    this.flags = await ioReader.readUint8()\r\n    this.dataOffset = await ioReader.readUint32()\r\n\r\n    this.hasAudio = !!(this.flags & 0x04)\r\n    this.hasVideo = !!(this.flags & 0x01)\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    this.flags = 0\r\n    if (this.hasAudio) {\r\n      this.flags |= 0x04\r\n    }\r\n    if (this.hasVideo) {\r\n      this.flags |= 0x01\r\n    }\r\n\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint8(this.version)\r\n    ioWriter.writeUint8(this.flags)\r\n    ioWriter.writeUint32(this.dataOffset)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv script tag format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\nimport { FlvMetaData } from './type'\r\nimport { FlvTag } from './flv'\r\n\r\nimport * as flv from './oflv'\r\nimport * as errorType from 'avutil/error'\r\n\r\nexport default class FlvScriptTag {\r\n\r\n  public onMetaData: Partial<FlvMetaData>\r\n\r\n  constructor() {\r\n    this.onMetaData = {\r\n      audiocodecid: 10,\r\n      canSeekToEnd: false,\r\n      width: 0,\r\n      height: 0,\r\n      stereo: true,\r\n      videocodecid: 7\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async parseObject(ioReader: IOReader, endPos: bigint) {\r\n    const key = await ioReader.readString(await ioReader.readUint16())\r\n    const value = await this.parseValue(ioReader, endPos)\r\n    return {\r\n      key,\r\n      value\r\n    }\r\n  }\r\n\r\n  @deasync\r\n  private async parseValue(ioReader: IOReader, endPos: bigint) {\r\n    const type = await ioReader.readUint8()\r\n    let value: any\r\n\r\n    switch (type) {\r\n      // double\r\n      case 0:\r\n        value = await ioReader.readDouble()\r\n        break\r\n        // boolean\r\n      case 1:\r\n        value = await ioReader.readUint8() ? true : false\r\n        break\r\n        // string\r\n      case 2:\r\n        value = await ioReader.readString(await ioReader.readUint16())\r\n        break\r\n        // object\r\n      case 3:\r\n        value = {}\r\n        while (ioReader.getPos() < endPos) {\r\n          const { key, value: val } = await this.parseObject(ioReader, endPos)\r\n          value[key] = val\r\n          if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n            await ioReader.skip(3)\r\n            break\r\n          }\r\n        }\r\n        break\r\n        // ECMA array type (Mixed array)\r\n      case 8:\r\n        value = {}\r\n        // skip ECMAArrayLength(UI32)\r\n        await ioReader.skip(4)\r\n        while (ioReader.getPos() < endPos) {\r\n          const { key, value: val } = await this.parseObject(ioReader, endPos)\r\n          value[key] = val\r\n          if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n            await ioReader.skip(3)\r\n            break\r\n          }\r\n        }\r\n        break\r\n        // ScriptDataObjectEnd\r\n      case 9:\r\n        value = null\r\n        break\r\n        // Strict array type\r\n      case 10:\r\n        value = []\r\n        const length = await ioReader.readUint32()\r\n        for (let i = 0; i < length; i++) {\r\n          value.push(await this.parseValue(ioReader, endPos))\r\n        }\r\n        break\r\n        // Date\r\n      case 11:\r\n        const timestamp = await ioReader.readDouble()\r\n        const localTimeOffset = await ioReader.readInt16()\r\n        value = new Date(timestamp + localTimeOffset * 60 * 1000)\r\n        break\r\n        // Long string type\r\n      case 12:\r\n        value = await ioReader.readString(await ioReader.readUint32())\r\n        break\r\n      default:\r\n\r\n    }\r\n\r\n    return value\r\n  }\r\n\r\n  @deasync\r\n  public async read(ioReader: IOReader, size: number) {\r\n    const now = ioReader.getPos()\r\n    const endPos = now + static_cast<int64>(size)\r\n    const key = await this.parseValue(ioReader, endPos)\r\n    const value = await this.parseValue(ioReader, endPos)\r\n    this[key] = value\r\n\r\n    const tagSize = Number(ioReader.getPos() - now)\r\n    const prev = await ioReader.readUint32()\r\n\r\n    if (tagSize + 11 !== prev) {\r\n      logger.warn(`script size not match, size: ${tagSize + 11}, previousTagSize: ${prev}`)\r\n\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private writeValue(ioWriter: IOWriterSync, value: any) {\r\n    // double\r\n    if (is.number(value)) {\r\n      ioWriter.writeUint8(0)\r\n      ioWriter.writeDouble(value)\r\n    }\r\n    else if (is.bigint(value)) {\r\n      ioWriter.writeUint8(0)\r\n      ioWriter.writeDouble(Number(value))\r\n    }\r\n    // boolean\r\n    else if (is.boolean(value)) {\r\n      ioWriter.writeUint8(1)\r\n      ioWriter.writeUint8(value ? 1 : 0)\r\n    }\r\n    // string\r\n    else if (is.string(value)) {\r\n      // long string\r\n      if (value.length >= 65536) {\r\n        ioWriter.writeUint8(12)\r\n        ioWriter.writeUint32(value.length)\r\n        ioWriter.writeString(value)\r\n      }\r\n      // string\r\n      else {\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint16(value.length)\r\n        ioWriter.writeString(value)\r\n      }\r\n    }\r\n    // array type\r\n    else if (is.array(value)) {\r\n      ioWriter.writeUint8(10)\r\n      ioWriter.writeUint32(value.length)\r\n      array.each(value, (value) => {\r\n        this.writeValue(ioWriter, value)\r\n      })\r\n    }\r\n    // object\r\n    else if (is.object(value)) {\r\n      ioWriter.writeUint8(3)\r\n      object.each(value, (item, key) => {\r\n        ioWriter.writeUint16(key.length)\r\n        ioWriter.writeString(key)\r\n        this.writeValue(ioWriter, item)\r\n      })\r\n      // object end flag\r\n      ioWriter.writeUint24(9)\r\n    }\r\n    else if (value instanceof Date) {\r\n      ioWriter.writeUint8(11)\r\n      ioWriter.writeDouble(value.getTime())\r\n      ioWriter.writeInt16(0)\r\n    }\r\n  }\r\n  public computeSize() {\r\n    const cache = []\r\n    const cacheWriter = new IOWriterSync()\r\n    cacheWriter.onFlush = (data) => {\r\n      cache.push(data.slice())\r\n      return 0\r\n    }\r\n    this.writeValue(cacheWriter, 'onMetaData')\r\n    this.writeValue(cacheWriter, this.onMetaData)\r\n\r\n    cacheWriter.flush()\r\n\r\n    const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n    return buffer.length\r\n  }\r\n\r\n  public write(ioWriter: IOWriterSync) {\r\n    if (this.onMetaData) {\r\n      const cache = []\r\n      const cacheWriter = new IOWriterSync()\r\n      cacheWriter.onFlush = (data) => {\r\n        cache.push(data.slice())\r\n        return 0\r\n      }\r\n\r\n      this.writeValue(cacheWriter, 'onMetaData')\r\n      this.writeValue(cacheWriter, this.onMetaData)\r\n\r\n      cacheWriter.flush()\r\n\r\n      const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n      const now = ioWriter.getPos()\r\n\r\n      // tag header\r\n      flv.writeTagHeader(ioWriter, FlvTag.SCRIPT, buffer.length, 0n)\r\n\r\n      // tag body\r\n      ioWriter.writeBuffer(buffer)\r\n\r\n      // previousTagSize\r\n      ioWriter.writeUint32(Number(ioWriter.getPos() - now))\r\n    }\r\n  }\r\n\r\n  public dts2Position(dts: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n\r\n      let i: number\r\n      for (i = 0; i < times.length; i++) {\r\n        if (times[i] === dts) {\r\n          index = i\r\n          break\r\n        }\r\n        else if (times[i] > dts) {\r\n          index = Math.max(i - 1, 0)\r\n          break\r\n        }\r\n      }\r\n      if (i && i === times.length) {\r\n        index = times.length - 1\r\n      }\r\n      return {\r\n        pos: position[index],\r\n        dts: times[index]\r\n      }\r\n    }\r\n\r\n    return {\r\n      pos: -1,\r\n      dts: -1\r\n    }\r\n  }\r\n\r\n  public position2DTS(pos: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n      let i = 0\r\n      for (i = 0; i < position.length; i++) {\r\n        if (position[i] > pos) {\r\n          index = i\r\n          break\r\n        }\r\n      }\r\n      if (i === position.length) {\r\n        return this.onMetaData.duration ?? times[times.length - 1]\r\n      }\r\n      return times[index]\r\n    }\r\n    return -1\r\n  }\r\n\r\n  public canSeek(): boolean {\r\n    return !!(this.onMetaData.keyframes\r\n      && this.onMetaData.keyframes.filepositions\r\n      && this.onMetaData.keyframes.filepositions.length)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as flv from '../oflv'\r\nimport { FlvCodecHeaderLength, FlvTag } from '../flv'\r\nimport Stream from '../../../AVStream'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum AACPacketType {\r\n  AAC_SEQUENCE_HEADER,\r\n  AAC_RAW\r\n}\r\n\r\nexport function writeDataHeader(ioWriter: IOWriter, type: AACPacketType) {\r\n  ioWriter.writeUint8(type)\r\n}\r\n\r\nexport function writeExtradata(ioWriter: IOWriter, stream: Stream, metadata: Uint8Array) {\r\n\r\n  const now = ioWriter.getPos()\r\n\r\n  flv.writeTagHeader(\r\n    ioWriter,\r\n    FlvTag.AUDIO,\r\n    metadata.length + 1 + FlvCodecHeaderLength[AVCodecID.AV_CODEC_ID_AAC],\r\n    0n\r\n  )\r\n  // tag header\r\n  flv.writeAudioTagDataHeader(ioWriter, stream)\r\n\r\n  // tag body\r\n  writeDataHeader(ioWriter, AACPacketType.AAC_SEQUENCE_HEADER)\r\n  ioWriter.writeBuffer(metadata)\r\n\r\n  const length = Number(ioWriter.getPos() - now)\r\n  ioWriter.writeUint32(length)\r\n\r\n  return length\r\n}\r\n","/*\r\n * libmedia flv enhanced util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as flv from '../oflv'\r\nimport Stream from '../../../AVStream'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { FlvTag, PacketTypeExt } from '../flv'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { FlvCodecHeaderLength } from '../flv'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { writeVideoTagExtDataHeader } from '../oflv'\r\n\r\nexport function writeCodecTagHeader(ioWriter: IOWriter, codecId: AVCodecID) {\r\n  switch (codecId) {\r\n    case AVCodecID.AV_CODEC_ID_HEVC:\r\n      ioWriter.writeString('hvc1')\r\n      break\r\n    case AVCodecID.AV_CODEC_ID_VVC:\r\n      ioWriter.writeString('vvc1')\r\n      break\r\n    case AVCodecID.AV_CODEC_ID_VP9:\r\n      ioWriter.writeString('vp09')\r\n      break\r\n    case AVCodecID.AV_CODEC_ID_AV1:\r\n      ioWriter.writeString('av01')\r\n      break\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * 写 extradata 数据\r\n * \r\n * @param ioWriter \r\n * @param stream \r\n * @param data \r\n * @param metadata \r\n */\r\nexport function writeExtradata(\r\n  ioWriter: IOWriter,\r\n  stream: Stream,\r\n  metadata: Uint8Array,\r\n  flags: AVPacketFlags\r\n) {\r\n\r\n  const now = ioWriter.getPos()\r\n\r\n  flv.writeTagHeader(\r\n    ioWriter,\r\n    FlvTag.VIDEO,\r\n    metadata.length + 1 + FlvCodecHeaderLength[stream.codecpar.codecId],\r\n    0n\r\n  )\r\n  writeVideoTagExtDataHeader(ioWriter, stream, PacketTypeExt.PacketTypeSequenceStart, flags)\r\n\r\n  writeCodecTagHeader(ioWriter, stream.codecpar.codecId)\r\n\r\n  ioWriter.writeBuffer(metadata)\r\n\r\n  const length = Number(ioWriter.getPos() - now)\r\n  ioWriter.writeUint32(length)\r\n\r\n  return length\r\n}\r\n","/*\r\n * libmedia flv h264 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as flv from '../oflv'\r\nimport Stream from '../../../AVStream'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVCPacketType, FlvTag } from '../flv'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { FlvCodecHeaderLength } from '../flv'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport function writeDataHeader(ioWriter: IOWriter, type: AVCPacketType, ct: number) {\r\n  ioWriter.writeUint8(type)\r\n  ioWriter.writeUint24(ct)\r\n}\r\n\r\n/**\r\n * 写 extradata 数据\r\n * \r\n * @param ioWriter \r\n * @param stream \r\n * @param data \r\n * @param metadata \r\n */\r\nexport function writeExtradata(\r\n  ioWriter: IOWriter,\r\n  stream: Stream,\r\n  metadata: Uint8Array,\r\n  flags: AVPacketFlags\r\n) {\r\n\r\n  const now = ioWriter.getPos()\r\n\r\n  flv.writeTagHeader(\r\n    ioWriter,\r\n    FlvTag.VIDEO,\r\n    metadata.length + 1 + FlvCodecHeaderLength[AVCodecID.AV_CODEC_ID_H264],\r\n    0n\r\n  )\r\n  flv.writeVideoTagDataHeader(ioWriter, stream, flags)\r\n\r\n  writeDataHeader(ioWriter, AVCPacketType.AVC_SEQUENCE_HEADER, 0)\r\n  ioWriter.writeBuffer(metadata)\r\n\r\n  const length = Number(ioWriter.getPos() - now)\r\n  ioWriter.writeUint32(length)\r\n\r\n  return length\r\n}\r\n","/*\r\n * libmedia flv defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum FlvTag {\r\n  AUDIO = 8,\r\n  VIDEO = 9,\r\n  SCRIPT = 18\r\n}\r\n\r\nexport const enum PacketTypeExt {\r\n  PacketTypeSequenceStart = 0,\r\n  PacketTypeCodedFrames = 1,\r\n  PacketTypeSequenceEnd = 2,\r\n  PacketTypeCodedFramesX = 3,\r\n  PacketTypeMetadata = 4,\r\n  PacketTypeMPEG2TSSequenceStart = 5\r\n}\r\n\r\nexport const enum AVCPacketType {\r\n  AVC_SEQUENCE_HEADER,\r\n  AVC_NALU,\r\n  AVC_END_OF_ENQUENCE\r\n}\r\n\r\nexport const AVCodecID2FlvCodecType = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 10,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 2,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 11,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 1,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 6,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 7,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 8,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 7,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 12,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 13,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 9,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 2,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 3,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 5,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 6\r\n}\r\n\r\nexport const FlvAudioCodecType2AVCodecID = {\r\n  10: AVCodecID.AV_CODEC_ID_AAC,\r\n  2: AVCodecID.AV_CODEC_ID_MP3,\r\n  11: AVCodecID.AV_CODEC_ID_SPEEX,\r\n\r\n  1: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  4: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  5: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  6: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  7: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  8: AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n}\r\n\r\nexport const FlvVideoCodecType2AVCodecID = {\r\n  7: AVCodecID.AV_CODEC_ID_H264,\r\n  12: AVCodecID.AV_CODEC_ID_HEVC,\r\n  13: AVCodecID.AV_CODEC_ID_VVC,\r\n  9: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  2: AVCodecID.AV_CODEC_ID_H263,\r\n  3: AVCodecID.AV_CODEC_ID_FLASHSV,\r\n  4: AVCodecID.AV_CODEC_ID_VP6F,\r\n  5: AVCodecID.AV_CODEC_ID_VP6A,\r\n  6: AVCodecID.AV_CODEC_ID_FLASHSV2\r\n}\r\n\r\nexport const FlvCodecHeaderLength = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 1,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 0,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 0,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 0,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 0,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 4,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 4,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 4,\r\n  [AVCodecID.AV_CODEC_ID_AV1]: 4,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 0,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 0,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 0,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 0,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 0\r\n}\r\n","/*\r\n * libmedia flv encode\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from '../../AVStream'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { AVCodecID2FlvCodecType, FlvTag, PacketTypeExt } from './flv'\r\n\r\nexport function writeTagHeader(\r\n  ioWriter: IOWriter,\r\n  type: FlvTag,\r\n  size: number,\r\n  timestamp: bigint\r\n) {\r\n  // tagType\r\n  ioWriter.writeUint8(type)\r\n  // size\r\n  ioWriter.writeUint24(size)\r\n  // timestamp\r\n  ioWriter.writeUint24(Number(timestamp & 0xffffffn))\r\n  // timestampExtended\r\n  ioWriter.writeUint8(Number((timestamp >> 24n) & 0xffn))\r\n  // streamId always 0\r\n  ioWriter.writeUint24(0)\r\n}\r\n\r\n/**\r\n * \r\n *   0  1  2  3    4    5      6         7   \r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n *  |SoundFormat|SoundRate|SoundSize| SoundType| SoundData\r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n * \r\n * @param ioWriter \r\n * @param stream \r\n */\r\nexport function writeAudioTagDataHeader(ioWriter: IOWriter, stream: Stream) {\r\n  /**\r\n   * SoundSize 采样精度，对于压缩过的音频，永远是 16 位\r\n   * - 0 snd8Bit\r\n   * - 1 snd16Bit\r\n   */\r\n  let header = 0x02\r\n  /**\r\n   * SoundType 声道类型，对 Nellymoser 来说，永远是单声道；对 AAC 来说，永远是双声道\r\n   * - 0 sndMono 单声道\r\n   * - 1 sndStereo 双声道\r\n   */\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.chLayout.nbChannels > 1) {\r\n    header |= 0x01\r\n  }\r\n  /**\r\n   * SoundRate 采样率，对 AAC 来说，永远等于 3\r\n   * - 0 5.5-kHz\r\n   * - 1 1-kHz\r\n   * - 2 22-kHz\r\n   * - 3 44-kHz\r\n   */\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.sampleRate >= 44000) {\r\n    header |= 0x0c\r\n  }\r\n  else if (stream.codecpar.sampleRate >= 22000) {\r\n    header |= 0x08\r\n  }\r\n  else if (stream.codecpar.sampleRate >= 11000) {\r\n    header |= 0x04\r\n  }\r\n\r\n  header |= ((AVCodecID2FlvCodecType[stream.codecpar.codecId]) << 4)\r\n\r\n  ioWriter.writeUint8(header)\r\n}\r\n\r\n/**\r\n * \r\n *   0 1  2  3  4 5 6 7   \r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\r\n *  |FrameType|CodecID| VideoData\r\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n * @param ioWriter \r\n * @param stream \r\n */\r\nexport function writeVideoTagDataHeader(ioWriter: IOWriter, stream: Stream, flags: AVPacketFlags) {\r\n  let header = AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n  ) {\r\n    if (flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n      header |= (1 << 4)\r\n    }\r\n    else {\r\n      header |= (1 << 5)\r\n    }\r\n  }\r\n  ioWriter.writeUint8(header)\r\n}\r\n\r\nexport function writeVideoTagExtDataHeader(ioWriter: IOWriter, stream: Stream, type: PacketTypeExt, flags: AVPacketFlags) {\r\n  let header = (type & 0x0f) | 0x80\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n  ) {\r\n    if (flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n      header |= (1 << 4)\r\n    }\r\n    else {\r\n      header |= (1 << 5)\r\n    }\r\n  }\r\n  ioWriter.writeUint8(header)\r\n}\r\n"],"names":[],"sourceRoot":""}