import { AVIFormatContext } from '../../AVFormatContext';
import { EBMLId, EbmlType } from './matroska';
import { Addition, Additions, Attachment, Attachments, AudioTrack, BlockGroup, Chapter, ChapterAtom, ChapterDisplay, Chapters, Cluster, CuePoint, CuePointPos, Cues, Header, Info, MasteringMeta, SeekHead, SeekHeadEntry, SimpleTag, Tag, TagTargets, Tags, TrackCombinePlanes, TrackEncoding, TrackEncodingCompression, TrackEncodingEncryption, TrackEncodings, TrackEntry, TrackOperation, TrackPlane, Tracks, VideoColor, VideoProjection, VideoTrack } from './type';
import { BytesReader, BytesReaderSync } from 'common/io/interface';
interface EbmlSyntax<T> {
    type: EbmlType;
    isArray?: boolean;
    filedName: keyof T;
    child?: Partial<Record<EBMLId, EbmlSyntax<any>>>;
}
export declare const EbmlSyntaxHeadSeekEntry: Partial<Record<EBMLId, EbmlSyntax<SeekHeadEntry>>>;
export declare const EbmlSyntaxHeadSeek: Partial<Record<EBMLId, EbmlSyntax<SeekHead>>>;
export declare const EbmlSyntaxInfo: Partial<Record<EBMLId, EbmlSyntax<Info>>>;
export declare const EbmlSyntaxTrackAudio: Partial<Record<EBMLId, EbmlSyntax<AudioTrack>>>;
export declare const EbmlSyntaxMasteringMeta: Partial<Record<EBMLId, EbmlSyntax<MasteringMeta>>>;
export declare const EbmlSyntaxVideoColor: Partial<Record<EBMLId, EbmlSyntax<VideoColor>>>;
export declare const EbmlSyntaxVideoProjection: Partial<Record<EBMLId, EbmlSyntax<VideoProjection>>>;
export declare const EbmlSyntaxTrackVideo: Partial<Record<EBMLId, EbmlSyntax<VideoTrack>>>;
export declare const EbmlSyntaxTrackPlane: Partial<Record<EBMLId, EbmlSyntax<TrackPlane>>>;
export declare const EbmlSyntaxTrackCombinePlanes: Partial<Record<EBMLId, EbmlSyntax<TrackCombinePlanes>>>;
export declare const EbmlSyntaxTrackOperation: Partial<Record<EBMLId, EbmlSyntax<TrackOperation>>>;
export declare const EbmlSyntaxTrackEncodingCompression: Partial<Record<EBMLId, EbmlSyntax<TrackEncodingCompression>>>;
export declare const EbmlSyntaxTrackEncodingEncryption: Partial<Record<EBMLId, EbmlSyntax<TrackEncodingEncryption>>>;
export declare const EbmlSyntaxTrackEncoding: Partial<Record<EBMLId, EbmlSyntax<TrackEncoding>>>;
export declare const EbmlSyntaxTrackEncodings: Partial<Record<EBMLId, EbmlSyntax<TrackEncodings>>>;
export declare const EbmlSyntaxTrackEntry: Partial<Record<EBMLId, EbmlSyntax<TrackEntry>>>;
export declare const EbmlSyntaxTracks: Partial<Record<EBMLId, EbmlSyntax<Tracks>>>;
export declare const EbmlSyntaxAttachment: Partial<Record<EBMLId, EbmlSyntax<Attachment>>>;
export declare const EbmlSyntaxAttachments: Partial<Record<EBMLId, EbmlSyntax<Attachments>>>;
export declare const EbmlSyntaxChapterDisplay: Partial<Record<EBMLId, EbmlSyntax<ChapterDisplay>>>;
export declare const EbmlSyntaxChapterAtom: Partial<Record<EBMLId, EbmlSyntax<ChapterAtom>>>;
export declare const EbmlSyntaxChapter: Partial<Record<EBMLId, EbmlSyntax<Chapter>>>;
export declare const EbmlSyntaxChapters: Partial<Record<EBMLId, EbmlSyntax<Chapters>>>;
export declare const EbmlSyntaxCuePointPos: Partial<Record<EBMLId, EbmlSyntax<CuePointPos>>>;
export declare const EbmlSyntaxCuePoint: Partial<Record<EBMLId, EbmlSyntax<CuePoint>>>;
export declare const EbmlSyntaxCues: Partial<Record<EBMLId, EbmlSyntax<Cues>>>;
export declare const EbmlSyntaxTagTargets: Partial<Record<EBMLId, EbmlSyntax<TagTargets>>>;
export declare const EbmlSyntaxSimpleTag: Partial<Record<EBMLId, EbmlSyntax<SimpleTag>>>;
export declare const EbmlSyntaxTag: Partial<Record<EBMLId, EbmlSyntax<Tag>>>;
export declare const EbmlSyntaxTags: Partial<Record<EBMLId, EbmlSyntax<Tags>>>;
export declare const EbmlSyntaxAddition: Partial<Record<EBMLId, EbmlSyntax<Addition>>>;
export declare const EbmlSyntaxAdditions: Partial<Record<EBMLId, EbmlSyntax<Additions>>>;
export declare const EbmlSyntaxBlockGroup: Partial<Record<EBMLId, EbmlSyntax<BlockGroup>>>;
export declare const EbmlSyntaxCluster: Partial<Record<EBMLId, EbmlSyntax<Cluster>>>;
export declare const EbmlSyntaxHeader: Partial<Record<EBMLId, EbmlSyntax<Header>>>;
export declare function readVInt(reader: BytesReader | BytesReaderSync, maxLen: number): Promise<number>;
export declare function readVSint(reader: BytesReader | BytesReaderSync, maxLen: number): Promise<number>;
export declare function readVInt64(reader: BytesReader | BytesReaderSync, maxLen: number): Promise<int64>;
export declare function readUint(formatContext: AVIFormatContext, len: int64): Promise<number | bigint>;
export declare function readInt(formatContext: AVIFormatContext, len: int64): Promise<number | bigint>;
export declare function readFloat(formatContext: AVIFormatContext, len: int64): Promise<number>;
export declare function readEbmlId(formatContext: AVIFormatContext, maxLen: number): Promise<number>;
export declare function parseEbml(formatContext: AVIFormatContext, size: int64, callback: (id: EBMLId, length: int64) => Promise<void | boolean>): Promise<void>;
export declare function parseEbmlSyntax<T extends Record<string, any>>(formatContext: AVIFormatContext, size: int64, syntax: Partial<Record<EBMLId, EbmlSyntax<T>>>, ebml?: Partial<T>, stopId?: EBMLId[]): Promise<T>;
export {};
