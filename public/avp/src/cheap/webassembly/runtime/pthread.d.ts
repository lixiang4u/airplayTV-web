import { Mutex } from '../../thread/mutex';
import { Cond } from '../../thread/cond';
import { Timespec } from './semaphore';
import { Pthread, PthreadOnce } from '../thread';
export declare let wasm_pthread_mutex_init: (mutex: pointer<Mutex>, attr: pointer<void>) => int32;
export declare let wasm_pthread_mutex_destroy: (mutex: pointer<Mutex>) => int32;
export declare let wasm_pthread_mutex_lock: (mutex: pointer<Mutex>) => int32;
export declare let wasm_pthread_mutex_trylock: (mutex: pointer<Mutex>) => int32;
export declare let wasm_pthread_mutex_unlock: (mutex: pointer<Mutex>) => int32;
export declare let wasm_pthread_cond_init: (cond: pointer<Cond>, attr: pointer<void>) => int32;
export declare let wasm_pthread_cond_destroy: (cond: pointer<Cond>) => int32;
export declare let wasm_pthread_cond_wait: (cond: pointer<Cond>, mutex: pointer<Mutex>) => int32;
export declare let wasm_pthread_cond_timedwait: (cond: pointer<Cond>, mutex: pointer<Mutex>, abstime: pointer<Timespec>) => int32;
export declare let wasm_pthread_cond_signal: (cond: pointer<Cond>) => int32;
export declare let wasm_pthread_cond_broadcast: (cond: pointer<Cond>) => int32;
export declare let wasm_pthread_once: (control: pointer<PthreadOnce>, func: pointer<() => void>) => int32;
export declare function wasm_pthread_self2(): pointer<Pthread>;
export declare function wasm_pthread_exit(retval: pointer<void>): void;
export declare function wasm_pthread_equal2(t1: pointer<Pthread>, t2: pointer<Pthread>): 0 | 1;
export declare function wasm_pthread_support(): 0 | 1;
export declare function wasm_cpu_core_count(): number;
export declare function wasm_threw_error(code: int32, msg: pointer<char>): void;
export declare function override(data: {
    wasm_pthread_mutex_lock?: (mutex: pointer<Mutex>) => int32;
    wasm_pthread_mutex_trylock?: (mutex: pointer<Mutex>) => int32;
    wasm_pthread_mutex_unlock?: (mutex: pointer<Mutex>) => int32;
    wasm_pthread_cond_wait?: (cond: pointer<Cond>, mutex: pointer<Mutex>) => int32;
    wasm_pthread_cond_timedwait?: (cond: pointer<Cond>, mutex: pointer<Mutex>, abstime: pointer<Timespec>) => int32;
    wasm_pthread_cond_signal?: (cond: pointer<Cond>) => int32;
    wasm_pthread_cond_broadcast?: (cond: pointer<Cond>) => int32;
}): void;
