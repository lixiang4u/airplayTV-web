export declare let atomic_add_i8: (p: pointer<atomic_int8>, value: int32) => int8;
export declare let atomic_sub_i8: (p: pointer<atomic_int8>, value: int32) => int8;
export declare let atomic_and_i8: (p: pointer<atomic_int8>, value: int32) => int8;
export declare let atomic_or_i8: (p: pointer<atomic_int8>, value: int32) => int8;
export declare let atomic_xor_i8: (p: pointer<atomic_int8>, value: int32) => int8;
export declare let atomic_store_i8: (p: pointer<atomic_int8>, value: int32) => int8;
export declare let atomic_load_i8: (p: pointer<atomic_int8>) => int8;
export declare let atomic_compare_exchange_i8: (p: pointer<atomic_int8>, expectedValue: int32, replacementValue: int32) => int8;
export declare let atomic_exchange_i8: (p: pointer<atomic_int8>, value: int32) => int8;
export declare let atomic_add_i16: (p: pointer<atomic_int16>, value: int32) => int16;
export declare let atomic_sub_i16: (p: pointer<atomic_int16>, value: int32) => int16;
export declare let atomic_and_i16: (p: pointer<atomic_int16>, value: int32) => int16;
export declare let atomic_or_i16: (p: pointer<atomic_int16>, value: int32) => int16;
export declare let atomic_xor_i16: (p: pointer<atomic_int16>, value: int32) => int16;
export declare let atomic_store_i16: (p: pointer<atomic_int16>, value: int32) => int16;
export declare let atomic_load_i16: (p: pointer<atomic_int16>) => int16;
export declare let atomic_compare_exchange_i16: (p: pointer<atomic_int16>, expectedValue: int32, replacementValue: int32) => int16;
export declare let atomic_exchange_i16: (p: pointer<atomic_int16>, value: int32) => int16;
export declare let atomic_add_i32: (p: pointer<atomic_int32>, value: int32) => int32;
export declare let atomic_sub_i32: (p: pointer<atomic_int32>, value: int32) => int32;
export declare let atomic_and_i32: (p: pointer<atomic_int32>, value: int32) => int32;
export declare let atomic_or_i32: (p: pointer<atomic_int32>, value: int32) => int32;
export declare let atomic_xor_i32: (p: pointer<atomic_int32>, value: int32) => int32;
export declare let atomic_store_i32: (p: pointer<atomic_int32>, value: int32) => int32;
export declare let atomic_load_i32: (p: pointer<atomic_int32>) => int32;
export declare let atomic_compare_exchange_i32: (p: pointer<atomic_int32>, expectedValue: int32, replacementValue: int32) => int32;
export declare let atomic_exchange_i32: (p: pointer<atomic_int32>, value: int32) => int32;
export declare let atomic_add_i64: (p: pointer<atomic_int64>, value: int64) => int64;
export declare let atomic_sub_i64: (p: pointer<atomic_int64>, value: int64) => int64;
export declare let atomic_and_i64: (p: pointer<atomic_int64>, value: int64) => int64;
export declare let atomic_or_i64: (p: pointer<atomic_int64>, value: int64) => int64;
export declare let atomic_xor_i64: (p: pointer<atomic_int64>, value: int64) => int64;
export declare let atomic_store_i64: (p: pointer<atomic_int64>, value: int64) => int64;
export declare let atomic_load_i64: (p: pointer<atomic_int64>) => int64;
export declare let atomic_compare_exchange_i64: (p: pointer<atomic_int64>, expectedValue: int64, replacementValue: int64) => int64;
export declare let atomic_exchange_i64: (p: pointer<atomic_int64>, value: int64) => int64;
export declare let atomics_notify: (p: pointer<atomic_int32>, count: uint32) => uint32;
export declare let atomics_wait: (p: pointer<atomic_int32>, value: int32) => 0 | 1 | 2;
export declare let atomics_wait_timeout: (p: pointer<atomic_int32>, value: int32, timeout: int64) => 0 | 1 | 2;
export declare function override(data: {
    atomic_add_i8?: typeof atomic_add_i8;
    atomic_sub_i8?: typeof atomic_sub_i8;
    atomic_and_i8?: typeof atomic_and_i8;
    atomic_or_i8?: typeof atomic_or_i8;
    atomic_xor_i8?: typeof atomic_xor_i8;
    atomic_store_i8?: typeof atomic_store_i8;
    atomic_load_i8?: typeof atomic_load_i8;
    atomic_compare_exchange_i8?: typeof atomic_compare_exchange_i8;
    atomic_exchange_i8?: typeof atomic_exchange_i8;
    atomic_add_i16?: typeof atomic_add_i16;
    atomic_sub_i16?: typeof atomic_sub_i16;
    atomic_and_i16?: typeof atomic_and_i16;
    atomic_or_i16?: typeof atomic_or_i16;
    atomic_xor_i16?: typeof atomic_xor_i16;
    atomic_store_i16?: typeof atomic_store_i16;
    atomic_load_i16?: typeof atomic_load_i16;
    atomic_compare_exchange_i16?: typeof atomic_compare_exchange_i16;
    atomic_exchange_i16?: typeof atomic_exchange_i16;
    atomic_add_i32?: typeof atomic_add_i32;
    atomic_sub_i32?: typeof atomic_sub_i32;
    atomic_and_i32?: typeof atomic_and_i32;
    atomic_or_i32?: typeof atomic_or_i32;
    atomic_xor_i32?: typeof atomic_xor_i32;
    atomic_store_i32?: typeof atomic_store_i32;
    atomic_load_i32?: typeof atomic_load_i32;
    atomic_compare_exchange_i32?: typeof atomic_compare_exchange_i32;
    atomic_exchange_i32?: typeof atomic_exchange_i32;
    atomic_add_i64?: typeof atomic_add_i64;
    atomic_sub_i64?: typeof atomic_sub_i64;
    atomic_and_i64?: typeof atomic_and_i64;
    atomic_or_i64?: typeof atomic_or_i64;
    atomic_xor_i64?: typeof atomic_xor_i64;
    atomic_store_i64?: typeof atomic_store_i64;
    atomic_load_i64?: typeof atomic_load_i64;
    atomic_compare_exchange_i64?: typeof atomic_compare_exchange_i64;
    atomic_exchange_i64?: typeof atomic_exchange_i64;
    atomics_notify?: typeof atomics_notify;
    atomics_wait?: typeof atomics_wait;
    atomics_wait_timeout?: typeof atomics_wait_timeout;
}): void;
